
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсияМодуля = ТекущаяВерсияМодуля();
	
	//НаборКонстант.
	//
	УБ_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма,Отказ,СтандартнаяОбработка);
	
	Если НаборКонстант.УБ_НегативноеОтклонениеНормыДо = 0 И НаборКонстант.УБ_ПозитивноеОтклонениеНормыОт = 0 Тогда
		НаборКонстант.УБ_ПозитивноеОтклонениеНормыОт = 75;
		НаборКонстант.УБ_НегативноеОтклонениеНормыДо = 25;
		НаборКонстант.УБ_ПограничноеОтклонениеНормыОт = НаборКонстант.УБ_НегативноеОтклонениеНормыДо + 0.01;
		НаборКонстант.УБ_ПограничноеОтклонениеНормыДо = НаборКонстант.УБ_ПозитивноеОтклонениеНормыОт - 0.01;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаборКонстант.УБ_СпособРаспределенияПремии) Тогда
		НаборКонстант.УБ_СпособРаспределенияПремии = Перечисления.УБ_СпособРаспределенияПремии.Стандартный;	
	КонецЕсли;
	ПриИзмененииСпособаРаспределения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьБезокладнуюСистемуПоказателейПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйКадровыйУчетПриИзменении(Элемент)
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизвольныйПериодРасчетаМоделиПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаСервер(Элемент.Имя); 
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальноеЗначениеЭффективностиДоПриИзменении(Элемент)
		
	НаборКонстант.УБ_ПограничноеОтклонениеНормыОт = НаборКонстант.УБ_НегативноеОтклонениеНормыДо + 0.01;
	
	Если НаборКонстант.УБ_НегативноеОтклонениеНормыДо >= НаборКонстант.УБ_ПограничноеОтклонениеНормыДо Тогда
		
		НаборКонстант.УБ_ПограничноеОтклонениеНормыДо = НаборКонстант.УБ_ПограничноеОтклонениеНормыОт + 0.01;
		
		Если НаборКонстант.УБ_ПограничноеОтклонениеНормыДо >= НаборКонстант.УБ_ПозитивноеОтклонениеНормыОт Тогда
			НаборКонстант.УБ_ПозитивноеОтклонениеНормыОт = НаборКонстант.УБ_ПограничноеОтклонениеНормыДо + 0.01;
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ПриИзмененииРеквизитаСервер(Элементы.ПограничноеОтклонениеОт.Имя);
	ПриИзмененииРеквизитаСервер(Элементы.ПограничноеОтклонениеДо.Имя);
	ПриИзмененииРеквизитаСервер(Элементы.ПозитивноеОтклонениеОт.Имя);

КонецПроцедуры

&НаКлиенте
Процедура УБ_НормальноеЗначениеЭффективностиОтПриИзменении(Элемент)
		
	НаборКонстант.УБ_НегативноеОтклонениеНормыДо = НаборКонстант.УБ_ПограничноеОтклонениеНормыОт - 0.01;
	
	Если НаборКонстант.УБ_ПограничноеОтклонениеНормыОт >= НаборКонстант.УБ_ПограничноеОтклонениеНормыДо Тогда
		
		НаборКонстант.УБ_ПограничноеОтклонениеНормыДо = НаборКонстант.УБ_ПограничноеОтклонениеНормыОт + 0.01;
		
		Если НаборКонстант.УБ_ПограничноеОтклонениеНормыДо >= НаборКонстант.УБ_ПозитивноеОтклонениеНормыОт Тогда
			НаборКонстант.УБ_ПозитивноеОтклонениеНормыОт = НаборКонстант.УБ_ПограничноеОтклонениеНормыДо + 0.01;
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииРеквизитаСервер(Элементы.НегативноеОтклонениеДо.Имя);
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ПриИзмененииРеквизитаСервер(Элементы.ПограничноеОтклонениеДо.Имя);
	ПриИзмененииРеквизитаСервер(Элементы.ПозитивноеОтклонениеОт.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НормальноеЗначениеЭффективностиДоПриИзменении(Элемент)
		
	НаборКонстант.УБ_ПозитивноеОтклонениеНормыОт = НаборКонстант.УБ_ПограничноеОтклонениеНормыДо + 0.01;
	
	Если НаборКонстант.УБ_ПограничноеОтклонениеНормыОт >= НаборКонстант.УБ_ПограничноеОтклонениеНормыДо Тогда
		
		НаборКонстант.УБ_ПограничноеОтклонениеНормыОт = НаборКонстант.УБ_ПограничноеОтклонениеНормыДо - 0.01;
		
		Если НаборКонстант.УБ_ПограничноеОтклонениеНормыОт <= НаборКонстант.УБ_НегативноеОтклонениеНормыДо Тогда
			НаборКонстант.УБ_НегативноеОтклонениеНормыДо = НаборКонстант.УБ_ПограничноеОтклонениеНормыОт - 0.01;
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииРеквизитаСервер(Элементы.НегативноеОтклонениеДо.Имя);
	ПриИзмененииРеквизитаСервер(Элементы.ПограничноеОтклонениеОт.Имя);
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ПриИзмененииРеквизитаСервер(Элементы.ПозитивноеОтклонениеОт.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ХорошееЗначениеЭффективностиПриИзменении(Элемент)
	
	НаборКонстант.УБ_ПограничноеОтклонениеНормыДо = НаборКонстант.УБ_ПозитивноеОтклонениеНормыОт - 0.01;
	
	Если НаборКонстант.УБ_ПограничноеОтклонениеНормыОт >= НаборКонстант.УБ_ПограничноеОтклонениеНормыДо Тогда
		
		НаборКонстант.УБ_ПограничноеОтклонениеНормыОт = НаборКонстант.УБ_ПограничноеОтклонениеНормыДо - 0.01;
		
		Если НаборКонстант.УБ_ПограничноеОтклонениеНормыОт <= НаборКонстант.УБ_НегативноеОтклонениеНормыДо Тогда
			НаборКонстант.УБ_НегативноеОтклонениеНормыДо = НаборКонстант.УБ_ПограничноеОтклонениеНормыОт - 0.01;
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииРеквизитаСервер(Элементы.НегативноеОтклонениеДо.Имя);
	ПриИзмененииРеквизитаСервер(Элементы.ПограничноеОтклонениеОт.Имя);	
	ПриИзмененииРеквизитаСервер(Элементы.ПограничноеОтклонениеДо.Имя);
	ПриИзмененииРеквизитаСервер(Элемент.Имя);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьУсловноеОформление()
	//ПереключательОбратный
	СтандартныйКадровыйУчетОбратный = НЕ НаборКонстант.УБ_СтандартныйКадровыйУчет;
	//ГиперссылкаСтандартныйКадровыйУчет
	Элементы.ГруппаВедетсяВКМГиперссылка.Видимость = НЕ НаборКонстант.УБ_СтандартныйКадровыйУчет;
	//Если НаборКонстант.УБ_СтандартныйКадровыйУчет Тогда
	//	Элементы.ТекстВедётсяВКМ.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	//Иначе
	//	Элементы.ТекстВедётсяВКМ.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 1);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяВерсияМодуля()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииПодсистем.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ИмяПодсистемы = ""MBO_УправлениеБизнесом""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Версия;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	ЧастиИмени = СтрРазделить(РеквизитПутьКДанным, ".");
	Если ЧастиИмени.Количество() <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКонстанты = ЧастиИмени[1];
	КонстантаМенеджер = Константы[ИмяКонстанты];
	КонстантаЗначение = НаборКонстант[ИмяКонстанты];
	
	Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
		КонстантаМенеджер.Установить(КонстантаЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтклоненияВТабличнойЧастиДокументовПланированияПриИзменении(Элемент)
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УБ_ИспользоватьСистемуПланированияССППриИзменении(Элемент)
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УБ_ИспользоватьПодсистемуМатериальнойМотивацииПриИзменении(Элемент)
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УБ_СпособРаспределенияПремииПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ПриИзмененииСпособаРаспределения();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСпособаРаспределения()

	Если Константы.УБ_СпособРаспределенияПремии.Получить() = ПредопределенноеЗначение("Перечисление.УБ_СпособРаспределенияПремии.Стандартный") Тогда
		Элементы.НадписьОписания.Заголовок = "Стандартный – Общие суммы распределяются в соответствии с классической бальной (безокладной) системой в которой распределяется вся сумма в соответствии с заработанными сотрудниками балами.";
	ИначеЕсли Константы.УБ_СпособРаспределенияПремии.Получить() = ПредопределенноеЗначение("Перечисление.УБ_СпособРаспределенияПремии.Способ1") Тогда
		Элементы.НадписьОписания.Заголовок = "Ограничение максимума – В этом способе появляется дополнительная настройка, которая позволяет установить для сотрудника, коэффициент, который будет определять максимальную часть от общей распределяемой суммы которую может получить сотрудник. Сотрудник с установленным коэффициентом не сможет получить сумму выше суммы определённой коэффициентом даже при условии, если сотрудник заработал больше всех балов по бальной (безокладной) системе. При этом если суммарное коэффициент ограничения сотрудников отдела меньше 1 будет формироваться остаток распределяемой суммы.";
	ИначеЕсли Константы.УБ_СпособРаспределенияПремии.Получить() = ПредопределенноеЗначение("Перечисление.УБ_СпособРаспределенияПремии.Способ2") Тогда
		Элементы.НадписьОписания.Заголовок = "Ограничение максимума с учётом заработанных балов - В этом способе, как и в способе «Ограничение максимума» появляется дополнительная настройка, которая позволяет установить для сотрудника, коэффициент, который будет определять часть от общей распределяемой суммы которую получит сотрудник при условии выполнения всех показателей на 100%. В данном способе учитывается соотношение заработанных баллов к максимальному количеству возможных балов. Получить максимальную сумму, установленную коэффициентом возможно при достижении максимально возможной суммы балов. Стоит учитывать, что в данном способе если сотрудник перевыполнил показатели более чем на 100% и заработал дополнительные балы тогда он превысит свой максимум и из-за этого может образоваться отрицательная сумма в остатке распределяемой суммы.";
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УБ_ПроцентПремииПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ТекстГипперссылкаНаДокументНММНажатие(Элемент)
	ПередаваемыеПараметры = Новый Структура("УникальныйЗаголовок", "Первичная кадровая настройка материальной мотивации");
	ОткрытьФорму("Документ.УБ_НазначениеНаДолжность.ФормаСписка",ПередаваемыеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйКадровыйУчетОбратныйПриИзменении(Элемент)
	НаборКонстант.УБ_СтандартныйКадровыйУчет = НЕ НаборКонстант.УБ_СтандартныйКадровыйУчет;
	СтандартныйКадровыйУчетПриИзменении(Элементы.УБ_СтандартныйКадровыйУчет);

	ОбновитьИнтерфейс();
	
	УстановитьУсловноеОформление();	
КонецПроцедуры

#КонецОбласти
