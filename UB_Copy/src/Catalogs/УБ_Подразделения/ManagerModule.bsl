#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
//Параметры:
// Параметры - Структура
//			   ИмяФормы - строка            
//			   Дата - Дата	
//			   РольДоступнаПодразделениеРасш - Булево

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если Параметры.Свойство("СтрокаПоиска") И Не ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		СтрокаПоиска = Параметры.СтрокаПоиска;
	Иначе
		СтрокаПоиска = "";
	КонецЕсли;                               
	
	ТекстыУсловий = Новый Массив;
	
	Если Параметры.Отбор.Свойство("ГоловноеПодразделение") Тогда
		
		Запрос.УстановитьПараметр("ГоловноеПодразделение", Параметры.Отбор.ГоловноеПодразделение);
		ТекстыУсловий.Добавить("Подразделения.Ссылка В ИЕРАРХИИ (&ГоловноеПодразделение)");
		
		Параметры.Отбор.Удалить("ГоловноеПодразделение");
		
	КонецЕсли;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51        
		|	Подразделения.Ссылка КАК Ссылка,
		|	Подразделения.Наименование КАК Наименование,
		|	Подразделения.Ссылка КАК Подразделение,
		|	Подразделения.Код КАК Код,
		|	Подразделения.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.УБ_Подразделения КАК Подразделения
		|ГДЕ                            
		|   &УсловияОтбора И
		|	(&УсловияОтбораПоНаименованию ИЛИ &УсловияОтбораПоКоду)";

	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		
		Запрос.УстановитьПараметр("СтрокаПоиска", "%"+СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("СтрокаПоискаПоКоду", "%" + СтрокаПоиска + "%");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&УсловияОтбораПоНаименованию",
		"Подразделения.Наименование ПОДОБНО &СтрокаПоиска");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&УсловияОтбораПоКоду",
		"Подразделения.Код ПОДОБНО &СтрокаПоискаПоКоду");
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбораПоНаименованию", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбораПоКоду", "ИСТИНА");
	КонецЕсли;

    Если Параметры.Отбор.Свойство("Владелец") Тогда
		
		ТекстыУсловий.Добавить("Подразделения.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Параметры.Отбор.Владелец);

	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Расформировано") Тогда
		
		Если Параметры.Отбор.Расформировано Тогда
			ТекстыУсловий.Добавить("Подразделения.Расформировано");
		Иначе
			ТекстыУсловий.Добавить("НЕ Подразделения.Расформировано");
		КонецЕсли;
		
		Параметры.Отбор.Удалить("Расформировано");
		
	КонецЕсли;
	ТекстыУсловий.Добавить("НЕ Подразделения.ПометкаУдаления"); 
	ТекстыЗапроса = Новый Массив;
		
	Если ТекстыУсловий.Количество() = 0 Тогда
		ТекстыЗапроса.Добавить(СтрЗаменить(Запрос.Текст, "&УсловияОтбора", "(ИСТИНА)"));
	Иначе
		ТекстыЗапроса.Добавить(СтрЗаменить(Запрос.Текст, "&УсловияОтбора", СтрСоединить(ТекстыУсловий, Символы.ПС + "И ")));
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(
		"УПОРЯДОЧИТЬ ПО
		|	Подразделения.Наименование");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Список = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Список.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	ДанныеВыбора = Список;

КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированияОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры


// Конец СтандартныеПодсистемы.ВерсионированияОбъектов

#Область ДляВызоваИзДругихПодсистем
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

#КонецОбласти
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.УБ_Подразделения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.0.1.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение даты создания подразделений.'");
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подразделения.Ссылка
		|ИЗ
		|	Справочник.УБ_Подразделения КАК Подразделения
		|ГДЕ
		|	НЕ Подразделения.ПометкаУдаления
		|	И НЕ Подразделения.Сформировано
		|	И Подразделения.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.УБ_Подразделения");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если СправочникОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			СправочникОбъект.Сформировано = Истина;
			СправочникОбъект.ДатаСоздания = '20000101';
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать справочник: %1 по причине: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли    

