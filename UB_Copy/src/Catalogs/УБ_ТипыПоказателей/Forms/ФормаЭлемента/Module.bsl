
#Область ОписаниеПеременных

&НаКлиенте
Перем ПрежнееНаименование, ПрежнийИдентификатор;
#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УБ_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма,Отказ,СтандартнаяОбработка);
	ТипРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПоказательУтвержденияСтандартов, "ТипРасчета");
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	УстановитьДоступностьЭлементовФормы(ЭтаФорма);
	
	Если Элементы.ГраницыНормыЭффективностиПоказателей.Доступность Или Объект.Ссылка.Пустая() Тогда
		Если Объект.НегативноеОтклонениеНормыДо = Объект.ПограничноеОтклонениеНормыОт
			= Объект.ПограничноеОтклонениеНормыДо = Объект.ПозитивноеОтклонениеНормыОт Тогда
			
			Объект.НегативноеОтклонениеНормыДо = Константы.УБ_НегативноеОтклонениеНормыДо.Получить();
			Объект.ПограничноеОтклонениеНормыОт = Константы.УБ_ПограничноеОтклонениеНормыОт.Получить();
			Объект.ПограничноеОтклонениеНормыДо = Константы.УБ_ПограничноеОтклонениеНормыДо.Получить();
			Объект.ПозитивноеОтклонениеНормыОт = Константы.УБ_ПозитивноеОтклонениеНормыОт.Получить();
			
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПереключательВида = 0;
	Иначе
		Если Объект.Матричный  Тогда
			ПереключательВида = 1;
		ИначеЕсли Объект.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы Тогда
			ПереключательВида = 2;
		Иначе
			ПереключательВида = 0;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.Найти("КИндикатор") <> Неопределено Тогда
		типПрямой = УБ_СобытияФормКлиент.ТипРасчетаПрямой(ТипРасчета);
		УБ_ПользовательскийИнтерфейсКлиент.СменаНаправленияИндикаторовГНЭ(Элементы.КИндикатор,Элементы.ЗИндикатор,типПрямой);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ТекущийОбъект.Матричный Тогда
		ТекущийОбъект.БазовыйТипПоказателя = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//СоздатьЗаписьФормулыВРегистр();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереключательВидаПриИзменении(Элемент)
	Объект.Матричный = ПереключательВида = 1;
	Объект.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы = ПереключательВида = 2;
	УстановитьДоступностьЭлементовФормы(ЭтаФорма);
КонецПроцедуры      

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если Объект.Код = "" Тогда
		СтарыйИдентификатор = "";
	Иначе
		СтарыйИдентификатор = ИдентификаторПоПредставлению(ПрежнееНаименование);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Идентификатор)
		Или СтарыйИдентификатор = Объект.Идентификатор 
		Или Не ИдентификаторПоПредставлению(Объект.Наименование) = Объект.Идентификатор Тогда
		
		Объект.Идентификатор = ИдентификаторПоПредставлению(Объект.Наименование);
		ПрежнийИдентификатор = Объект.Идентификатор;
		
	КонецЕсли;
	
	ПрежнееНаименование = Объект.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Формула", Объект.ФормулаРасчета);
	ПараметрыФормы.Вставить("НаименованиеПоказателя", Строка(Объект.Ссылка));
	ПараметрыФормы.Вставить("ПоказательЭффективности", Объект.Ссылка);
	
	
	Оповещение = Новый ОписаниеОповещения("ЗафиксироватьФормулуРасчетаЗавершение", ЭтотОбъект,Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.УБ_РедактированиеФормулыПоказателВУтвержденииММ", ПараметрыФормы, ЭтотОбъект,,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьФормулуРасчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ФормулаРасчета = Результат.Формула;
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовФормы(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	Объект.ИспользоватьФормулу = Объект.Матричный;

	Если Объект.Матричный Тогда
		Форма.Элементы.ГраницыНормыЭффективностиПоказателей.Видимость = Истина;	
		Форма.Элементы.ГраницыНормыЭффективностиПоказателей.Доступность = Истина;
		Форма.Элементы.ФормулаРасчета.Видимость = Истина;	
		Форма.Элементы.ФормулаРасчета.Доступность = Истина;
	Иначе 
		Форма.Элементы.ГраницыНормыЭффективностиПоказателей.Видимость = Ложь;
		Форма.Элементы.ГраницыНормыЭффективностиПоказателей.Доступность = Ложь; 
		Форма.Элементы.ФормулаРасчета.Видимость = Ложь;
		Форма.Элементы.ФормулаРасчета.Доступность = Ложь;	
	КонецЕсли;
		
	Элементы.БазовыйТипПоказателя.Доступность = Объект.Матричный;
	
КонецПроцедуры
#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПоПредставлению(Знач Представление)
	
	Идентификатор = "";
	БылРазделитель = Ложь;
	Для НомерСимвола = 1 По СтрДлина(Представление) Цикл
		Символ = Сред(Представление, НомерСимвола, 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ)
			И ПустаяСтрока(Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола(Символ)) Тогда
			БылРазделитель = Истина; 
		Иначе
			Если БылРазделитель Тогда
				БылРазделитель = Ложь;
				Символ = ВРег(Символ);
			КонецЕсли;
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиенте
Процедура ИспользоватьФормулуПриИзменении(Элемент)
	
	Если Объект.ИспользоватьФормулу Тогда
		Элементы.ФормулаРасчета.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти


#КонецОбласти

#Область ГраницыПоказателей

&НаКлиенте
Процедура ИзменениеГраницыПоказателей(Элемент, Пограничное)
	
	Структура = УБ_СобытияФормКлиент.СформироватьСтруктуру();
	ЗаполнитьЗначенияСвойств(Структура, ЭтотОбъект.Объект);
	Структура.ТипРасчета = ТипРасчета;
	
	УБ_СобытияФормКлиент.ИзменениеЗначенияОтклонения(Структура,Элемент, Пограничное);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект.Объект, Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура НегативноеОтклонениеНормыДоПриИзменении(Элемент)	
	ИзменениеГраницыПоказателей(Элемент, Ложь);
	НеЗадаватьВопрос = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПозитивноеОтклонениеНормыОтПриИзменении(Элемент)
	ИзменениеГраницыПоказателей(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПограничноеОтклонениеНормыОтПриИзменении(Элемент)
	ИзменениеГраницыПоказателей(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПограничноеОтклонениеНормыДоПриИзменении(Элемент)
	ИзменениеГраницыПоказателей(Элемент, Истина);
КонецПроцедуры

#КонецОбласти