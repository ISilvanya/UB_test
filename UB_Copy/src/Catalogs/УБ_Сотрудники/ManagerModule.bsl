#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированияОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированияОбъектов

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Параметры.Отбор,
		СтандартныйОтбор(),
		Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если Параметры.Свойство("СтрокаПоиска") И Не ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		СтрокаПоиска = Параметры.СтрокаПоиска;
	Иначе
		СтрокаПоиска = "";
	КонецЕсли;
	
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	ТекстыУсловий = Новый Массив;
	
	Если Параметры.Отбор.Свойство("ФизическоеЛицо") Тогда
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", Параметры.Отбор.ФизическоеЛицо);
		ТекстыУсловий.Добавить("Сотрудники.ФизическоеЛицо В (&ФизическоеЛицо)");
		
		Параметры.Отбор.Удалить("ФизическоеЛицо");
		
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	Сотрудники.Наименование КАК Наименование,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.Код КАК Код,
		|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	РегистрСведений.УБ_ДанныеДляПодбораСотрудников КАК Сотрудники
		|	// УсловиеОграниченияДоступаКСотрудникам
		|ГДЕ
		|	&УсловияОтбораПоНаименованию";
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	Сотрудники.Наименование,
			|	Сотрудники.Сотрудник,
			|	Сотрудники.Код,
			|	Сотрудники.ПометкаУдаления
			|ИЗ
			|	РегистрСведений.УБ_ДанныеДляПодбораСотрудников КАК Сотрудники
			|	// УсловиеОграниченияДоступаКСотрудникам
			|ГДЕ
			|	&УсловияОтбораПоКоду";
		
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ВАрхиве") Тогда
		
		Если Параметры.Отбор.ВАрхиве Тогда
			ТекстыУсловий.Добавить("Сотрудники.ВАрхиве");
		Иначе
			ТекстыУсловий.Добавить("НЕ Сотрудники.ВАрхиве");
		КонецЕсли;
		
		Параметры.Отбор.Удалить("ВАрхиве");
		
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ТекущаяОрганизация") Тогда
		
		Если ЗначениеЗаполнено(Параметры.Отбор.ТекущаяОрганизация) Тогда
			Запрос.УстановитьПараметр("Организация", Параметры.Отбор.ТекущаяОрганизация);
			ТекстыУсловий.Добавить("Сотрудники.Организация = &Организация");
		Иначе
			Параметры.Отбор.Удалить("ТекущаяОрганизация");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ТекущееПодразделение") Тогда
		
		Если ЗначениеЗаполнено(Параметры.Отбор.ТекущееПодразделение) Тогда
			Запрос.УстановитьПараметр("Подразделение", Параметры.Отбор.ТекущееПодразделение);
			ТекстыУсловий.Добавить("Сотрудники.Подразделение В ИЕРАРХИИ (&Подразделение)");
		Иначе
			Параметры.Отбор.Удалить("ТекущееПодразделение");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ДоступныНеПринятые")
		И Параметры.ДоступныНеПринятые Тогда
		
		ТекстыУсловий.Добавить("Сотрудники.Начало = ДАТАВРЕМЯ(1, 1, 1)");
		ТекстыУсловий.Добавить("Сотрудники.Окончание = ДАТАВРЕМЯ(3999, 12, 31)");
	Иначе
		ТекстыУсловий.Добавить("Сотрудники.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.УБ_ВидыКадровыхСобытий.ПустаяСсылка)")
	КонецЕсли;
	
	ПериодРаботы = УБ_КадровыйУчет.ПериодРаботыПоПериодуПараметровОткрытияФормыСписка(Параметры);
	ДатаНачала = НачалоДня(?(ЗначениеЗаполнено(ПериодРаботы.ДатаНачала), ПериодРаботы.ДатаНачала, '00010101'));
	ДатаОкончания = КонецДня(?(ЗначениеЗаполнено(ПериодРаботы.ДатаОкончания), ПериодРаботы.ДатаОкончания, ОбщегоНазначения.ТекущаяДатаПользователя()));
	
	Если Параметры.Отбор.Свойство("ОграничитьДоступКСотрудникамДляРасчетаЭффективности")
		И Параметры.Отбор.ОграничитьДоступКСотрудникамДляРасчетаЭффективности
		И Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		ТекстОграниченияДоступа = ТекстОграниченияДоступаКСотрудникамДляРасчетаЭффективности();
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УсловиеОграниченияДоступаКСотрудникам", ТекстОграниченияДоступа);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УсловиеОграниченияДоступаКСотрудникам", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	ТекстыУсловий.Добавить("Сотрудники.Начало <= &ДатаОкончания");
	ТекстыУсловий.Добавить("Сотрудники.Окончание >= &ДатаНачала");
	ТекстыУсловий.Добавить("Сотрудники.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.УБ_ВидыКадровыхСобытий.Увольнение)");
	
	ТекстыЗапроса = Новый Массив;
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("СтрокаПоискаПоКоду", "%" + СтрокаПоиска + "%");
		
		ТекстыУсловийПоНаименованию = ОбщегоНазначения.СкопироватьРекурсивно(ТекстыУсловий);
		ТекстыУсловийПоНаименованию.Добавить("(Сотрудники.Наименование ПОДОБНО &СтрокаПоиска)");
		ТекстЗапроса = СтрЗаменить(Запрос.Текст, "&УсловияОтбораПоНаименованию", СтрСоединить(ТекстыУсловийПоНаименованию, Символы.ПС + "И "));
		
		ТекстыУсловийПоКоду = ОбщегоНазначения.СкопироватьРекурсивно(ТекстыУсловий);
		ТекстыУсловийПоКоду.Добавить("(Сотрудники.Код ПОДОБНО &СтрокаПоискаПоКоду)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтбораПоКоду", СтрСоединить(ТекстыУсловийПоКоду, Символы.ПС + "И "));
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	Иначе
		
		Если ТекстыУсловий.Количество() = 0 Тогда
			ТекстыЗапроса.Добавить(СтрЗаменить(Запрос.Текст, "&УсловияОтбораПоНаименованию", "(ИСТИНА)"));
		Иначе
			ТекстыЗапроса.Добавить(СтрЗаменить(Запрос.Текст, "&УсловияОтбораПоНаименованию", СтрСоединить(ТекстыУсловий, Символы.ПС + "И ")));
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(
		"УПОРЯДОЧИТЬ ПО
		|	Сотрудники.Наименование");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС);
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеДанныеСотрудников = Новый Соответствие;
	ЗапросСвойств = Новый Запрос;
	ЗапросСвойств.УстановитьПараметр("СотрудникиДляДопДанных", ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник"));
	
	ЗапросСвойств.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ПРЕДСТАВЛЕНИЕ(Сотрудники.Ссылка) КАК СотрудникПредставление,
		|	Сотрудники.УточнениеНаименования КАК УточнениеНаименования
		|ИЗ
		|	Справочник.УБ_Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В (&СотрудникиДляДопДанных)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = ЗапросСвойств.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл		
		ДанныеСотрудника = Новый Структура(
			"СотрудникПредставление,
			|УточнениеНаименования");
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, Выборка);
		ДополнительныеДанныеСотрудников.Вставить(Выборка.Сотрудник, ДанныеСотрудника);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСотрудников Цикл
		
		ДанныеСотрудника = ДополнительныеДанныеСотрудников.Получить(СтрокаТаблицы.Сотрудник);
		Если Не ПустаяСтрока(СтрокаПоиска)
			И Не СтрНачинаетсяС(ВРег(ДанныеСотрудника.СотрудникПредставление), ВРег(СтрокаПоиска)) Тогда
			
			ПредставлениеСотрудника = "(" + СтрокаТаблицы.Код + ") "
				+ ДанныеСотрудника.СотрудникПредставление
				+ ?(ЗначениеЗаполнено(ДанныеСотрудника.УточнениеНаименования), " " + ДанныеСотрудника.УточнениеНаименования, "");
			
			ПозицияСтрокиПоиска = СтрНайти(ВРег(ПредставлениеСотрудника), ВРег(СтрокаПоиска));
			Представление = Новый ФорматированнаяСтрока(
				Лев(ПредставлениеСотрудника, ПозицияСтрокиПоиска - 1),
				Новый ФорматированнаяСтрока(
					Сред(ПредставлениеСотрудника, ПозицияСтрокиПоиска, ДлинаСтрокиПоиска),
					Новый Шрифт( , , Истина),
					WebЦвета.Зеленый),
				Сред(ПредставлениеСотрудника, ПозицияСтрокиПоиска + ДлинаСтрокиПоиска));
		Иначе
			
			ПредставлениеСотрудника = ДанныеСотрудника.СотрудникПредставление
				+ ?(ЗначениеЗаполнено(ДанныеСотрудника.УточнениеНаименования), " " + ДанныеСотрудника.УточнениеНаименования, "")
				+ " (" + СтрокаТаблицы.Код + ")";
			
			Представление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					Лев(ПредставлениеСотрудника, ДлинаСтрокиПоиска),
					Новый Шрифт( , , Истина),
					WebЦвета.Зеленый),
				Сред(ПредставлениеСотрудника, ДлинаСтрокиПоиска + 1));
			
		КонецЕсли;
		
		ДанныеВыбора.Добавить(СтрокаТаблицы.Сотрудник, Представление, СтрокаТаблицы.ПометкаУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтандартныйОтбор() Экспорт
	
	Возврат Новый Структура("ВАрхиве", Ложь);
	
КонецФункции

Функция ТекстОграниченияДоступаКСотрудникамДляРасчетаЭффективности()
	
	ТекстОграничениеДоступа = 
		"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УБ_ДоступностьРасчетаЭффективностиСотрудниковДляПользователей КАК ДоступностьРасчетаЭффективностиДляПользователей
		|		ПО (ДоступностьРасчетаЭффективностиДляПользователей.Пользователь = &ТекущийПользователь)
		|		И (ДоступностьРасчетаЭффективностиДляПользователей.Организация = Сотрудники.Организация)
		|		И (ДоступностьРасчетаЭффективностиДляПользователей.Подразделение = Сотрудники.Подразделение)
		|		И (ДоступностьРасчетаЭффективностиДляПользователей.ИдентификаторЗаписи В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ДоступностьРасчетаЭффективности.ИдентификаторЗаписи
		|			ИЗ
		|				РегистрСведений.УБ_ДоступностьРасчетаЭффективностиСотрудниковДляПользователей КАК ДоступностьРасчетаЭффективности
		|			ГДЕ
		|				ДоступностьРасчетаЭффективности.Пользователь = &ТекущийПользователь
		|				И ДоступностьРасчетаЭффективности.Подразделение = Сотрудники.Подразделение
		|				И ВЫБОР
		|					КОГДА ДоступностьРасчетаЭффективности.Сотрудник = ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоступностьРасчетаЭффективности.Сотрудник = Сотрудники.Сотрудник
		|				КОНЕЦ
		|				И ДоступностьРасчетаЭффективности.ДатаНачала <= &ДатаОкончания
		|				И ВЫБОР
		|					КОГДА ДоступностьРасчетаЭффективности.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|					ИНАЧЕ ДоступностьРасчетаЭффективности.ДатаОкончания
		|				КОНЕЦ >= &ДатаНачала
		|			УПОРЯДОЧИТЬ ПО
		|				ДоступностьРасчетаЭффективности.Сотрудник))";
	
	Возврат ТекстОграничениеДоступа;
	
КонецФункции

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Если ЗначениеЗаполнено(Данные.УточнениеНаименования) Тогда
	//	Представление = Данные.Наименование + Данные.УточнениеНаименования; 	
	//Иначе
		Представление = Данные.Наименование
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Наименование");
	Поля.Добавить("УточнениеНаименования");
	Поля.Добавить("ФизическоеЛицо");
	Поля.Добавить("Ссылка");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли