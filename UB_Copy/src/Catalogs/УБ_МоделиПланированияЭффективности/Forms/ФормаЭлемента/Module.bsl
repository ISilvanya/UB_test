#Область ОписаниеПеременных

&НаКлиенте
Перем СтраницаТекущегоГрейда;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.ШтатноеРасписание) Тогда
		Если Не(Параметры.ШтатноеРасписаниеПередаваемое.Пустая()) Тогда
			ВременныйОбъект = РеквизитФормыВЗначение("Объект");
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("Владелец",Параметры.ШтатноеРасписаниеПередаваемое);
			ВременныйОбъект.Заполнить(ДанныеЗаполнения);
			
			ЗначениеВРеквизитФормы(ВременныйОбъект, "Объект");
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Модель планирования должна создаваться на основании штатного расписания!",,,,
				Отказ);
		
			Возврат;
		КонецЕсли;
		
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтраницаТекущегоГрейда = Элементы.СтраницыГрейдов.ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Грейды"
		И Параметр.МодельПланированияЭффективности = Объект.Ссылка Тогда
		
		ПриЗаписиГрейда(Параметр.Грейд);
		
	ИначеЕсли ИмяСобытия = "Запись_УтверждениеГрейда"
		И Параметр.ВладелецФормы = ЭтотОбъект Тогда
		
		ПриЗаписиУтвержденияГрейда(Параметр.Грейд, Параметр.ВерсияГрейда);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	ПрочитатьСмартЗадачиМодели();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСтраницыГрейдов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//// заполнение реквизита "Владелец" у моделей планирования, которые были созданы до подчинения справочнику "Штатное расписание"
	//Если Не ЗначениеЗаполнено(Объект.ШтатноеРасписание) Тогда
	//	Объект.ШтатноеРасписание = Объект.ШтатноеРасписание;
	//КонецЕсли;
	
	// ШОО перенесено в модуль документа для предовращения ошибок при серверном заполнении
	//ПроверкаНаДублированиеМоделейСДаннымШтатнымРасписанием(Отказ);
	
КонецПроцедуры

// устарела, перенесена в модуль документа
//&НаСервере
//Процедура ПроверкаНаДублированиеМоделейСДаннымШтатнымРасписанием(Отказ)

//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	УБ_МоделиПланированияЭффективности.Ссылка КАК Ссылка
//		|ИЗ
//		|	Справочник.УБ_МоделиПланированияЭффективности КАК УБ_МоделиПланированияЭффективности
//		|ГДЕ
//		|	УБ_МоделиПланированияЭффективности.ШтатноеРасписание = &ШтатноеРасписание
//		|	И УБ_МоделиПланированияЭффективности.Ссылка <> &МодельПланированияЭффективности";
//	
//	Запрос.УстановитьПараметр("ШтатноеРасписание", Объект.ШтатноеРасписание);
//	Запрос.УстановитьПараметр("МодельПланированияЭффективности", Объект.Ссылка);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если Не РезультатЗапроса.Пустой() Тогда
//		ОбщегоНазначения.СообщитьПользователю("Данное штатное расписание используется в другой модели планирования",,,,
//				Отказ);
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ШтатноеРасписание", Объект.ШтатноеРасписание);
	ПараметрыОповещения.Вставить("МодельПланированияЭффективности", Объект.Ссылка);
	Оповестить("Запись_Модели", ПараметрыОповещения);
	//ПроверитьЗаполнениеМоделиВШтатномРасписании(ПараметрыОповещения);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьСмартЗадачиМодели();
	
	// !!! ШОО проверка
	//Условие = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ШтатноеРасписание, "МодельПланирования") = Объект.Ссылка;
	//Если Условие Тогда
	//	ОбъектШтатноеРасписание = Объект.ШтатноеРасписание.ПолучитьОбъект();
	//	ОбъектШтатноеРасписание.МодельПланирования = Объект.Ссылка;
	//	ОбъектШтатноеРасписание.Записать();
	//КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НомерСтроки = 0;
	Для Каждого СтрокаСмартЗадачи Из СмартЗадачиМодели Цикл
		НомерСтроки = НомерСтроки + 1;
		Если Не ЗначениеЗаполнено(СтрокаСмартЗадачи.СмартЗадача) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""SMART-задача"" в строке %1 списка ""SMART""'"),
				НомерСтроки);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СмартЗадачиМодели", НомерСтроки, "СмартЗадача"),
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьНовыйГрейд(Команда)
	
	Если Объект.Ссылка.Пустая() Или ЭтотОбъект.Модифицированность Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;
	
	ОткрытьФормуСозданияНовогоГрейда();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыГрейдовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаДобавитьНовыйГрейд Тогда
		ОткрытьФормуСозданияНовогоГрейда();
	Иначе
		СтраницаТекущегоГрейда = ТекущаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтатноеРасписаниеПриИзменении(Элемент)
	
	ШтатноеРасписаниеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ШтатноеРасписаниеПриИзмененииНаСервере()
	// КДА++	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Должность.Представление КАК Должность
		|ИЗ
		|	Справочник.УБ_ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Ссылка = &ШтатноеРасписание";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("ШтатноеРасписание", Объект.ШтатноеРасписание);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Объект.Наименование = Выборка.Должность;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьВакантныеПозицииПриИзменении(Элемент)
	Элементы.ДоляУчастияВРаспределении.Видимость = Объект.УчитыватьВакантныеПозиции;
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовСтраницыГрейды

&НаКлиенте
Процедура Подключаемый_ВерсияГрейдаПриИзменении(Элемент)
	
	ИдентификаторГрейда = ИдентификаторГрейдаПоИмениЭлемента(Элемент.Имя);
	
	Грейд = ЭтотОбъект["Грейд_" + ИдентификаторГрейда];
	ВерсияГрейда = ЭтотОбъект["ВерсияГрейда_" + ИдентификаторГрейда];
	
	УстановитьДокументУтверждениеГрейдаТекущейВерсии(Грейд, ВерсияГрейда, ИдентификаторГрейда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УтверждениеГрейдаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторГрейда = ИдентификаторГрейдаПоИмениЭлемента(Элемент.Имя);
	
	ПараметрыФормы = Новый Структура;
	
	ДокументУтверждениеГрейда = ЭтотОбъект["УтверждениеГрейда_" + ИдентификаторГрейда];
	Если ЗначениеЗаполнено(ДокументУтверждениеГрейда) Тогда
		ПараметрыФормы.Вставить("Ключ", ДокументУтверждениеГрейда);
	Иначе
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("МодельПланированияЭффективности", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("Грейд", ЭтотОбъект["Грейд_" + ИдентификаторГрейда]);
		
		ВерсияГрейда = ЭтотОбъект["ВерсияГрейда_" + ИдентификаторГрейда];
		Если ЗначениеЗаполнено(ВерсияГрейда) Тогда
			ЗначенияЗаполнения.Вставить("ВерсияГрейда", ВерсияГрейда);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//&НаСервере
//Процедура ПроверитьЗаполнениеМоделиВШтатномРасписании(Параметры)
//	
//	Если Не ЗначениеЗаполнено(Параметры.ШтатноеРасписание.МодельПланирования) Тогда
//		ШтатноеРасписание = Параметры.ШтатноеРасписание.ПолучитьОбъект();
//		ШтатноеРасписание.МодельПланирования = Параметры.МодельПланированияЭффективности;	
//		ШтатноеРасписание.Записать(); 
//	КонецЕсли;

//КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияНовогоГрейда()
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуСозданияНовогоГрейдаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.УБ_Грейды.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияНовогоГрейдаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Если Элементы.СтраницаДобавитьНовыйГрейд.Видимость Тогда
			Элементы.СтраницыГрейдов.ТекущаяСтраница = СтраницаТекущегоГрейда;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗаписиГрейда(Грейд)
	
	ПриЗаписиГрейдаНаСервере(Грейд);
	СтраницаТекущегоГрейда = Элементы.СтраницыГрейдов.ТекущаяСтраница;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиГрейдаНаСервере(Грейд)
	
	ЗаполнитьСтраницыГрейдов();
	ИдентификаторГрейда = ИдентификаторГрейда(Грейд);
	
	СтраницаГрейда = Элементы.Найти("СтраницаГрейда_" + ИдентификаторГрейда);
	Если СтраницаГрейда <> Неопределено Тогда
		Элементы.СтраницыГрейдов.ТекущаяСтраница = СтраницаГрейда;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗаписиУтвержденияГрейда(Грейд, ВерсияГрейда)
	
	ЗаполнитьСтраницыГрейдов();
	
	ИдентификаторГрейда = ИдентификаторГрейда(Грейд);
	
	СтраницаГрейда = Элементы.Найти("СтраницаГрейда_" + ИдентификаторГрейда);
	Если СтраницаГрейда <> Неопределено Тогда
		Элементы.СтраницыГрейдов.ТекущаяСтраница = СтраницаГрейда;
		СтраницаТекущегоГрейда = СтраницаГрейда;
	КонецЕсли;
	
	УстановитьДокументУтверждениеГрейдаТекущейВерсии(Грейд, ВерсияГрейда, ИдентификаторГрейда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДокументУтверждениеГрейдаТекущейВерсии(Грейд, ВерсияГрейда, ИдентификаторГрейда)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Грейд", Грейд);
	ПараметрыОтбора.Вставить("ВерсияГрейда", ВерсияГрейда);
	
	НайденныеСтроки = ДокументыУтвержденияГрейдов.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() Тогда
		ЭтотОбъект["УтверждениеГрейда_" + ИдентификаторГрейда] = НайденныеСтроки[0].УтверждениеГрейда;
		ЭтотОбъект["Статус_" + ИдентификаторГрейда] = НайденныеСтроки[0].Статус;
	Иначе
		ЭтотОбъект["УтверждениеГрейда_" + ИдентификаторГрейда] = Неопределено;
		ЭтотОбъект["Статус_" + ИдентификаторГрейда] = Неопределено;
	КонецЕсли;
	
	ЭтотОбъект["УтверждениеГрейдаПредставление_" + ИдентификаторГрейда] = ПредставлениеУтвержденияГрейда(
		ЭтотОбъект["УтверждениеГрейда_" + ИдентификаторГрейда]);
	
КонецПроцедуры

#Область ЗаполнениеЗакладокГрейдов

&НаСервере
Процедура ЗаполнитьСтраницыГрейдов()
	
	Если Объект.Ссылка.Пустая() Тогда
		НастроитьОтображениеСтраницФормы(Ложь);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуГрейдов();
	ДобавитьРеквизитыГрейдов();
	ЗаполнитьЗначенияДобавленныхРеквизитов();
	ДобавитьЭлементыФормыГрейдов();
	УдалитьНеиспользуемыеРеквизитыИЭлементыГрейдов();
	
	Если Грейды_ОписаниеДобавленныхРеквизитовЭлементов.Количество() Тогда
		НастроитьОтображениеСтраницФормы(Истина);
	Иначе
		НастроитьОтображениеСтраницФормы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуГрейдов()
	
	Для Каждого СтрокаГрейда Из Грейды_ОписаниеДобавленныхРеквизитовЭлементов Цикл
		СтрокаГрейда.УдалитьСтроку = Истина;
		СтрокаГрейда.ДобавитьРеквизиты = Ложь;
		СтрокаГрейда.ДобавитьЭлементыФормы = Ложь;
	КонецЦикла;
	
	ДокументыУтвержденияГрейдов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Грейды.Ссылка КАК Грейд,
		|	Грейды.Представление КАК ГрейдПредставление,
		|	Грейды.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочиванияГрейда,
		|	ВерсииГрейдов.Ссылка КАК ВерсияГрейда,
		|	ВерсииГрейдов.Представление КАК ВерсияГрейдаПредставление,
		|	ВерсииГрейдов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочиванияВерсииГрейда,
		|	РегистрВерсииГрейдов.Регистратор КАК УтверждениеГрейда,
		|	РегистрВерсииГрейдов.Статус КАК Статус,
		|	РегистрВерсииГрейдов.ПериодРасчетаМоделиПланирования КАК ПериодРасчетаМоделиПланирования
		|ИЗ
		|	Справочник.УБ_Грейды КАК Грейды
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ВерсииГрейдов КАК ВерсииГрейдов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБ_ВерсииГрейдов КАК РегистрВерсииГрейдов
		|			ПО (РегистрВерсииГрейдов.МодельПланированияЭффективности = &МодельПланированияЭффективности)
		|				И (РегистрВерсииГрейдов.Грейд = ВерсииГрейдов.Владелец)
		|				И (РегистрВерсииГрейдов.ВерсияГрейда = ВерсииГрейдов.Ссылка)
		|				И (РегистрВерсииГрейдов.Статус <> ЗНАЧЕНИЕ(Перечисление.УБ_СтатусыМоделейПланирования.Закрыто))
		|		ПО (ВерсииГрейдов.Владелец = Грейды.Ссылка)
		|			И (НЕ ВерсииГрейдов.ПометкаУдаления)
		|ГДЕ
		|	Грейды.Владелец = &МодельПланированияЭффективности
		|	И НЕ Грейды.ПометкаУдаления
		|	И НЕ Грейды.ВАрхиве
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочиванияГрейда,
		|	РеквизитДопУпорядочиванияВерсииГрейда
		|ИТОГИ ПО
		|	Грейд";
	
	Запрос.УстановитьПараметр("МодельПланированияЭффективности", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаГрейд = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГрейд.Следующий() Цикл
		
		ИдентификаторГрейда = ИдентификаторГрейда(ВыборкаГрейд.Грейд);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Грейд", ВыборкаГрейд.Грейд);
		
		НайденныеСтроки = Грейды_ОписаниеДобавленныхРеквизитовЭлементов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() Тогда
			СтрокаГрейда = НайденныеСтроки[0];
			СтрокаГрейда.УдалитьСтроку = Ложь;
			ЗаполнитьЗначенияСвойств(СтрокаГрейда, ВыборкаГрейд, "ГрейдПредставление");
		Иначе
			СтрокаГрейда = Грейды_ОписаниеДобавленныхРеквизитовЭлементов.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаГрейда, ВыборкаГрейд);
			
			СтрокаГрейда.ИдентификаторГрейда = ИдентификаторГрейда;
			СтрокаГрейда.ДобавитьРеквизиты = Истина;
			СтрокаГрейда.ДобавитьЭлементыФормы = Истина;
		КонецЕсли;
		
		СтрокаГрейда.СписокВыбораВерсийГрейда.Очистить();
		
		ВыборкаДетальныеЗаписи = ВыборкаГрейд.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВерсияГрейда)
				Или Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.УтверждениеГрейда) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаГрейда.СписокВыбораВерсийГрейда.Добавить(ВыборкаДетальныеЗаписи.ВерсияГрейда,
				ВыборкаДетальныеЗаписи.ВерсияГрейдаПредставление);
			
			НоваяСтрока = ДокументыУтвержденияГрейдов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
		СтрокаГрейда.СписокВыбораВерсийГрейда.Добавить(Справочники.УБ_ВерсииГрейдов.ПустаяСсылка(),
				НСтр("ru = '<новая версия>'"));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыГрейдов()
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Каждого СтрокаГрейда Из Грейды_ОписаниеДобавленныхРеквизитовЭлементов Цикл
		
		Если Не СтрокаГрейда.ДобавитьРеквизиты Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторГрейда = СтрокаГрейда.ИдентификаторГрейда;
		
		ИменаДобавленныхРеквизитов = Новый Структура;
		ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаГрейд",
			"Грейд_" + ИдентификаторГрейда);
		ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаВерсияГрейда",
			"ВерсияГрейда_" + ИдентификаторГрейда);
		ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаУтверждениеГрейда",
			"УтверждениеГрейда_" + ИдентификаторГрейда);
		ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаУтверждениеГрейдаПредставление",
			"УтверждениеГрейдаПредставление_" + ИдентификаторГрейда);
		ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаСтатус",
			"Статус_" + ИдентификаторГрейда);
		ИменаДобавленныхРеквизитов.Вставить("КолонкаСмартЗадачиГрейдИспользуется",
			"ГрейдИспользуется_" + ИдентификаторГрейда);
		ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаПериодРасчетаМоделиПланирования", 
			"ПериодРасчетаМоделиПланирования_" + ИдентификаторГрейда);
		
		ЗаполнитьЗначенияСвойств(СтрокаГрейда, ИменаДобавленныхРеквизитов);
		
		РеквизитГрейд = Новый РеквизитФормы(
			ИменаДобавленныхРеквизитов.ИмяРеквизитаГрейд,
			Новый ОписаниеТипов("СправочникСсылка.УБ_Грейды"),
			,
			НСтр("ru = 'Грейд'"),
			Ложь);
		
		РеквизитВерсияГрейда = Новый РеквизитФормы(
			ИменаДобавленныхРеквизитов.ИмяРеквизитаВерсияГрейда,
			Новый ОписаниеТипов("СправочникСсылка.УБ_ВерсииГрейдов"),
			,
			НСтр("ru = 'Версия грейда'"),
			Ложь);
		
		РеквизитУтверждениеГрейда = Новый РеквизитФормы(
			ИменаДобавленныхРеквизитов.ИмяРеквизитаУтверждениеГрейда,
			Новый ОписаниеТипов("ДокументСсылка.УБ_УтверждениеГрейда"),
			,
			НСтр("ru = 'Утверждение грейда'"),
			Ложь);
		
		РеквизитУтверждениеГрейдаПредставление = Новый РеквизитФормы(
			ИменаДобавленныхРеквизитов.ИмяРеквизитаУтверждениеГрейдаПредставление,
			Новый ОписаниеТипов("Строка"),
			,
			НСтр("ru = 'Утверждение грейда'"),
			Ложь);
		
		РеквизитСтатус = Новый РеквизитФормы(
			ИменаДобавленныхРеквизитов.ИмяРеквизитаСтатус,
			Новый ОписаниеТипов("ПеречислениеСсылка.УБ_СтатусыМоделейПланирования"),
			,
			НСтр("ru = 'Статус'"),
			Ложь);
		
		КолонкаСмартЗадачиГрейдИспользуется = Новый РеквизитФормы(
			ИменаДобавленныхРеквизитов.КолонкаСмартЗадачиГрейдИспользуется,
			Новый ОписаниеТипов("Булево"),
			"СмартЗадачиМодели",
			СтрокаГрейда.ГрейдПредставление,
			Истина);
			
		РеквизитПериодРасчетаМоделиПланирования = Новый РеквизитФормы(
			ИменаДобавленныхРеквизитов.ИмяРеквизитаПериодРасчетаМоделиПланирования,
			Новый ОписаниеТипов("ПеречислениеСсылка.УБ_ПериодыРасчетаМоделиПланирования"),
			,
			НСтр("ru = 'Период модели планирования'"),
			Ложь);
			
		ДобавляемыеРеквизиты.Добавить(РеквизитГрейд);
		ДобавляемыеРеквизиты.Добавить(РеквизитВерсияГрейда);
		ДобавляемыеРеквизиты.Добавить(РеквизитУтверждениеГрейда);
		ДобавляемыеРеквизиты.Добавить(РеквизитУтверждениеГрейдаПредставление);
		ДобавляемыеРеквизиты.Добавить(РеквизитСтатус);
		ДобавляемыеРеквизиты.Добавить(КолонкаСмартЗадачиГрейдИспользуется); 
		ДобавляемыеРеквизиты.Добавить(РеквизитПериодРасчетаМоделиПланирования);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияДобавленныхРеквизитов()
	
	Для Каждого СтрокаГрейда Из Грейды_ОписаниеДобавленныхРеквизитовЭлементов Цикл
		
		ЭтотОбъект[СтрокаГрейда.ИмяРеквизитаГрейд] = СтрокаГрейда.Грейд;
		
		КоличествоВерсий = СтрокаГрейда.СписокВыбораВерсийГрейда.Количество();
		Если КоличествоВерсий > 1 Тогда
			ЭтотОбъект[СтрокаГрейда.ИмяРеквизитаВерсияГрейда] = СтрокаГрейда.СписокВыбораВерсийГрейда[КоличествоВерсий - 2].Значение;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Грейд", СтрокаГрейда.Грейд);
		ПараметрыОтбора.Вставить("ВерсияГрейда", ЭтотОбъект[СтрокаГрейда.ИмяРеквизитаВерсияГрейда]);
		НайденныеСтроки = ДокументыУтвержденияГрейдов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() Тогда
			ПоследнееУтверждение = НайденныеСтроки[НайденныеСтроки.Количество() - 1];
			ЭтотОбъект[СтрокаГрейда.ИмяРеквизитаУтверждениеГрейда] = ПоследнееУтверждение.УтверждениеГрейда;
			ЭтотОбъект[СтрокаГрейда.ИмяРеквизитаСтатус] = ПоследнееУтверждение.Статус;
			ЭтотОбъект[СтрокаГрейда.ИмяРеквизитаПериодРасчетаМоделиПланирования] = ПоследнееУтверждение.ПериодРасчетаМоделиПланирования;
		КонецЕсли;
		
		ЭтотОбъект[СтрокаГрейда.ИмяРеквизитаУтверждениеГрейдаПредставление] = ПредставлениеУтвержденияГрейда(
			ЭтотОбъект[СтрокаГрейда.ИмяРеквизитаУтверждениеГрейда]);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыФормыГрейдов()
	
	Для Каждого СтрокаГрейда Из Грейды_ОписаниеДобавленныхРеквизитовЭлементов Цикл
		
		ИдентификаторГрейда = СтрокаГрейда.ИдентификаторГрейда;
		
		// Страница грейда
		
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Тип", Тип("ГруппаФормы"));
		ПараметрыЭлемента.Вставить("Родитель", Элементы.СтраницыГрейдов);
		ПараметрыЭлемента.Вставить("СледующийЭлемент", Элементы.СтраницаДобавитьНовыйГрейд);
		ПараметрыЭлемента.Вставить("Заголовок", СтрокаГрейда.ГрейдПредставление);
		ПараметрыЭлемента.Вставить("Вид", ВидГруппыФормы.Страница);
		
		СтраницаГрейда = ДобавитьЭлементФормы("СтраницаГрейда_" + ИдентификаторГрейда, ПараметрыЭлемента);
		
		// Версии грейда
		
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Тип", Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("Родитель", СтраницаГрейда);
		ПараметрыЭлемента.Вставить("Заголовок", НСтр("ru = 'Версия'"));
		ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		ПараметрыЭлемента.Вставить("ПутьКДанным", СтрокаГрейда.ИмяРеквизитаВерсияГрейда);
		ПараметрыЭлемента.Вставить("КнопкаВыпадающегоСписка", Истина);
		ПараметрыЭлемента.Вставить("КнопкаВыбора", Ложь);
		ПараметрыЭлемента.Вставить("КнопкаОчистки", Ложь);
		ПараметрыЭлемента.Вставить("КнопкаОткрытия", Ложь);
		ПараметрыЭлемента.Вставить("КнопкаСоздания", Ложь);
		ПараметрыЭлемента.Вставить("РежимВыбораИзСписка", Истина);
		ПараметрыЭлемента.Вставить("РедактированиеТекста", Ложь);
		
		Действия = Новый Структура;
		Действия.Вставить("ПриИзменении", "Подключаемый_ВерсияГрейдаПриИзменении");
		
		ПараметрыЭлемента.Вставить("Действия", Действия);
		
		ВерсияГрейда = ДобавитьЭлементФормы("ВерсияГрейда_" + ИдентификаторГрейда, ПараметрыЭлемента);
		ВерсияГрейда.СписокВыбора.Очистить();
		
		Для Каждого ЭлементСпискаВыбора Из СтрокаГрейда.СписокВыбораВерсийГрейда Цикл
			НовыйЭлементСписка = ВерсияГрейда.СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлементСписка, ЭлементСпискаВыбора);
		КонецЦикла;
		
		// Утверждение грейда
		
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Тип", Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("Родитель", СтраницаГрейда);
		ПараметрыЭлемента.Вставить("Заголовок", НСтр("ru = 'Утверждение категории'"));
		ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеНадписи);
		ПараметрыЭлемента.Вставить("ПутьКДанным", СтрокаГрейда.ИмяРеквизитаУтверждениеГрейдаПредставление);
		ПараметрыЭлемента.Вставить("Гиперссылка", Истина);
		
		Действия = Новый Структура;
		Действия.Вставить("Нажатие", "Подключаемый_УтверждениеГрейдаНажатие");
		
		ПараметрыЭлемента.Вставить("Действия", Действия);
		
		ДобавитьЭлементФормы("УтверждениеГрейдаПредставление_" + ИдентификаторГрейда, ПараметрыЭлемента);
		
		// Статус утверждения грейда
		
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Тип", Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("Родитель", СтраницаГрейда);
		ПараметрыЭлемента.Вставить("Заголовок", НСтр("ru = 'Статус категории'"));
		ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеНадписи);
		ПараметрыЭлемента.Вставить("ПутьКДанным", СтрокаГрейда.ИмяРеквизитаСтатус);
		
		ДобавитьЭлементФормы("Статус_" + ИдентификаторГрейда, ПараметрыЭлемента);
		
		// Период расчета модели планирования
		
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Тип", Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("Родитель", СтраницаГрейда);
		ПараметрыЭлемента.Вставить("Заголовок", НСтр("ru = 'Период расчета модели материальной мотивации'"));
		ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеНадписи);
		ПараметрыЭлемента.Вставить("ПутьКДанным", СтрокаГрейда.ИмяРеквизитаПериодРасчетаМоделиПланирования);
		
		ДобавитьЭлементФормы("ПериодРасчетаМоделиПланирования_" + ИдентификаторГрейда, ПараметрыЭлемента);

		// Колонка грейда в таблице смарт-задач
		
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Тип", Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("Родитель", Элементы.СмартЗадачиМодели);
		ПараметрыЭлемента.Вставить("Заголовок", СтрокаГрейда.ГрейдПредставление);
		ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеФлажка);
		ПараметрыЭлемента.Вставить("ПутьКДанным", "СмартЗадачиМодели." + СтрокаГрейда.КолонкаСмартЗадачиГрейдИспользуется);
		
		ДобавитьЭлементФормы("СмартЗадачиМоделиГрейдИспользуется_" + ИдентификаторГрейда, ПараметрыЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементФормы(ИмяЭлемента, ПараметрыЭлемента)
	
	ЭлементФормы = Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы = Неопределено Тогда
		Если ПараметрыЭлемента.Свойство("СледующийЭлемент") Тогда
			ЭлементФормы = Элементы.Вставить(ИмяЭлемента,
				ПараметрыЭлемента.Тип,
				ПараметрыЭлемента.Родитель,
				ПараметрыЭлемента.СледующийЭлемент);
		Иначе
			ЭлементФормы = Элементы.Добавить(ИмяЭлемента,
				ПараметрыЭлемента.Тип,
				ПараметрыЭлемента.Родитель);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПараметрЭлемента Из ПараметрыЭлемента Цикл
		Если ПараметрЭлемента.Ключ = "Тип"
			Или ПараметрЭлемента.Ключ = "Родитель"
			Или ПараметрЭлемента.Ключ = "СледующийЭлемент"
			Или ПараметрЭлемента.Ключ = "Действия" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			ИмяЭлемента,
			ПараметрЭлемента.Ключ,
			ПараметрЭлемента.Значение);
		
	КонецЦикла;
	
	Если ПараметрыЭлемента.Свойство("Действия") Тогда
		Для Каждого Действие Из ПараметрыЭлемента.Действия Цикл
			ЭлементФормы.УстановитьДействие(Действие.Ключ, Действие.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

&НаСервере
Процедура УдалитьНеиспользуемыеРеквизитыИЭлементыГрейдов()
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаГрейда Из Грейды_ОписаниеДобавленныхРеквизитовЭлементов Цикл
		
		Если Не СтрокаГрейда.УдалитьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		УдалитьЭлементыСтраницыГрейда(СтрокаГрейда.ИдентификаторГрейда);
		
		ПараметрыОтбора = Новый Структура("Грейд", СтрокаГрейда.Грейд);
		НайденныеСтроки = ДокументыУтвержденияГрейдов.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ДокументыУтвержденияГрейдов.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		УдаляемыеРеквизиты.Добавить(СтрокаГрейда.ИмяРеквизитаГрейд);
		УдаляемыеРеквизиты.Добавить(СтрокаГрейда.ИмяРеквизитаВерсияГрейда);
		УдаляемыеРеквизиты.Добавить(СтрокаГрейда.ИмяРеквизитаУтверждениеГрейда);
		УдаляемыеРеквизиты.Добавить(СтрокаГрейда.ИмяРеквизитаУтверждениеГрейдаПредставление);
		УдаляемыеРеквизиты.Добавить(СтрокаГрейда.ИмяРеквизитаСтатус);
		УдаляемыеРеквизиты.Добавить(СтрокаГрейда.КолонкаСмартЗадачиГрейдИспользуется);
		УдаляемыеРеквизиты.Добавить(СтрокаГрейда.ИмяРеквизитаПериодРасчетаМоделиПланирования);
		
		УдаляемыеСтроки.Добавить(СтрокаГрейда);
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Грейды_ОписаниеДобавленныхРеквизитовЭлементов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыСтраницыГрейда(ИдентификаторГрейда)
	
	УдалитьЭлементФормы("ВерсияГрейда_" + ИдентификаторГрейда);
	УдалитьЭлементФормы("УтверждениеГрейдаПредставление_" + ИдентификаторГрейда);
	УдалитьЭлементФормы("Статус_" + ИдентификаторГрейда);
	УдалитьЭлементФормы("СтраницаГрейда_" + ИдентификаторГрейда);
	УдалитьЭлементФормы("СмартЗадачиМоделиГрейдИспользуется_" + ИдентификаторГрейда);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементФормы(ИмяЭлемента)
	
	ЭлементФормы = Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		Элементы.Удалить(ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУтвержденияГрейда(Знач ДокументУтверждениеГрейда)
	
	Если ЗначениеЗаполнено(ДокументУтверждениеГрейда) Тогда
		ПредставлениеДокумента = Строка(ДокументУтверждениеГрейда);
	Иначе
		ПредставлениеДокумента = НСтр("ru = '<утвердить новую версию>'");
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторГрейда(Грейд)
	
	Возврат СтрЗаменить(ВРег(Строка(Грейд.УникальныйИдентификатор())), "-", "x");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторГрейдаПоИмениЭлемента(ИмяЭлемента)
	
	ПозицияРазделителя = СтрНайти(ИмяЭлемента, "_");
	ИдентификаторГрейда = Сред(ИмяЭлемента, ПозицияРазделителя + 1);
	
	Возврат ИдентификаторГрейда;
	
КонецФункции

&НаСервере
Процедура НастроитьОтображениеСтраницФормы(ЕстьГрейды)
	
	Если ЕстьГрейды Тогда
		ВариантОтображенияСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		ВариантОтображенияСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Элементы.СтраницыГрейдов.ОтображениеСтраниц = ВариантОтображенияСтраниц;
	Элементы.СтраницаДобавитьНовыйГрейд.Видимость = ЕстьГрейды;
	Элементы.СтраницаНетГрейдов.Видимость = Не ЕстьГрейды;
	Элементы.СмартЗадачиМодели.Видимость = ЕстьГрейды;
	Элементы.ДекорацияНетГрейдовМодели.Видимость = Не ЕстьГрейды;
	
КонецПроцедуры

#КонецОбласти

#Область СмартЗадачиМоделиПланирования

&НаСервере
Процедура ПрочитатьСмартЗадачиМодели()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СмартЗадачиМоделейПланированияЭффективности.СмартЗадача КАК СмартЗадача,
		|	СмартЗадачиМоделейПланированияЭффективности.Грейд КАК Грейд,
		|	СмартЗадачиМоделейПланированияЭффективности.Используется КАК Используется
		|ИЗ
		|	РегистрСведений.УБ_СмартЗадачиМоделейПланированияЭффективности КАК СмартЗадачиМоделейПланированияЭффективности
		|ГДЕ
		|	СмартЗадачиМоделейПланированияЭффективности.МодельПланированияЭффективности = &МодельПланированияЭффективности
		|ИТОГИ ПО
		|	СмартЗадача";
	
	Запрос.УстановитьПараметр("МодельПланированияЭффективности", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСмартЗадача = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСмартЗадача.Следующий() Цикл
		
		СтрокаСмартЗадачи = СмартЗадачиМодели.Добавить();
		СтрокаСмартЗадачи.СмартЗадача = ВыборкаСмартЗадача.СмартЗадача;
		
		ВыборкаДетальныеЗаписи = ВыборкаСмартЗадача.Выбрать();		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ПараметрыОтбора = Новый Структура("Грейд", ВыборкаДетальныеЗаписи.Грейд);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСмартЗадачиМодели()
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти