////////////////////////////////////////////////////////////////////////////////
#Область ОписаниеПеременных

&НаКлиенте
перем КэшСостоянияДерева;

&НаСервере
перем СхемаКомпоновкиДанных;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	СписокТипов = Список.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип;
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = СписокТипов;
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаКоманднаяПанель;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если Не ЗначениеЗаполнено(ВывестиЦелиСтатусом) Тогда	
		ВывестиЦелиСтатусом = "Все";
	КонецЕсли; 

	// когда форма открывается в режиме выбора, Структура предприятия всегда передана
	ПодготовитьФормуНаСервере();     

КонецПроцедуры      

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ПодготовитьФормуНаСервере
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//  
&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПринадлежностьЦели", ПредопределенныйОтбор,
																				ВидСравненияКомпоновкиДанных.ВИерархии, "ПринадлежностьЦели", ЗначениеЗаполнено(ПредопределенныйОтбор));	

	Элементы.СтатусЦели.СписокВыбора.Добавить("Все", "Все");
	Элементы.СтатусЦели.СписокВыбора.Добавить(Перечисления.УБ_СостоянияПоказателейЭффективности.Действует, "Действует");
	Элементы.СтатусЦели.СписокВыбора.Добавить(Перечисления.УБ_СостоянияПоказателейЭффективности.Планируется, "Планируется");
	Элементы.СтатусЦели.СписокВыбора.Добавить(Перечисления.УБ_СостоянияПоказателейЭффективности.Архивный, "Архивный");

	// !!! до выяснения ШОО
	//Если Параметры.РежимВыбора Тогда 
	//	Элементы.Список.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	//	Элементы.СписокПоПринадлежности.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	//КонецЕсли;                      
	
КонецПроцедуры //ПодготовитьФормуНаСервере

&НаСервере
Процедура ЗаполнитьСпискиЦелей()
	
	Если РежимСпискаЦелейПоГруппам Тогда
		//
	Иначе
		ЗаполнитьЭлементПоПринадлежности("СписокПоПринадлежности");
	КонецЕсли;

КонецПроцедуры     
 
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
																					
	ЗаполнитьЭлементПоПринадлежности("СписокПоПринадлежности");
	
	УстановитьУсловноеОформление();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)   
	//TODO ООО 11.09.2023  ПодключитьОбработчикОжидания("ОтборПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзмененЭлементСправочникаЦели" Тогда
		ЗаполнитьСпискиЦелей();
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
          
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереключитьРежимСпискаЦелей(Команда)
	
	РежимСпискаЦелейПоГруппам = Не РежимСпискаЦелейПоГруппам;
	УправлениеВидимостью();
	ЗаполнитьСпискиЦелей();
	
КонецПроцедуры       

&НаКлиенте
Процедура Создать(Команда)
    ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Родитель",	Неопределено);      
	Если Не Элементы.СписокПоПринадлежности.ТекущиеДанные = Неопределено Тогда
		ПараметрыФормы.Вставить("ПринадлежностьЦели", 
								?(ЭтоНазначениеЦели(Элементы.СписокПоПринадлежности.ТекущиеДанные.Значение),
								Элементы.СписокПоПринадлежности.ТекущиеДанные.Значение, 
								СписокПоПринадлежности.НайтиПоИдентификатору(Элементы.СписокПоПринадлежности.ТекущаяСтрока).ПолучитьРодителя().Значение));		
	ИначеЕсли Не Элементы.Список.ТекущиеДанные = Неопределено  Тогда	
								
		ПараметрыФормы.Вставить("Родитель", 
								?(Элементы.Список.ТекущиеДанные.ЭтоГруппа, 
								Элементы.Список.ТекущиеДанные.Значение, 
								Элементы.Список.ТекущиеДанные.Родитель));
	КонецЕсли;							
							
	ОткрытьФорму("Справочник.УБ_Цели.Форма.ФормаЭлемента", ПараметрыФормы, Элементы.СписокПоПринадлежности);
КонецПроцедуры           

&НаКлиенте
Процедура СоздатьГруппу(Команда)   
	ПараметрыФормы = Новый Структура("ЭтоГруппа", Истина);
	ОткрытьФорму("Справочник.УБ_Цели.Форма.ФормаГруппы", ПараметрыФормы, ЭтотОбъект.ТекущийЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлементКопированием(Команда)  
	
	Если Не Элементы.СписокПоПринадлежности.ТекущиеДанные = Неопределено Тогда 
		ИсходныйЭлемент =  Элементы.СписокПоПринадлежности.ТекущиеДанные.Значение;
		ОткрытьФорму(УБ_ОбщегоНазначенияКлиентВызовСервера.ПолучитьИмяФормыПоСсылке(ИсходныйЭлемент),
		Новый Структура("ЗначениеКопирования", ИсходныйЭлемент), 
		Элементы.СписокПоПринадлежности);
		
	ИначеЕсли Не Элементы.Список.ТекущиеДанные = Неопределено  Тогда
		ИсходныйЭлемент =  Элементы.Список.ТекущиеДанные.Значение;	
		Если Элементы.Список.ТекущиеДанные.ЭтоГруппа Тогда
			ОткрытьФорму(УБ_ОбщегоНазначенияКлиентВызовСервера.ПолучитьИмяФормыПоСсылке(ИсходныйЭлемент, "ФормаГруппы"),
			Новый Структура("ЗначениеКопирования", ИсходныйЭлемент), 
			Элементы.Список);
		Иначе
			ОткрытьФорму(УБ_ОбщегоНазначенияКлиентВызовСервера.ПолучитьИмяФормыПоСсылке(ИсходныйЭлемент),
			Новый Структура("ЗначениеКопирования", ИсходныйЭлемент), 
			Элементы.Список);
			
		КонецЕсли;
	КонецЕсли;            
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок 
 
&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказателиВАрхивеПриИзмененииНаСервере()
	Если РежимСпискаЦелейПоГруппам Тогда
		УстановитьОтборСписка();	
	Иначе
		// обновить все дерево
		ЗаполнитьЭлементПоПринадлежности("СписокПоПринадлежности");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПоказателиВАрхивеПриИзменении(Элемент)
	ВывестиПоказателиВАрхивеПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикисобытийЭлементовТаблицыФормыСписокСписокПоПринадлежности

&НаКлиенте 
Процедура СписокПоПринадлежностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	Если Не Параметры.РежимВыбора Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Значение); 
	Иначе            
		ВыбранноеЗначение =  Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		ОповеститьОВыборе(ВыбранноеЗначение.Значение); 
	КонецЕсли;
	
КонецПроцедуры      

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СписокПоПринадлежностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры


&НаКлиенте
Процедура СписокПоПринадлежностиОбработкаЗаписиНового(НовыйОбъект, Значение, СтандартнаяОбработка) ЭКспорт
	
	ЗаполнитьСпискиЦелей();
	
КонецПроцедуры 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УправлениеВидимостью()                        
	
	Если Параметры.РежимВыбора и ЗначениеЗаполнено(ПредопределенныйОтбор) Тогда
		Элементы.ОтборИерархияПереключатель.Доступность = Ложь;
		ОтборИерархияПереключатель = 1;
	КонецЕсли;
	Элементы.ФормаПереключитьРежимСпискаЦелей.Заголовок = ?(Не РежимСпискаЦелейПоГруппам, "По группам", "По принадлежности");
	Элементы.Список.Видимость = РежимСпискаЦелейПоГруппам;
	Элементы.СписокПоПринадлежности.Видимость = Не РежимСпискаЦелейПоГруппам;
	
КонецПроцедуры //УправлениеВидимостью

// Заполняет ДеревоЗначений, в зависимости от элемента - используемыми целями или их Принадлежностями
&НаСервере
Процедура ЗаполнитьЭлементПоПринадлежности(ИмяЭлемента)
	
	Если ИмяЭлемента = "СписокПоПринадлежности" и РежимСпискаЦелейПоГруппам Тогда 
		Возврат;
	КонецЕсли;  
	
	Если КомпоновщикНастроек = Неопределено или СхемаКомпоновкиДанных = Неопределено Тогда
		// Получение макета СКД.
		СхемаКомпоновкиДанных =  Справочники.УБ_Цели.ПолучитьМакет("ДеревоПринадлежностей");
		
		 //Инициализация компоновщиков.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;      
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);	
	КонецЕсли;

	Если Не ВывестиЦелиСтатусом = "Все" Тогда
		
		ГруппаЭлементовОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		НовыйЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Статус");
	    НовыйЭлементОтбора.ЛевоеЗначение =  ПолеОтбора;
	    НовыйЭлементОтбора.Использование = Истина;
	    НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	    НовыйЭлементОтбора.ПравоеЗначение = ВывестиЦелиСтатусом; 
		
		НовыйЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Статус");
	    НовыйЭлементОтбора.ЛевоеЗначение =  ПолеОтбора;
	    НовыйЭлементОтбора.Использование = Истина;
	    НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	    НовыйЭлементОтбора.ПравоеЗначение = Перечисления.УБ_СостоянияПоказателейЭффективности.ПустаяСсылка();
	КонецЕсли;      
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
													КомпоновщикНастроек.Настройки,,,
													Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
													
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки); 
	
	// Подготовка и заполнение дерева иерархии.
	ДеревоИерархии = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый  ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоИерархии);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);    
	
	ЗначениеВРеквизитФормы(ДеревоИерархии, ИмяЭлемента);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСписка() 

	//7.3.1.2. Ограничения и особенности
	
	//При установке отбора в динамическом списке следует помнить, 
	//что отбор не действует на группы, если для динамического списка выбран режим отображения Иерархический список или Дерево. 
	//	Под «группами» понимается элемент справочника или плана видов характеристик, у которого свойство ЭтоГруппа установлено в значение Истина.	

	Если РежимСпискаЦелейПоГруппам Тогда
		Если Не ВывестиЦелиСтатусом = "Все" Тогда 		
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СостояниеЦели", ВывестиЦелиСтатусом);
		Иначе
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "СостояниеЦели");
		КонецЕсли;  
	КонецЕсли;	

КонецПроцедуры	 
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СостояниеЦели");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_СостоянияПоказателейЭффективности.Архивный;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Список");
	ЗачеркнутыйШрифт = Новый Шрифт(,,,,, Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗачеркнутыйШрифт);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПоПринадлежности.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_СостоянияПоказателейЭффективности.Архивный;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокПоПринадлежности");
	ЗачеркнутыйШрифт = Новый Шрифт(,,,,, Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗачеркнутыйШрифт);

КонецПроцедуры

Функция ЭтоНазначениеЦели(Значение) Экспорт
	
	Возврат ТипЗнч(Значение) = Тип ("СправочникСсылка.СтруктураПредприятия") 
				или ТипЗнч(Значение) = Тип("СправочникСсылка.УБ_Компании");
		
КонецФункции

#КонецОбласти
#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры


#КонецОбласти


