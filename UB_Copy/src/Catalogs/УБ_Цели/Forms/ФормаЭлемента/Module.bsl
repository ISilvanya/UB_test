
#Область ОписаниеПеременных

&НаКлиенте
Перем ПрежнееНаименование;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЗаполнениеВлияющийПоказателей(Объект);
	
	Если ЗначениеЗаполнено(Объект.ПерспективаССП) Тогда
		ЦветИндекс = УБ_СобытияФорм.ВернутьЦветПерспективыССПДляЗаполнения(Объект.ПерспективаССП);
	КонецЕсли; 
	
	СвойстваДляЗаполнения = Новый Массив;
	Если Параметры.Свойство("ПринадлежностьЦели")  Тогда
		СвойстваДляЗаполнения.Добавить("ПринадлежностьЦели");	
	КонецЕсли; 
	Если Параметры.Свойство("Родитель")  Тогда
		СвойстваДляЗаполнения.Добавить("Родитель");	
	КонецЕсли; 
	Если Объект.Ссылка.Пустая()  Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры, СтрСоединить(СвойстваДляЗаполнения, ","));		
	КонецЕсли;
	
КонецПроцедуры              

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПрежнееНаименование = Объект.Наименование;

КонецПроцедуры
	
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    	
	ЗаполнитьПодразделениеПоПринадлежности();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Отказ = ПроверкаЗацикленностиЗависимостей(Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ИзмененЭлементСправочникаЦели", Объект.Ссылка);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПрежнееНаименование = Объект.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринадлежностьЦелиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УБ_ПланированиеПоказателейКлиент.НазначениеНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "УБ_НазначенияЦелей", СтандартнаяОбработка);

КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбораНазначения(Результат, ДополнительныеПараметры) Экспорт
	Объект.ПринадлежностьЦели = Результат;
КонецПроцедуры  

#КонецОбласти    

#Область ОбработчикиСобытийЭлементовФормы

#Область ВкладкаПерспектива
&НаКлиенте
Процедура ПерспективаССППриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПерспективаССП) Тогда
		ЦветИндекс = УБ_СобытияФорм.ВернутьЦветПерспективыССПДляЗаполнения(Объект.ПерспективаССП);
	Иначе
		Элементы.ПерспективаССП.ЦветФона = Новый Цвет();
	КонецЕсли;		

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВычислитьЗначениеКонстантыКАУП()
	Возврат Константы.УБ_ИспользоватьСправочникиКАУП.Получить();
КонецФункции

&НаСервере
Процедура ЗаполнитьПодразделениеПоПринадлежности()
	
	Если ТипЗнч(Объект.ПринадлежностьЦели) = ТипЗнч(Справочники.УБ_Подразделения.ПустаяСсылка()) Тогда
		Объект.ПодразделениеПринадлежности = Объект.ПринадлежностьЦели;
		Объект.Организация = Объект.ПодразделениеПринадлежности.Владелец; 
	ИначеЕсли ТипЗнч(Объект.ПринадлежностьЦели) = ТипЗнч(Справочники.УБ_Сотрудники.ПустаяСсылка()) Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УБ_КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
			|	УБ_КадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация
			|ИЗ
			|	РегистрСведений.УБ_КадроваяИсторияСотрудников.СрезПоследних(, Сотрудник = &Сотрудник) КАК УБ_КадроваяИсторияСотрудниковСрезПоследних";
		
		Запрос.УстановитьПараметр("Сотрудник", Объект.ПринадлежностьЦели);
		
		РезультатЗапроса = Запрос.Выполнить();                                               	
		
		Выборка = РезультатЗапроса.Выбрать();		
		Выборка.Следующий(); 
		
		Объект.Организация = Выборка.Организация;
		Объект.ПодразделениеПринадлежности = Выборка.Подразделение;
		
	ИначеЕсли ТипЗнч(Объект.ПринадлежностьЦели) = ТипЗнч(Справочники.Организации.ПустаяСсылка()) Тогда
		Объект.Организация = Объект.ПринадлежностьЦели;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеВлияющийПоказателей(Объект)
	
	Объект.ВлияющиеПоказатели.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ЗависимостиПоказателейЭффективности.ВлияющийПоказатель КАК ВлияющийПоказатель,
		|	УБ_ЗависимостиПоказателейЭффективности.ДействуетС КАК ДействуетС
		|ИЗ
		|	РегистрСведений.УБ_ЗависимостиПоказателейЭффективности КАК УБ_ЗависимостиПоказателейЭффективности
		|ГДЕ
		|	УБ_ЗависимостиПоказателейЭффективности.ПрекратилДействие = &ПрекратилДействие
		|	И УБ_ЗависимостиПоказателейЭффективности.ЗависимыйПоказатель = &ЗависимыйПоказатель";
	
	Запрос.УстановитьПараметр("ЗависимыйПоказатель", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПрекратилДействие", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		Объект.ВлияющиеПоказатели.Очистить();
		Пока Выборка.Следующий() Цикл
			СтрокаПоказателя = Объект.ВлияющиеПоказатели.Добавить();
			СтрокаПоказателя.ВлияющийПоказатель = Выборка.ВлияющийПоказатель;
			СтрокаПоказателя.ДействуетС = Выборка.ДействуетС;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаЗацикленностиЗависимостей(Объект, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ЗависимостиПоказателейЭффективности.ВлияющийПоказатель КАК ВлияющийПоказатель
		|ИЗ
		|	РегистрСведений.УБ_ЗависимостиПоказателейЭффективности КАК УБ_ЗависимостиПоказателейЭффективности
		|ГДЕ
		|	УБ_ЗависимостиПоказателейЭффективности.ЗависимыйПоказатель = &ЗависимыйПоказатель
		|	И УБ_ЗависимостиПоказателейЭффективности.ПрекратилДействие = &ПрекратилДействие";
	
	Запрос.УстановитьПараметр("ЗависимыйПоказатель", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПрекратилДействие", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Для Каждого СтрокаТЧ Из Объект.ЗависимыеПоказатели Цикл
			Если СтрокаТЧ.ЗависимыйПоказатель = Выборка.ВлияющийПоказатель Тогда
				ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Существует зацикленность показателей'"),
				,
				,
				,
				Отказ);
				Возврат Отказ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецФункции
  
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыВыбораПоСсылке(Ссылка)
    Возврат Ссылка.Метаданные().ПолноеИмя() + ".ФормаВыбора";
КонецФункции

&НаКлиенте
Процедура ПринадлежностьЦелиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если Объект.ПринадлежностьЦели = УБ_ОбщегоНазначенияКлиент.ЗначениеРеквизитаПоУмолчанию("Компания") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя изменять значение вручную.";
		Сообщение.Сообщить();		                        
		Объект.ПринадлежностьЦели = УБ_ОбщегоНазначенияКлиент.ЗначениеРеквизитаПоУмолчанию("Компания");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// тут можно проверить принадлежность
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти