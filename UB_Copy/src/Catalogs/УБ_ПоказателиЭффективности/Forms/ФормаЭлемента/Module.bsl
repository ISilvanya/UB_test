
#Область ОписаниеПеременных

&НаКлиенте
Перем ПрежнееНаименование, ПрежнийИдентификатор;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Ключ.Пустая() Тогда
		Объект.СостояниеПоказателя = Перечисления.УБ_СостоянияПоказателейЭффективности.Планируется;
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Идентификатор = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ЗаполнениеПериодовНовогоДокумента();
	КонецЕсли;		

	УБ_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект,Отказ,СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	ПодготовитьФормуНаСервере();
	
	//Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru = 'Произвольный'"));
	//
	
	Адреса = АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище();
	Если ЗначениеЗаполнено(Адреса) Тогда
		АдресНастроекКомпоновкиДанныхПлана = Адреса.НастройкиКомпоновкиДанныхПлана;
		АдресНастроекКомпоновкиДанныхФакта = Адреса.НастройкиКомпоновкиДанныхФакта;
		АдресСхемыКомпоновкиДанныхПлана = Адреса.СхемаКомпоновкиДанныхПлана;
		АдресСхемыКомпоновкиДанныхФакта = Адреса.СхемаКомпоновкиДанныхФакта;
	КонецЕсли;	
	
	//
	Если ЗначениеЗаполнено(Объект.ПерспективаССП) Тогда
		Объект.ЦветИндекс = УБ_СобытияФорм.ВернутьЦветПерспективыССПДляЗаполнения(Объект.ПерспективаССП);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
	//Элементы.ГраницыНормыЭффективностиПоказателей.Доступность ИЛИ <..>
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.НегативноеОтклонениеНормыДо = Объект.ПограничноеОтклонениеНормыОт
			= Объект.ПограничноеОтклонениеНормыДо = Объект.ПозитивноеОтклонениеНормыОт  Тогда
			
			Объект.НегативноеОтклонениеНормыДо = Константы.УБ_НегативноеОтклонениеНормыДо.Получить();
			Объект.ПограничноеОтклонениеНормыОт = Константы.УБ_ПограничноеОтклонениеНормыОт.Получить();
			Объект.ПограничноеОтклонениеНормыДо = Константы.УБ_ПограничноеОтклонениеНормыДо.Получить();
			Объект.ПозитивноеОтклонениеНормыОт = Константы.УБ_ПозитивноеОтклонениеНормыОт.Получить();
			
		КонецЕсли;
	КонецЕсли;
	
	// Скрывать периодичность использования показателя, если он матричный
	Если Объект.ТипПоказателя.Матричный Тогда 
		Элементы.ГруппаПериодыИспользованияПоказателя.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаПериодыИспользованияПоказателя.Видимость = Истина;
	КонецЕсли;               
	
	// отображение индикаторов границ норм эффективности показателя
	//ИндексКартинкиНегативногоОтклонения = "▼";
	//ИндексКартинкиПограничногоОтклонения = "-";
	//ИдексКартинкиПозитивногоОтклонения = "▲";
	
	ЗаполнениеВлияющийПоказателей(Объект);
		
	Если Не Объект.Ссылка.Пустая() Тогда
		ДатаАктуальнойВерсияНастроек = ПолучитьДатуАктуальнойВерсияНастроек();
		Если ДатаАктуальнойВерсияНастроек <> Неопределено Тогда 
			ТекущаяВерсияНастроекСбораДанных = ДатаАктуальнойВерсияНастроек;
		КонецЕсли;
	КонецЕсли;
	
	ДозаполнитьФормулы();
	
	Если Объект.ВариантРасчетаЗначенияПлана = ПредопределенноеЗначение("Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя") Тогда
		Элементы.РедактироватьСхемуКомпоновкиДанныхПлана.Видимость = Истина;
	Иначе	
		Элементы.РедактироватьСхемуКомпоновкиДанныхПлана.Видимость = Ложь;	
	КонецЕсли;
	
	Если Объект.ВариантРасчетаЗначенияФакта = ПредопределенноеЗначение("Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя") Тогда
		Элементы.РедактироватьСхемуКомпоновкиДанныхФакта.Видимость = Истина;
	Иначе	
		Элементы.РедактироватьСхемуКомпоновкиДанныхФакта.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры              

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// Заполнение списка схем компоновки данных
	ПризнакПредопределенногоМакета = Врег("Предопределенный");
	ДлинаПризнакаПредопределенногоМакета = СтрДлина(ПризнакПредопределенногоМакета);
	Для Каждого Макет Из Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).Макеты Цикл
		Если Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			Если ВРег(Прав(Макет.Имя, ДлинаПризнакаПредопределенногоМакета)) = ПризнакПредопределенногоМакета Тогда
				Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПравоДоступа("Изменение", Метаданные.Справочники.УБ_ПоказателиЭффективности) Тогда
		Элементы.ИзменитьФормулу.Видимость = Истина;
	Иначе
		Элементы.ИзменитьФормулу.Видимость = Ложь;
	КонецЕсли;  

	НаименованиеПоказателяРасчетаЗП = ПолучитьПоказательРасчетаЗарплатыТипаНаСервере(Объект.ТипПоказателя);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЗависимыхРеквизитов(Элемент, Значение)
	
	Если Элемент.Имя = "ПринадлежностьПоказателя" Тогда
		ИспользоватьСправочникиКауп = ВычислитьЗначениеКонстантыКАУП();
		Если Не ИспользоватьСправочникиКауп Тогда
			Если ТипЗнч(Значение) = Тип("СправочникСсылка.УБ_Подразделения") или  ТипЗнч(Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Элементы.УчаствуютНижестоящиеПодразделения.Видимость = Истина;		
			Иначе	
				Элементы.УчаствуютНижестоящиеПодразделения.Видимость= Ложь;		
			КонецЕсли;	                                         
		Иначе
			Если ТипЗнч(Значение) = Тип("СправочникСсылка.УБ_Подразделения") Тогда
				Элементы.УчаствуютНижестоящиеПодразделения.Видимость = Истина;		
			Иначе	
				Элементы.УчаствуютНижестоящиеПодразделения.Видимость= Ложь;		
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;  
		
	Элементы.ИзменитьФормулу.Видимость = Объект.ИспользоватьФормулу;
КонецПроцедуры
            
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПрежнееНаименование = Объект.Наименование;
	ПрежнийИдентификатор = Объект.Идентификатор;              
	УстановитьВидимостьЗависимыхРеквизитов(Элементы.ПринадлежностьПоказателя, Объект.ПринадлежностьПоказателя);
	
	Если Элементы.Найти("КИндикатор") <> неопределено Тогда
		ТипРасчетаПриИзменении(Элементы.ТипРасчета);
	Иначе
		Сообщить("Не удалось инициализировать элементы границ расчета эффективности", СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    	
	Для Позиция = 1 По СтрДлина(Объект.Идентификатор) Цикл
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола(Объект.Идентификатор, Позиция)) Тогда
			Объект.Идентификатор = СтрЗаменить(Объект.Идентификатор, Сред(Объект.Идентификатор, Позиция, 1), "?");
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнениеТЧПериодовИспользования();
	
	Если Объект.Код = "" Тогда 
		ПрежнийИдентификатор = "";
	КонецЕсли;
	
	Если НЕ ПрежнийИдентификатор = Объект.Идентификатор И ЗначениеЗаполнено(Объект.Ссылка )Тогда
		ИзменитьИдентификаторВФормулах(ПрежнийИдентификатор, Объект.Идентификатор);
	КонецЕсли;
	
	ЗаполнитьПодразделениеПоПринадлежности();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Идентификатор = СформироватьИдентификаторПоказателя(ТекущийОбъект.Идентификатор, ТекущийОбъект.Ссылка);
	
	Если ТекущийОбъект.ТипПоказателя.Матричный Тогда
		ТекущийОбъект.ВидРасценки = Перечисления.УБ_ВидыРасценокПоказателей.ПустаяСсылка();
		ТекущийОбъект.РассчитыватьРезультатОтФакта = Ложь;
	КонецЕсли;
	
	Если ТекущийОбъект.ТипПоказателя.Матричный Тогда
		ТекущийОбъект.Фиксированный = Ложь;
	КонецЕсли;
	
	Если ТекущийОбъект.ИспользоватьНастройкуИзТипаПоказателя
		Или ТекущийОбъект.ТипПоказателя.Матричный Тогда
		ТекущийОбъект.ПоказательРасчетаЗарплаты = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("ПоказательРасчетаЗарплаты");
	КонецЕсли;
	
	Если Не ТекущийОбъект.ОграничиватьМинимальноеЗначениеРезультата Тогда
		ТекущийОбъект.МинимальноеЗначениеРезультата = 0;
	КонецЕсли;
	
	Если Не ТекущийОбъект.ОграничиватьМаксимальноеЗначениеРезультата Тогда
		ТекущийОбъект.МаксимальноеЗначениеРезультата = 0;
	КонецЕсли;
	
	Если Константы.УБ_ИспользоватьПодсистемуМатериальнойМотивации.Получить() Тогда
		Если Не ЗначениеЗаполнено(Объект.ТипПоказателя) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Реквизит ""Тип показателя"" не заполнен'"),
				,
				,
				,
				Отказ);  
		КонецЕсли;
	КонецЕсли;
		
	//Если Не ПустаяСтрока(АдресСхемыКомпоновкиДанных) Тогда
	//	ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных));
	//Иначе
	//	ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	//КонецЕсли;
	
	Отказ = ПроверкаЗациклинностиЗависимостей(Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаписатьСборДанныхВРегистр();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	ЗаполнениеПериодовИзТЧ();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если Объект.Код = "" Тогда
		СтарыйИдентификатор = "";
	Иначе
		СтарыйИдентификатор = ИдентификаторПоПредставлению(ПрежнееНаименование);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Идентификатор)
		Или СтарыйИдентификатор = Объект.Идентификатор 
		Или Не ИдентификаторПоПредставлению(Объект.Наименование) = Объект.Идентификатор Тогда
		
		Объект.Идентификатор = ИдентификаторПоПредставлению(Объект.Наименование);
		ПрежнийИдентификатор = Объект.Идентификатор;
		
	КонецЕсли;
	
	ПрежнееНаименование = Объект.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПриИзменении(Элемент)
	
	СтароеНаименование = ПредставлениеПоИдентификатору(ПрежнийИдентификатор);
	
	Если Не ЗначениеЗаполнено(Объект.Наименование)
		Или СтароеНаименование = Объект.Наименование Тогда
		Объект.Наименование = ПредставлениеПоИдентификатору(Объект.Идентификатор);
		ПрежнееНаименование = Объект.Наименование;
	КонецЕсли;
	
	//ПрежнийИдентификатор = Объект.Идентификатор;
		
КонецПроцедуры

&НаКлиенте
Процедура ТипПоказателяПриИзменении(Элемент)

	НаименованиеПоказателяРасчетаЗП = ПолучитьПоказательРасчетаЗарплатыТипаНаСервере(Объект.ТипПоказателя);
	
	Матричный = ТипПоказателяМатричный(Объект.ТипПоказателя);
	
	Если Не ЗначениеЗаполнено(Объект.ПоказательРасчетаЗарплаты) Тогда
		Объект.ИспользоватьНастройкуИзТипаПоказателя = Не Матричный;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры        

&НаСервереБезКонтекста
Функция ПолучитьПоказательРасчетаЗарплатыТипаНаСервере(ТипПоказателя);      
	
	Запрос = Новый Запрос(
	 "ВЫБРАТЬ
	 |	ПРЕДСТАВЛЕНИЕ(УБ_ТипыПоказателей.ПоказательРасчетаЗарплаты) КАК ПоказательРасчетаЗарплатыПредставление
	 |ИЗ
	 |	Справочник.УБ_ТипыПоказателей КАК УБ_ТипыПоказателей
	 |ГДЕ
	 |	УБ_ТипыПоказателей.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ТипПоказателя);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПоказательРасчетаЗарплатыПредставление;
	Иначе
		Возврат "<не установлен>";
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ИспользоватьНастройкуИзТипаПоказателяПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьМинимальноеЗначениеРезультатаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьМаксимальноеЗначениеРезультатаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

//&НаКлиенте
//Процедура ИспользоватьШкалуПоказателейПриИзменении(Элемент)
//	
//	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
//	Элементы.ШкалаПоказателей.Видимость = Объект.ИспользоватьШкалуПоказателей;
//КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФормулуПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	Если НЕ Объект.ИспользоватьФормулу Тогда
		Объект.ФормулаРасчета = "";
	КонецЕсли;
	//Элементы.ФормулаРасчета.Видимость = Объект.ИспользоватьФормулу;	
	Элементы.ИзменитьФормулу.Видимость = Объект.ИспользоватьФормулу; 

КонецПроцедуры

&НаКлиенте
Процедура ПерспективаССППриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПерспективаССП) Тогда
		Объект.ЦветИндекс = УБ_СобытияФорм.ВернутьЦветПерспективыССПДляЗаполнения(Объект.ПерспективаССП);
	Иначе
		Элементы.ПерспективаССП.ЦветФона = Новый Цвет();
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ПринадлежностьПоказателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УБ_ПланированиеПоказателейКлиент.НазначениеНачалоВыбора(ЭтотОбъект, ЭтотОбъект,,СтандартнаяОбработка);

КонецПроцедуры 
&НаКлиенте
Процедура ОбработкаВыбораНазначения(Результат, ДополнительныеПараметры) Экспорт
	Объект.ПринадлежностьПоказателя = Результат;
	УстановитьВидимостьЗависимыхРеквизитов(Элементы.ПринадлежностьПоказателя, Объект.ПринадлежностьПоказателя);
КонецПроцедуры  

&НаКлиенте
Процедура ТипЗначенияПоказателяПриИзменении(Элемент)
	Элементы.ЕдиницаИзмерения.Доступность = Объект.ТипЗначенияПоказателя = "Число";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьФормулу(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПолучитьТаблицуФормул(ПараметрыФормы);	
	ПараметрыФормы.Вставить("НаименованиеПоказателя", Объект.Наименование);
	ПараметрыФормы.Вставить("ПоказательЭффективности", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр",Ложь);
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьФормулуЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.УБ_ФормаПодбораФормулРасчета", ПараметрыФормы, ЭтотОбъект,,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПолучитьТаблицуФормул(ПараметрыФормы)

	МассивФормул = Новый Массив;
	МассивЯчеек = Новый Массив;
	Для каждого Строка из Объект.ФормулыРасчета Цикл
		МассивФормул.Добавить(Строка.Формула);
		МассивЯчеек.Добавить(Строка.Ячейка);
	КонецЦикла;
	ПараметрыФормы.Вставить("МассивФормул", МассивФормул);
	ПараметрыФормы.Вставить("МассивЯчеек", МассивЯчеек);
	
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьФормулуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ФормулыРасчета.Очистить();
	н = 0;	
	Пока н<Результат.МассивФормул.Количество() Цикл
	    НоваяСтрока = Объект.ФормулыРасчета.Добавить();
		НоваяСтрока.Ячейка = Результат.МассивЯчеек[н];
		НоваяСтрока.Формула = Результат.МассивФормул[н];
		н = н+1;
	КонецЦикла;	
	
	Модифицированность = Истина;
	
КонецПроцедуры

//&НаКлиенте
//Процедура РедактироватьСхемуКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	АдресаНастроек = Результат;
//	
//	Если ЗначениеЗаполнено(АдресаНастроек) Тогда
//        Если ПустаяСтрока(АдресаНастроек.ИмяТекущегоШаблонаСКД) 
//            И Элементы.СхемаКомпоновкиДанных.СписокВыбора.НайтиПоЗначению("") = Неопределено Тогда
//            Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru = 'Произвольный'"));
//            
//        КонецЕсли;
//        
//        Объект.СхемаКомпоновкиДанных = АдресаНастроек.ИмяТекущегоШаблонаСКД;
//        
//        Если АдресаНастроек.Свойство("АдресХранилищаНастройкиКомпоновщика") Тогда
//            АдресНастроекКомпоновкиДанных = АдресаНастроек.АдресХранилищаНастройкиКомпоновщика;
//        КонецЕсли;
//        
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ФиксированныйПриИзменении(Элемент)
	ФиксированныйПриИзмененииНаСервере();				
КонецПроцедуры

&НаСервере
Процедура ФиксированныйПриИзмененииНаСервере()
			
		Если Объект.Фиксированный Тогда 
			Объект.НегативноеОтклонениеНормыДо = 0;
			Объект.ПограничноеОтклонениеНормыОт = 0;
			Объект.ПограничноеОтклонениеНормыДо = 0;
			Объект.ПозитивноеОтклонениеНормыОт = 0;
		Иначе
			Объект.НегативноеОтклонениеНормыДо = Константы.УБ_НегативноеОтклонениеНормыДо.Получить();
			Объект.ПограничноеОтклонениеНормыОт = Константы.УБ_ПограничноеОтклонениеНормыОт.Получить();
			Объект.ПограничноеОтклонениеНормыДо = Константы.УБ_ПограничноеОтклонениеНормыДо.Получить();
			Объект.ПозитивноеОтклонениеНормыОт = Константы.УБ_ПозитивноеОтклонениеНормыОт.Получить();
		КонецЕсли;
		
		Элементы.ГраницыНормыЭффективностиПоказателей.Доступность = Не Объект.Фиксированный;
		Элементы.ГраницыНормыЭффективностиПоказателей.Видимость = Не Объект.Фиксированный;
	
КонецПроцедуры

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДозаполнитьФормулы()
	
	Если ЗначениеЗаполнено(Объект.ФормулаРасчета) и Объект.ФормулыРасчета.Количество() = 0 Тогда
		
		НоваяФормула = Объект.ФормулыРасчета.Добавить();
		НоваяФормула.Ячейка = "Сумма";
		НоваяФормула.Формула = Объект.ФормулаРасчета;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СменаИндикаторов(типПрямой)
	//Если типПрямой Тогда
	//	ИндексКартинкиНегативногоОтклонения = "▼";
	//	ИдексКартинкиПозитивногоОтклонения = "▲";
	//	Элементы.ИндексКартинкиНегативногоОтклонения.ЦветТекста = Новый Цвет(255, 0, 0);
	//	Элементы.ИдексКартинкиПозитивногоОтклонения.ЦветТекста = Новый Цвет(0, 255, 0);
	//	возврат;
	//КонецЕсли;
	//
	//Элементы.ИндексКартинкиНегативногоОтклонения.ЦветТекста = Новый Цвет(0, 255, 0);
	//Элементы.ИдексКартинкиПозитивногоОтклонения.ЦветТекста = Новый Цвет(255, 0, 0);
	//ИндексКартинкиНегативногоОтклонения = "▲";
	//ИдексКартинкиПозитивногоОтклонения = "▼";
КонецПроцедуры

&НаСервере
Функция ВычислитьЗначениеКонстантыКАУП()
	Возврат Константы.УБ_ИспользоватьСправочникиКАУП.Получить();
КонецФункции

&НаСервере
Процедура ЗаполнитьПодразделениеПоПринадлежности()
	
	Если ТипЗнч(Объект.ПринадлежностьПоказателя) = ТипЗнч(Справочники.УБ_Подразделения.ПустаяСсылка()) Тогда
		Объект.ПодразделениеПринадлежности = Объект.ПринадлежностьПоказателя;
		Объект.Организация = Объект.ПодразделениеПринадлежности.Владелец; 
	ИначеЕсли ТипЗнч(Объект.ПринадлежностьПоказателя) = ТипЗнч(Справочники.УБ_Сотрудники.ПустаяСсылка()) Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УБ_КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
			|	УБ_КадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация
			|ИЗ
			|	РегистрСведений.УБ_КадроваяИсторияСотрудников.СрезПоследних(, Сотрудник = &Сотрудник) КАК УБ_КадроваяИсторияСотрудниковСрезПоследних";
		
		Запрос.УстановитьПараметр("Сотрудник", Объект.ПринадлежностьПоказателя);
		
		РезультатЗапроса = Запрос.Выполнить();                                               	
		
		Выборка = РезультатЗапроса.Выбрать();		
		Выборка.Следующий(); 
		
		Объект.Организация = Выборка.Организация;
		Объект.ПодразделениеПринадлежности = Выборка.Подразделение;
		
	ИначеЕсли ТипЗнч(Объект.ПринадлежностьПоказателя) = ТипЗнч(Справочники.Организации.ПустаяСсылка()) Тогда
		Объект.Организация = Объект.ПринадлежностьПоказателя;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеВлияющийПоказателей(Объект)
	
	Объект.ВлияющиеПоказатели.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ЗависимостиПоказателейЭффективности.ВлияющийПоказатель КАК ВлияющийПоказатель,
		|	УБ_ЗависимостиПоказателейЭффективности.ДействуетС КАК ДействуетС
		|ИЗ
		|	РегистрСведений.УБ_ЗависимостиПоказателейЭффективности КАК УБ_ЗависимостиПоказателейЭффективности
		|ГДЕ
		|	УБ_ЗависимостиПоказателейЭффективности.ПрекратилДействие = &ПрекратилДействие
		|	И УБ_ЗависимостиПоказателейЭффективности.ЗависимыйПоказатель = &ЗависимыйПоказатель";
	
	Запрос.УстановитьПараметр("ЗависимыйПоказатель", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПрекратилДействие", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		Объект.ВлияющиеПоказатели.Очистить();
		Пока Выборка.Следующий() Цикл
			СтрокаПоказателя = Объект.ВлияющиеПоказатели.Добавить();
			СтрокаПоказателя.ВлияющийПоказатель = Выборка.ВлияющийПоказатель;
			СтрокаПоказателя.ДействуетС = Выборка.ДействуетС;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаЗациклинностиЗависимостей(Объект, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ЗависимостиПоказателейЭффективности.ВлияющийПоказатель КАК ВлияющийПоказатель
		|ИЗ
		|	РегистрСведений.УБ_ЗависимостиПоказателейЭффективности КАК УБ_ЗависимостиПоказателейЭффективности
		|ГДЕ
		|	УБ_ЗависимостиПоказателейЭффективности.ЗависимыйПоказатель = &ЗависимыйПоказатель
		|	И УБ_ЗависимостиПоказателейЭффективности.ПрекратилДействие = &ПрекратилДействие";
	
	Запрос.УстановитьПараметр("ЗависимыйПоказатель", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПрекратилДействие", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Для Каждого СтрокаТЧ Из Объект.ЗависимыеПоказатели Цикл
			Если СтрокаТЧ.ЗависимыйПоказатель = Выборка.ВлияющийПоказатель Тогда
				ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Существует зацикленность показателей'"),
				,
				,
				,
				Отказ);
				Возврат Отказ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецФункции
		
&НаСервере
Процедура ЗаполнениеПериодовНовогоДокумента();
			
	Январь = Истина;
	Февраль = Истина;
	Март = Истина;
	Апрель = Истина;
	Май = Истина;
	Июнь = Истина;
	Июль = Истина;
	Август = Истина;
	Сентябрь = Истина;
	Октябрь = Истина;
	Ноябрь = Истина;
	Декабрь = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПериодовИзТЧ();
	
	Для Каждого СтрокаПериода Из Объект.ПериодыИспользованияПоказателя Цикл
		
   		Если Месяц(СтрокаПериода.МесяцПрименения) = 1 Тогда
			Январь = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 2 Тогда
			Февраль = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 3 Тогда
			Март = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 4 Тогда
			Апрель = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 5 Тогда
			Май = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 6 Тогда
			Июнь = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 7 Тогда
			Июль = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 8 Тогда
			Август = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 9 Тогда
			Сентябрь = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 10 Тогда
			Октябрь = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 11 Тогда
			Ноябрь = Истина;
		КонецЕсли;
		
		Если Месяц(СтрокаПериода.МесяцПрименения) = 12 Тогда
			Декабрь = Истина;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеТЧПериодовИспользования()

	Объект.ПериодыИспользованияПоказателя.Очистить();
	Если Январь Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20010101");
	КонецЕсли;
	
	Если Февраль Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20010201");
	КонецЕсли;
	
	Если Март Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20010301");
	КонецЕсли;
	
	Если Апрель Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20010401");
	КонецЕсли;
	
	Если Май Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20010501");
	КонецЕсли;
	
	Если Июнь Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20010601");
	КонецЕсли;
	
	Если Июль Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20010701");
	КонецЕсли;
	
	Если Август Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20010801");
	КонецЕсли;
	
	Если Сентябрь Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20010901");
	КонецЕсли;
	
	Если Октябрь Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20011001");
	КонецЕсли;
	
	Если Ноябрь Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20011101");
	КонецЕсли;
	
	Если Декабрь Тогда
		СтрокаПериода = Объект.ПериодыИспользованияПоказателя.Добавить();
		СтрокаПериода.МесяцПрименения = Дата("20011201");
	КонецЕсли;	 
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовФормы(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Матричный = ТипПоказателяМатричный(Объект.ТипПоказателя);
	Элементы.ДекорацияПоказательРасчетаЗПИзТипа.Заголовок = ": "+Форма.НаименованиеПоказателяРасчетаЗП;

//	Элементы.ДекорацияПоказательРасчетаЗПИзТипа.Заголовок = Объект.ТипПоказателя.ПоказательРасчетаЗарплаты;
	Элементы.ГруппаНастройкаПоказателяРасчетаЗарплаты.Доступность = Не Матричный;
	// УБ++
	Элементы.ГруппаНастройкиРасценки.Доступность = Не Матричный; 
	//Элементы.ВидРасценки.Доступность = Не Матричный;
	//Элементы.ГруппаНастройкиИспользованияФормулы.Доступность = Не Матричный;
	// УБ--	
	Элементы.ПоказательРасчетаЗарплаты.Доступность = Не Объект.ИспользоватьНастройкуИзТипаПоказателя;
	Элементы.ПоказательРасчетаЗарплаты.АвтоОтметкаНезаполненного = Не Объект.ИспользоватьНастройкуИзТипаПоказателя;
	
	//Элементы.ШкалаПоказателей.Доступность = Объект.ИспользоватьШкалуПоказателей;
	
	Элементы.РассчитыватьРезультатОтФакта.Доступность = Не Матричный;
	Элементы.Фиксированный.Доступность = (Не Матричный);
	
	Элементы.ИзменитьФормулу.Доступность = Объект.ИспользоватьФормулу;
	
	Элементы.МинимальноеЗначениеРезультата.Доступность = Объект.ОграничиватьМинимальноеЗначениеРезультата;
	Элементы.МаксимальноеЗначениеРезультата.Доступность = Объект.ОграничиватьМаксимальноеЗначениеРезультата;
	
	
	
	Элементы.ЕдиницаИзмерения.Доступность = Объект.ТипЗначенияПоказателя = "Число";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипПоказателяМатричный(ТипПоказателя)
	
	Если Не ЗначениеЗаполнено(ТипПоказателя) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипПоказателя, "Матричный");
	
КонецФункции

//&НаСервере
//Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище()
//	
//	Адреса = Справочники.УБ_ПоказателиЭффективности.АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(Объект);
//	Возврат Адреса;
//	
//КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПоПредставлению(Знач Представление)
	
	Идентификатор = "";
	БылРазделитель = Ложь;
	Для НомерСимвола = 1 По СтрДлина(Представление) Цикл
		Символ = Сред(Представление, НомерСимвола, 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ)
			И ПустаяСтрока(Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола(Символ)) Тогда
			БылРазделитель = Истина; 
		Иначе
			Если БылРазделитель Тогда
				БылРазделитель = Ложь;
				Символ = ВРег(Символ);
			КонецЕсли;
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПоИдентификатору(Знач Идентификатор)
	
	Представление = "";
	БылВРег = Ложь;
	Для НомерСимвола = 1 По СтрДлина(Идентификатор) Цикл
		Символ = Сред(Идентификатор, НомерСимвола, 1);
		ЭтоВРег = (Символ = ВРег(Символ));
		Если Не БылВРег И ЭтоВРег И Не НомерСимвола = 1 Тогда
			Символ = " " + Символ;
		КонецЕсли;
		БылВРег = ЭтоВРег;
		Представление = Представление + Символ;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьИдентификаторПоказателя(Идентификатор, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиЭффективности.Идентификатор КАК Идентификатор
		|ИЗ
		|	Справочник.УБ_ПоказателиЭффективности КАК ПоказателиЭффективности
		|ГДЕ
		|	ПОДСТРОКА(ПоказателиЭффективности.Идентификатор, 1, &КоличествоСимволов) = &Идентификатор
		|	И ПоказателиЭффективности.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("КоличествоСимволов", СтрДлина(Идентификатор));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	ТекущиеИдентфикаторы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	Счетчик = 1;
	Пока Истина Цикл
		Если ЗначениеЗаполнено(Идентификатор) И ТекущиеИдентфикаторы.Найти(Идентификатор) = Неопределено Тогда
			Возврат Идентификатор;
		Иначе
			НовыйИдентификатор = Идентификатор + Счетчик;
			Если ТекущиеИдентфикаторы.Найти(НовыйИдентификатор) = Неопределено Тогда
				Возврат НовыйИдентификатор;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере 
Процедура ИзменитьИдентификаторВФормулах(ПрежнийИдентификатор, НовыйИдентификатор)
	
	ПрежнийИдентификаторДляФормулы = ПрежнийИдентификатор + ".";
	НовыйИдентификаторДляФормулы = НовыйИдентификатор + ".";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ПоказателиЭффективности.Ссылка КАК Ссылка,
		|	УБ_ПоказателиЭффективности.ФормулаРасчета КАК ФормулаРасчета
		|ИЗ
		|	Справочник.УБ_ПоказателиЭффективности КАК УБ_ПоказателиЭффективности";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Найти(Выборка.ФормулаРасчета, ПрежнийИдентификаторДляФормулы) Тогда
			ПоказательЭффективностиСсылка = Выборка.Ссылка;
			ПоказательЭффективностиОбъект = ПоказательЭффективностиСсылка.ПолучитьОбъект();
			ПоказательЭффективностиОбъект.ФормулаРасчета = СтрЗаменить(ПоказательЭффективностиОбъект.ФормулаРасчета, ПрежнийИдентификаторДляФормулы, НовыйИдентификаторДляФормулы);
			ПрежнийИдентификатор = НовыйИдентификаторДляФормулы;
			ПоказательЭффективностиОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//++++Заявка270623 Тихомиров
&НаКлиенте
Функция ТипРасчетаПрямой()
	возврат Объект.ТипРасчета = ПредопределенноеЗначение("Перечисление.УБ_ТипыРасчета.Прямой")
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеОтклонения(Элемент, Промежуточное = Ложь)
	
	Структура = УБ_СобытияФормКлиент.СформироватьСтруктуру();
	ЗаполнитьЗначенияСвойств(Структура, Объект);
	
	УБ_СобытияФормКлиент.ИзменениеЗначенияОтклонения(Структура, Элемент, Промежуточное);
	
	ЗаполнитьЗначенияСвойств(Объект,Структура);

КонецПроцедуры


&НаКлиенте
Процедура НегативноеОтклонениеНормыДоПриИзменении(Элемент)
	ОбработатьИзменениеОтклонения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПограничноеОтклонениеНормыОтПриИзменении(Элемент)
	ОбработатьИзменениеОтклонения(Элемент,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПограничноеОтклонениеНормыДоПриИзменении(Элемент)
	ОбработатьИзменениеОтклонения(Элемент,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПозитивноеОтклонениеНормыОтПриИзменении(Элемент)
	ОбработатьИзменениеОтклонения(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТипРасчетаПриИзменении(Элемент)
	УБ_ПользовательскийИнтерфейсКлиент.СменаНаправленияИндикаторовГНЭ(Элементы.КИндикатор,Элементы.ЗИндикатор,ТипРасчетаПрямой());
КонецПроцедуры
////----Заявка270623 Тихомиров

&НаКлиенте
Процедура ВлияетНаПрекратилДействиеЧекбоксПриИзменении(Элемент)
	Если ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ПрекратилДействиеЧекбокс Тогда
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ПрекратилДействиеС = ТекущаяДата();
	Иначе
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ПрекратилДействиеС = Дата(1,1,1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоказателейЭффективности(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВлияетНа",Объект.ЗависимыеПоказатели);	
	ОткрытьФорму("Справочник.УБ_ПоказателиЭффективности.Форма.ФормаПодбораПоказателейЭффективности",СтруктураОтбора,ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если ИмяСобытия = "ВыборПоказателей" Тогда
		
		Для каждого ЭлементМассива Из Параметр.ОтобранныеПоказатели Цикл
			
			Если Объект.ЗависимыеПоказатели.НайтиСтроки(Новый Структура("ЗависимыйПоказатель", ЭлементМассива)).Количество() = 0 Тогда
				
				НоваяСтрока = Объект.ЗависимыеПоказатели.Добавить();
				НоваяСтрока.ЗависимыйПоказатель = ЭлементМассива;
				
			КонецЕсли;
			
		КонецЦикла;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыВыбораПоСсылке(Ссылка)
    Возврат Ссылка.Метаданные().ПолноеИмя() + ".ФормаВыбора";
КонецФункции

&НаКлиенте
Процедура ПринадлежностьПоказателяИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если Объект.ПринадлежностьПоказателя = УБ_ОбщегоНазначенияКлиент.ЗначениеРеквизитаПоУмолчанию("Компания") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя изменять значение вручную.";
		Сообщение.Сообщить();		                        
		Объект.ПринадлежностьПоказателя = УБ_ОбщегоНазначенияКлиент.ЗначениеРеквизитаПоУмолчанию("Компания");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхПлана(Команда)
	
	ПараметрыФормы = СформироватьПараметрыФормыРедактированияСхемыСбораДанных(Ложь);
	
	ДополнительныеПараметры = Новый Структура("ЭтоСхемаСбораДанныхФакта", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьСхемуКомпоновкиДанныхЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыФормы, , , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхФакта(Команда)
	
	ПараметрыФормы = СформироватьПараметрыФормыРедактированияСхемыСбораДанных(Истина);
	
	ДополнительныеПараметры = Новый Структура("ЭтоСхемаСбораДанныхФакта", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьСхемуКомпоновкиДанныхЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыФормы, , , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресаНастроек = Результат;
	ЭтоСхемаСбораДанныхФакта = ДополнительныеПараметры.ЭтоСхемаСбораДанныхФакта;
	
	Если ЗначениеЗаполнено(АдресаНастроек) Тогда
		
		Если ЭтоСхемаСбораДанныхФакта Тогда
			ЭлементСхемаКомпоновки = Элементы.СхемаКомпоновкиДанныхФакта;
		Иначе
			ЭлементСхемаКомпоновки = Элементы.СхемаКомпоновкиДанныхПлана;
		КонецЕсли;
		
		Если ПустаяСтрока(АдресаНастроек.ИмяТекущегоШаблонаСКД)
			И ЭлементСхемаКомпоновки.СписокВыбора.НайтиПоЗначению("") = Неопределено Тогда
			
			ЭлементСхемаКомпоновки.СписокВыбора.Добавить("", НСтр("ru = 'Произвольный'"));
			
		КонецЕсли;
		
		Если ЭтоСхемаСбораДанныхФакта Тогда
			СхемаКомпоновкиДанныхФакта = АдресаНастроек.ИмяТекущегоШаблонаСКД;
		Иначе
			СхемаКомпоновкиДанныхПлана = АдресаНастроек.ИмяТекущегоШаблонаСКД;
		КонецЕсли;
		
		Если АдресаНастроек.Свойство("АдресХранилищаНастройкиКомпоновщика") Тогда
			Если ЭтоСхемаСбораДанныхФакта Тогда
				АдресНастроекКомпоновкиДанныхФакта = АдресаНастроек.АдресХранилищаНастройкиКомпоновщика;
				АдресСхемыКомпоновкиДанныхФакта = АдресаНастроек.АдресСхемыКомпоновкиДанных;
			Иначе
				АдресНастроекКомпоновкиДанныхПлана = АдресаНастроек.АдресХранилищаНастройкиКомпоновщика;
				АдресСхемыКомпоновкиДанныхПлана = АдресаНастроек.АдресСхемыКомпоновкиДанных;
			КонецЕсли;
		КонецЕсли;
		
		Если АдресаНастроек.Свойство("АдресСхемыКомпоновкиДанных") Тогда
        	Если ЭтоСхемаСбораДанныхФакта Тогда
				АдресСхемыКомпоновкиДанныхФакта = АдресаНастроек.АдресСхемыКомпоновкиДанных;
			Иначе
				АдресСхемыКомпоновкиДанныхПлана = АдресаНастроек.АдресСхемыКомпоновкиДанных;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформироватьПараметрыФормыРедактированияСхемыСбораДанных(ЭтоСхемаСбораДанныхФакта)
	
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Настройка шаблона расчета для показателя эффективности ""%1""'"),
		Объект.Наименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных", Истина);
	ПараметрыФормы.Вставить("НеРедактироватьСхемуКомпоновкиДанных", Ложь);
	ПараметрыФормы.Вставить("НеНастраиватьУсловноеОформление", Истина);
	ПараметрыФормы.Вставить("НеНастраиватьВыбор", Истина);
	ПараметрыФормы.Вставить("НеНастраиватьПорядок", Ложь);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("ИсточникШаблонов", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВозвращатьИмяТекущегоШаблонаСКД", Истина);
	
	Если ЭтоСхемаСбораДанныхФакта Тогда
		ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанныхФакта);
		ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных", АдресНастроекКомпоновкиДанныхФакта);
		ПараметрыФормы.Вставить("ИмяШаблонаСКД", СхемаКомпоновкиДанныхФакта);
	Иначе
		ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанныхПлана);
		ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных", АдресНастроекКомпоновкиДанныхПлана);
		ПараметрыФормы.Вставить("ИмяШаблонаСКД", СхемаКомпоновкиДанныхПлана);
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ЗаписатьСборДанныхВРегистр() 
	
	Запись = РегистрыСведений.УБ_СхемыСбораДанныхПоказателейЭффективности.СоздатьМенеджерЗаписи();
	Если ЗначениеЗаполнено(ТекущаяВерсияНастроекСбораДанных) Тогда
		Запись.Период = ТекущаяВерсияНастроекСбораДанных;
	Иначе
		Запись.Период = НачалоМесяца(КонецМесяца(ТекущаяДата())+ 10); 
	КонецЕсли;
	Запись.ПоказательЭффективности = Объект.Ссылка;
	Запись.ВариантРасчетаЗначенияПлана =Объект.ВариантРасчетаЗначенияПлана;
	Запись.ВариантРасчетаЗначенияФакта = Объект.ВариантРасчетаЗначенияФакта;                
	Запись.ОписаниеПодсчетаФакта = Объект.ОписаниеПодсчетаФакта;
	Запись.ОписаниеУстановкиПлана = Объект.ОписаниеУстановкиПлана;
	Запись.ОписаниеИнструментовДляАнализа = Объект.ОписаниеИнструментовДляАнализа;
	Запись.СхемаКомпоновкиДанныхПлана =СхемаКомпоновкиДанныхПлана;
	Запись.СхемаКомпоновкиДанныхФакта = СхемаКомпоновкиДанныхФакта;
	Если Не ПустаяСтрока(АдресСхемыКомпоновкиДанныхПлана) Тогда
		Запись.ХранилищеСхемыКомпоновкиДанныхПлана = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(
			АдресСхемыКомпоновкиДанныхПлана));
	Иначе
		Запись.ХранилищеСхемыКомпоновкиДанныхПлана = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	Если Не ПустаяСтрока(АдресСхемыКомпоновкиДанныхФакта) Тогда
		Запись.ХранилищеСхемыКомпоновкиДанныхФакта = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(
			АдресСхемыКомпоновкиДанныхФакта));
	Иначе
		Запись.ХранилищеСхемыКомпоновкиДанныхФакта = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	Если Не ПустаяСтрока(АдресНастроекКомпоновкиДанныхПлана) Тогда
		Запись.ХранилищеНастроекКомпоновкиДанныхПлана = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(
			АдресНастроекКомпоновкиДанныхПлана));
	Иначе
		Запись.ХранилищеНастроекКомпоновкиДанныхПлана = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	Если Не ПустаяСтрока(АдресНастроекКомпоновкиДанныхФакта) Тогда
		Запись.ХранилищеНастроекКомпоновкиДанныхФакта = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(
			АдресНастроекКомпоновкиДанныхФакта));
	Иначе
		Запись.ХранилищеНастроекКомпоновкиДанныхФакта = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	Запись.Записать();  
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьНовуюВерсиюНастроекСбораДанныхНаСервере()
	
	Запись = РегистрыСведений.УБ_СхемыСбораДанныхПоказателейЭффективности.СоздатьМенеджерЗаписи(); 
	Запись.Период = НачалоМесяца(ТекущаяВерсияНастроекСбораДанных);
	Запись.ПоказательЭффективности = Объект.Ссылка;
	Запись.ВариантРасчетаЗначенияПлана =Объект.ВариантРасчетаЗначенияПлана;
	Запись.ВариантРасчетаЗначенияФакта = Объект.ВариантРасчетаЗначенияФакта;                
	Запись.ОписаниеПодсчетаФакта = Объект.ОписаниеПодсчетаФакта;
	Запись.ОписаниеУстановкиПлана = Объект.ОписаниеУстановкиПлана;
	Запись.ОписаниеИнструментовДляАнализа = Объект.ОписаниеИнструментовДляАнализа;
	Запись.СхемаКомпоновкиДанныхПлана =СхемаКомпоновкиДанныхПлана;
	Запись.СхемаКомпоновкиДанныхФакта = СхемаКомпоновкиДанныхФакта;
	Если Не ПустаяСтрока(АдресСхемыКомпоновкиДанныхПлана) Тогда
		Запись.ХранилищеСхемыКомпоновкиДанныхПлана = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(
			АдресСхемыКомпоновкиДанныхПлана));
	Иначе
		Запись.ХранилищеСхемыКомпоновкиДанныхПлана = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	Если Не ПустаяСтрока(АдресСхемыКомпоновкиДанныхФакта) Тогда
		Запись.ХранилищеСхемыКомпоновкиДанныхФакта = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(
			АдресСхемыКомпоновкиДанныхФакта));
	Иначе
		Запись.ХранилищеСхемыКомпоновкиДанныхФакта = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	Если Не ПустаяСтрока(АдресНастроекКомпоновкиДанныхПлана) Тогда
		Запись.ХранилищеНастроекКомпоновкиДанныхПлана = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(
			АдресНастроекКомпоновкиДанныхПлана));
	Иначе
		Запись.ХранилищеНастроекКомпоновкиДанныхПлана = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	Если Не ПустаяСтрока(АдресНастроекКомпоновкиДанныхФакта) Тогда
		Запись.ХранилищеНастроекКомпоновкиДанныхФакта = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(
			АдресНастроекКомпоновкиДанныхФакта));
	Иначе
		Запись.ХранилищеНастроекКомпоновкиДанныхФакта = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	Запись.ПериодСбораДанных = Объект.ПериодРасчетаСбораДанных;
	Запись.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюВерсиюНастроекСбораДанных(Команда)
	
	Если ЕстьВерсияНаТекущийПериод() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПерезаписиПосле",
      ЭтотОбъект);	
 
	    ПоказатьВопрос(Оповещение,
	        "На данный период уже есть версия настроек. Перезаписать?",
	        РежимДиалогаВопрос.ДаНет,
	        0, // таймаут в секундах
	        КодВозвратаДиалога.Да);
	Иначе	
		ВопросПерезаписиПосле(КодВозвратаДиалога.Да,Новый Структура());
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезаписиПосле(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьНовуюВерсиюНастроекСбораДанныхНаСервере();
	КонецЕсли;	
	ДатаАктуальнойВерсияНастроек = ПолучитьДатуАктуальнойВерсияНастроек();
	Если ДатаАктуальнойВерсияНастроек <> Неопределено Тогда 
		ТекущаяВерсияНастроекСбораДанных = ДатаАктуальнойВерсияНастроек;
	КонецЕсли;
	ЭтотОбъект.Записать();
		
КонецПроцедуры		

&НаСервере
Функция ЕстьВерсияНаТекущийПериод()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УБ_СхемыСбораДанныхПоказателейЭффективности.Период КАК Период,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективности.ПоказательЭффективности КАК ПоказательЭффективности
	               |ИЗ
	               |	РегистрСведений.УБ_СхемыСбораДанныхПоказателейЭффективности КАК УБ_СхемыСбораДанныхПоказателейЭффективности
	               |ГДЕ
	               |	УБ_СхемыСбораДанныхПоказателейЭффективности.Период = &Период
	               |	И УБ_СхемыСбораДанныхПоказателейЭффективности.ПоказательЭффективности = &ПоказательЭффективности";
	Запрос.УстановитьПараметр("Период",НачалоМесяца(ТекущаяВерсияНастроекСбораДанных));
	Запрос.УстановитьПараметр("ПоказательЭффективности",Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.следующий() Тогда
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

&НаСервере 
Функция ПолучитьДатуАктуальнойВерсияНастроек()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.УБ_СхемыСбораДанныхПоказателейЭффективности.СрезПоследних(, ПоказательЭффективности = &ПоказательЭффективности) КАК УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних";
	
	Запрос.УстановитьПараметр("ПоказательЭффективности", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Период;
	Иначе Возврат Неопределено;
	КонецЕсли;	
		
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ВерсииГрейдовСрезПоследних.МодельПланированияЭффективности КАК МодельПланированияЭффективности,
		|	УБ_ВерсииГрейдовСрезПоследних.Грейд КАК Грейд,
		|	УБ_ВерсииГрейдовСрезПоследних.ВерсияГрейда КАК ВерсияГрейда
		|ПОМЕСТИТЬ ВТ_СписокГрейдов
		|ИЗ
		|	РегистрСведений.УБ_ВерсииГрейдов.СрезПоследних(, Статус = ЗНАЧЕНИЕ(Перечисление.УБ_СтатусыМоделейПланирования.Действует)) КАК УБ_ВерсииГрейдовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УБ_СоставПоказателейМоделейПланированияСрезПоследних.Грейд КАК Грейд,
		|	УБ_СоставПоказателейМоделейПланированияСрезПоследних.Регистратор КАК Регистратор,
		|	УБ_СоставПоказателейМоделейПланированияСрезПоследних.Регистратор.Подразделение КАК Подразделение,
		|	УБ_СоставПоказателейМоделейПланированияСрезПоследних.МодельПланированияЭффективности КАК МодельПланированияЭффективности
		|ИЗ
		|	РегистрСведений.УБ_СоставПоказателейМоделейПланирования.СрезПоследних(, ПоказательЭффективности = &ПоказательЭффективности) КАК УБ_СоставПоказателейМоделейПланированияСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокГрейдов КАК ВТ_СписокГрейдов
		|		ПО УБ_СоставПоказателейМоделейПланированияСрезПоследних.МодельПланированияЭффективности = ВТ_СписокГрейдов.МодельПланированияЭффективности
		|			И УБ_СоставПоказателейМоделейПланированияСрезПоследних.Грейд = ВТ_СписокГрейдов.Грейд
		|			И УБ_СоставПоказателейМоделейПланированияСрезПоследних.ВерсияГрейда = ВТ_СписокГрейдов.ВерсияГрейда
		|ГДЕ
		|	УБ_СоставПоказателейМоделейПланированияСрезПоследних.Грейд.ВАрхиве = &ВАрхиве";
	
	Запрос.УстановитьПараметр("ПоказательЭффективности", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВАрхиве", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		СписокМоделей.Очистить();
		Если Объект.СостояниеПоказателя = Перечисления.УБ_СостоянияПоказателейЭффективности.Архивный Тогда 
			
			Элементы.СписокМоделей.Видимость = Истина;
			Пока Выборка.Следующий()Цикл 
				СтрокаТЧ = СписокМоделей.Добавить();
				СтрокаТЧ.Регистратор = Выборка.Регистратор;  
				СтрокаТЧ.Подразделение = Выборка.Подразделение;
				СтрокаТЧ.МодельМатериальнойМотивации = Выборка.МодельПланированияЭффективности;
				СтрокаТЧ.Грейд = Выборка.Грейд;				
			КонецЦикла;
			Отказ = Истина;			
		КонецЕсли;
	Иначе Элементы.СписокМоделей.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СписокМоделейПриИзменении(Элемент)
	Если СписокМоделей.Количество() = 0 Тогда
		Элементы.СписокМоделей.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗависимостейНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ВерсииГрейдовСрезПоследних.МодельПланированияЭффективности КАК МодельПланированияЭффективности,
		|	УБ_ВерсииГрейдовСрезПоследних.Грейд КАК Грейд,
		|	УБ_ВерсииГрейдовСрезПоследних.ВерсияГрейда КАК ВерсияГрейда
		|ПОМЕСТИТЬ ВТ_СписокГрейдов
		|ИЗ
		|	РегистрСведений.УБ_ВерсииГрейдов.СрезПоследних(, Статус = ЗНАЧЕНИЕ(Перечисление.УБ_СтатусыМоделейПланирования.Действует)) КАК УБ_ВерсииГрейдовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УБ_СоставПоказателейМоделейПланированияСрезПоследних.Грейд КАК Грейд,
		|	УБ_СоставПоказателейМоделейПланированияСрезПоследних.Регистратор КАК Регистратор,
		|	УБ_СоставПоказателейМоделейПланированияСрезПоследних.Регистратор.Подразделение КАК Подразделение,
		|	УБ_СоставПоказателейМоделейПланированияСрезПоследних.МодельПланированияЭффективности КАК МодельПланированияЭффективности
		|ИЗ
		|	РегистрСведений.УБ_СоставПоказателейМоделейПланирования.СрезПоследних(, ПоказательЭффективности = &ПоказательЭффективности) КАК УБ_СоставПоказателейМоделейПланированияСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокГрейдов КАК ВТ_СписокГрейдов
		|		ПО УБ_СоставПоказателейМоделейПланированияСрезПоследних.МодельПланированияЭффективности = ВТ_СписокГрейдов.МодельПланированияЭффективности
		|			И УБ_СоставПоказателейМоделейПланированияСрезПоследних.Грейд = ВТ_СписокГрейдов.Грейд
		|			И УБ_СоставПоказателейМоделейПланированияСрезПоследних.ВерсияГрейда = ВТ_СписокГрейдов.ВерсияГрейда
		|ГДЕ
		|	УБ_СоставПоказателейМоделейПланированияСрезПоследних.Грейд.ВАрхиве = &ВАрхиве";
	
	Запрос.УстановитьПараметр("ПоказательЭффективности", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВАрхиве", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		СписокМоделей.Очистить();
		Если Объект.СостояниеПоказателя = Перечисления.УБ_СостоянияПоказателейЭффективности.Архивный Тогда 
			
			Элементы.СписокМоделей.Видимость = Истина;
			Пока Выборка.Следующий()Цикл 
				СтрокаТЧ = СписокМоделей.Добавить();
				СтрокаТЧ.Регистратор = Выборка.Регистратор;  
				СтрокаТЧ.Подразделение = Выборка.Подразделение;
				СтрокаТЧ.МодельМатериальнойМотивации = Выборка.МодельПланированияЭффективности;
				СтрокаТЧ.Грейд = Выборка.Грейд;				
			КонецЦикла;
						
		КонецЕсли;
	Иначе Элементы.СписокМоделей.Видимость = Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗависимостей(Команда)
	ОбновитьСписокЗависимостейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПоказателяПриИзменении(Элемент)
	СостояниеПоказателяПриИзмененииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура СостояниеПоказателяПриИзмененииНаСервере()
	Если Объект.СостояниеПоказателя = Перечисления.УБ_СостоянияПоказателейЭффективности.Архивный Тогда
		ОбновитьСписокЗависимостейНаСервере(); 
	Иначе
		Элементы.СписокМоделей.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантРасчетаЗначенияПланаПриИзменении(Элемент)
	
	Если Объект.ВариантРасчетаЗначенияПлана = ПредопределенноеЗначение("Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя") Тогда
		Элементы.РедактироватьСхемуКомпоновкиДанныхПлана.Видимость = Истина;
	Иначе	
		Элементы.РедактироватьСхемуКомпоновкиДанныхПлана.Видимость = Ложь;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРасчетаЗначенияФактаПриИзменении(Элемент)
	
	Если Объект.ВариантРасчетаЗначенияФакта = ПредопределенноеЗначение("Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя") Тогда
		Элементы.РедактироватьСхемуКомпоновкиДанныхФакта.Видимость = Истина;
	Иначе	
		Элементы.РедактироватьСхемуКомпоновкиДанныхФакта.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище()
	
	Запись = ПолучитьПоследнююАктуальнуюЗапись(Объект.Ссылка);
	Если ЗначениеЗаполнено(Запись) Тогда
		Адреса = РегистрыСведений.УБ_СхемыСбораДанныхПоказателейЭффективности.АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(Запись);
	КонецЕСли;	
	Возврат Адреса;
	
КонецФункции

&НаСервере
Функция ПолучитьПоследнююАктуальнуюЗапись(ПоказательЭффективности)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.Период КАК Период,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ПоказательЭффективности КАК ПоказательЭффективности,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.СхемаКомпоновкиДанныхПлана КАК СхемаКомпоновкиДанныхПлана,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ХранилищеСхемыКомпоновкиДанныхПлана КАК ХранилищеСхемыКомпоновкиДанныхПлана,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ХранилищеНастроекКомпоновкиДанныхПлана КАК ХранилищеНастроекКомпоновкиДанныхПлана,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.СхемаКомпоновкиДанныхФакта КАК СхемаКомпоновкиДанныхФакта,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ХранилищеСхемыКомпоновкиДанныхФакта КАК ХранилищеСхемыКомпоновкиДанныхФакта,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ХранилищеНастроекКомпоновкиДанныхФакта КАК ХранилищеНастроекКомпоновкиДанныхФакта,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ОписаниеУстановкиПлана КАК ОписаниеУстановкиПлана,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ОписаниеПодсчетаФакта КАК ОписаниеПодсчетаФакта,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ОписаниеИнструментовДляАнализа КАК ОписаниеИнструментовДляАнализа,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ВариантРасчетаЗначенияПлана КАК ВариантРасчетаЗначенияПлана,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ВариантРасчетаЗначенияФакта КАК ВариантРасчетаЗначенияФакта,
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ПериодСбораДанных КАК ПериодСбораДанных
	               |ИЗ
	               |	РегистрСведений.УБ_СхемыСбораДанныхПоказателейЭффективности.СрезПоследних(&ДатаСреза, ) КАК УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних
	               |ГДЕ
	               |	УБ_СхемыСбораДанныхПоказателейЭффективностиСрезПоследних.ПоказательЭффективности = &ПоказательЭффективности";
	Запрос.УстановитьПараметр("ПоказательЭффективности",ПоказательЭффективности);
	Запрос.УстановитьПараметр("ДатаСреза",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

#КонецОбласти
