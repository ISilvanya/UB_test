Процедура ЗаполнитьПоНастройкамНаСервере(Объект, КлючСвязи = Неопределено)  Экспорт  
	мОбъект = Объект;    
	Документы.УБ_ПланированиеЦелейИПоказателей.ПодготовитьТаблицуПоказателиПоПериодам(мОбъект, КлючСвязи);
    КопироватьДанныеФормы(мОбъект, Объект);
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма) Экспорт

	Форма.УсловноеОформление.Элементы.Очистить();
	
	Если НЕ Форма.Элементы.Найти("ПоказателиПоПериодамДатаНачала") = Неопределено Тогда
		//ГОД
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоказателиПоПериодамДатаНачала");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Показатели.ПериодичностьПланирования", ВидСравненияКомпоновкиДанных.Равно, Перечисления.УБ_ПериодыРасчетаМоделиПланирования.Год);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=гггг");
		
		//КВАРТАЛ                                          
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоказателиПоПериодамДатаНачала");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Показатели.ПериодичностьПланирования", ВидСравненияКомпоновкиДанных.Равно, Перечисления.УБ_ПериодыРасчетаМоделиПланирования.Квартал);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=КККК гггг");
		
		
		//МЕСЯЦ                                            
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоказателиПоПериодамДатаНачала");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Показатели.ПериодичностьПланирования", ВидСравненияКомпоновкиДанных.Равно, Перечисления.УБ_ПериодыРасчетаМоделиПланирования.Месяц);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ММММ.гггг");  
		
		//ДЕНЬ                                            
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоказателиПоПериодамДатаНачала");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Показатели.ПериодичностьПланирования", ВидСравненияКомпоновкиДанных.Равно, Перечисления.УБ_ПериодыРасчетаМоделиПланирования.День);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy");

		
	КонецЕсли;     
	
	Если НЕ Форма.Элементы.Найти("Назначения") = Неопределено Тогда

		////по компании                                      
		//ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Назначения");
		//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		//	"Объект.Назначения.Назначение", ВидСравненияКомпоновкиДанных.Содержит,  "Компания");
		//
		//ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПользовательВыбранный);
		//ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Форма.Элементы.НазначенияНазначение.Шрифт,,,Истина)); 
	КонецЕсли;  
	
	//представление поля Настройки контроля
	Если НЕ Форма.Элементы.Найти("ПоказателиНастройкиКонтроля") = Неопределено Тогда
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоказателиНастройкиКонтроля");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Показатели.НастройкиКонтроляЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Истина);    
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст","<изменить>");
		

		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоказателиНастройкиКонтроля");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Показатели.НастройкиКонтроляЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	    ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст","<не определены>");
	КонецЕсли;
	
КонецПроцедуры	
  
Процедура ДобавитьПодразделенияПоДолжности(ДопустимаяПринадлежностьПоказателя, Отбор) Экспорт
	ШР = УБ_КадровыйУчет.ШтатноеРасписание(отбор);		      
	Выборка = ШР.Выбрать();
	Пока Выборка.Следующий() Цикл

		ДопустимаяПринадлежностьПоказателя.Добавить(Выборка.Подразделение);						
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// Процедура НазначениеТип
//
// Описание:проверяет, возможно ли использовать показатель для назначения
//
//
// Параметры (название, тип, дифференцированное значение)
// показатель - Соответствие значений типа СправочникСсылка.УБ_ПоказателиЭффективности (важен только ключ)
// Назначение - значение из определяемого Типа УБ_НазначенияПоказателей
// ПолеЭлемента - поле Показатели   
// ДопустимаяПринадлежностьПоказателя - Массив, хранится в реквизите формы-источника события
Функция показательСоответствуетНазначению(ДопустимаяПринадлежностьПоказателя, показатель, Назначение) Экспорт
	
	Возврат  НЕ ДопустимаяПринадлежностьПоказателя.Найти(УБ_ОбщегоНазначенияКлиентВызовСервера.ЗначениеРеквизитаОбъекта(показатель, "ПринадлежностьПоказателя")) = Неопределено; 
	    
КонецФункции//ПроверитьСоответствиеПоказателяНазначению

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ОпределитьТекущееНазначение
//
// Описание: устанавливает значение реквизита формы в зависимости от типа назначения, с которым ведется работа в данный момент
//
//
// Параметры (название, тип, дифференцированное значение)
//
Функция ОпределитьТекущееНазначение(Назначение) Экспорт
    Если ТипЗнч(Назначение) = ТипЗнч(УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение")) Тогда
		Возврат	"Подразделение";
	ИначеЕсли ТипЗнч(Назначение) = ТипЗнч(УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Организация")) Тогда
		Возврат	 "Организация";	
	ИначеЕсли ТипЗнч(Назначение) = ТипЗнч(УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Должность")) Тогда
		Возврат	 "Должность";
	ИначеЕсли ТипЗнч(Назначение) = ТипЗнч(УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Проект")) Тогда
		Возврат	 "Проект";
	ИначеЕсли ТипЗнч(Назначение) = ТипЗнч(УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Сотрудник")) Тогда
		Возврат	"Сотрудник";
	ИначеЕсли ТипЗнч(Назначение) = ТипЗнч(УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Компания")) Тогда 
		Возврат	"Компания";
	Иначе
		Возврат Неопределено
	КонецЕсли; 
КонецФункции //ОпределитьТекущееНазначение

Процедура УстановитьОграничениеТипаЗначения(Назначение, ПолеЗначения) Экспорт
	ТипЗначенияПоказателя = УБ_ОбщегоНазначенияКлиентВызовСервера.ЗначениеРеквизитаОбъекта(Назначение, "ТипЗначенияПоказателя"); 
	Если ТипЗначенияПоказателя = "Строка" и НЕ ТипЗнч(ПолеЗначения) = Тип("Строка") Тогда
		ПолеЗначения= "";
	ИначеЕсли  ТипЗначенияПоказателя= "Число" и НЕ ТипЗнч(ПолеЗначения) = Тип("Число") Тогда
		ПолеЗначения = 0.000;
	ИначеЕсли ТипЗначенияПоказателя = "Булево" и НЕ ТипЗнч(ПолеЗначения) = Тип("Булево") Тогда
		ПолеЗначения = Ложь;
	КонецЕсли;
КонецПроцедуры

// Возвращает массив ссылок показателей различных типов, 
// имеющих отношение к выбранному значению согласно правилам наследования
// ...  
// Дата– Дата - для получения кадровых данных сотрудника
// Параметры - Структура:
// Назначение		 – 	СправочникСсылка.УБ_Подразделения, СправочникСсылка.Проекты, 
//					   	СправочникСсылка.Организации, СправочникСсылка.Должности, СправочникСсылка.Сотрудники
//						СправочникСсылка.УБ_Сотрудники, СправочникСсылка.УБ_Компании , СправочникСсылка.УБ_Должности
//						Массив СправочникСсылка.Сотрудники, СправочникСсылка.УБ_Сотрудники
// ТекущееЗначение - Строка - строковое представление назначений, принятое в подсистеме
// БезНаследования  - Булево - нужно ли для Назначение = Сотрудник добавлять Показатели по иерархии подразделений
//							  в дашборде - не нужно для планируемых Показателей, в других случаях пока всегда нужно,
//							  в том числе в дашборде для данных факта по показателям, которые не планируются

Функция ОпределитьДопустимуюПринадлежностьПоказателя(Дата, Параметры) Экспорт
	перем БезНаследования;
	Назначение = Параметры.Назначение;
	ТекущееНазначение = Параметры.ТекущееНазначение;  
	БезНаследования = Параметры.Свойство("БезНаследования", БезНаследования);
	
	ДопустимаяПринадлежностьПоказателя = Новый Массив;
	
	Если ТекущееНазначение = "Подразделение" Тогда
		ДобавитьРекурсивно(Назначение, ДопустимаяПринадлежностьПоказателя);
		ДопустимаяПринадлежностьПоказателя.Добавить(УБ_ОбщегоНазначенияПовтИсп.ЗначениеРеквизитаПоУмолчанию("Компания"));
	ИначеЕсли ТекущееНазначение = "Проект" Тогда //TODO ООО 27.10.2021  у проектов отбор будет по участникам
	   	ДопустимаяПринадлежностьПоказателя.Добавить(Назначение);
	ИначеЕсли ТекущееНазначение = "Организация" Тогда                                                 
		ДопустимаяПринадлежностьПоказателя.Добавить(Назначение);	
		ДопустимаяПринадлежностьПоказателя.Добавить(УБ_ОбщегоНазначенияПовтИсп.ЗначениеРеквизитаПоУмолчанию("Компания"));
	ИначеЕсли ТекущееНазначение = "Должность" Тогда                                                 
		ДопустимаяПринадлежностьПоказателя.Добавить(Назначение);	
		УБ_ПланированиеПоказателейСервер.ДобавитьПодразделенияПоДолжности(ДопустимаяПринадлежностьПоказателя, Новый Структура("Должность", Назначение));
	ИначеЕсли ТекущееНазначение = "Сотрудник" Тогда 
		Если Не БезНаследования Тогда
			//для него могут быть личные Показатели, Показатели должности и Показатели подразделения	         
			Если Не ТипЗнч(Назначение) = Тип("Массив") Тогда
				мНазначение = Новый Массив(1);
				мНазначение[0] = Назначение;
			Иначе
				мНазначение = Назначение;
			КонецЕсли;                              
			Если Параметры.Свойство("ДатаКадровыхДанных") Тогда
				КадровыеДанные = УБ_КадровыйУчет.КадровыеДанныеСотрудников(мНазначение, Параметры.ДатаКадровыхДанных); 
			Иначе	
				КадровыеДанные = УБ_КадровыйУчет.КадровыеДанныеСотрудников(мНазначение, Дата); 	
			КонецЕсли;
			
			Для каждого ТекущиеКадровыеДанные Из КадровыеДанные Цикл
				Подразделение = ТекущиеКадровыеДанные.Подразделение;
				Должность = ТекущиеКадровыеДанные.Должность;
				ДопустимаяПринадлежностьПоказателя.Добавить(Подразделение);	
				ДопустимаяПринадлежностьПоказателя.Добавить(Должность);	
				ДобавитьРекурсивно(Подразделение.Родитель, ДопустимаяПринадлежностьПоказателя);
			КонецЦикла;
		Для каждого Элемент Из мНазначение Цикл
			ДопустимаяПринадлежностьПоказателя.Добавить(Элемент);	
		КонецЦикла;	
		Иначе
			ДопустимаяПринадлежностьПоказателя.Добавить(Назначение);		
		КонецЕсли;
		
	ИначеЕсли ТекущееНазначение = "Компания" Тогда                     
		ДопустимаяПринадлежностьПоказателя.Добавить(УБ_ОбщегоНазначенияПовтИсп.ЗначениеРеквизитаПоУмолчанию("Компания"));
	КонецЕсли;
	
	Возврат ДопустимаяПринадлежностьПоказателя;
	
КонецФункции       

Процедура ПроверитьСоответствиеНазначенийИПоказателей(ТЧ, Период, Отказ)     Экспорт                         
	
	СообщениеОбОшибке = НСтр("ru = 'Показатель «%1» не принадлежит назначению %2.'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_ТЧ.показатель КАК показатель,
	|	ВТ_ТЧ.Назначение КАК Назначение
	|ПОМЕСТИТЬ ВТ_ТЧ
	|ИЗ
	|	&ВТ_ТЧ КАК ВТ_ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТЧ.показатель КАК показатель,
	|	ВТ_ТЧ.Назначение КАК Назначение
	|ИЗ
	|	ВТ_ТЧ КАК ВТ_ТЧ
	|ИТОГИ ПО
	|	Назначение";                 

	Запрос.УстановитьПараметр("ВТ_ТЧ", ТЧ);
	РезультатЗапроса = Запрос.Выполнить();    
	ВыборкаНазначение = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНазначение.Следующий() Цикл
		ТекущееНазначение = УБ_ПланированиеПоказателейСервер.ОпределитьТекущееНазначение(ВыборкаНазначение.Назначение);
		ДопустимаяПринадлежностьПоказателя = УБ_ПланированиеПоказателейСервер.ОпределитьДопустимуюПринадлежностьПоказателя(Период, 
											 					Новый Структура("Назначение, ТекущееНазначение", ВыборкаНазначение.Назначение, ТекущееНазначение));
		Выборка = ВыборкаНазначение.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ УБ_ПланированиеПоказателейСервер.показательСоответствуетНазначению(ДопустимаяПринадлежностьПоказателя, Выборка.показатель, ВыборкаНазначение.Назначение) Тогда
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, Выборка.показатель, ВыборкаНазначение.Назначение));//указать номер строки?
				Отказ = Истина;
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;   
		
КонецПроцедуры

Процедура ДобавитьРекурсивно(Знач Подразделение, ДопустимаяПринадлежностьПоказателя, УчитыватьСвойствоУчаствуютНижестоящиеПодразделения = Ложь)
	
	Если ЗначениеЗаполнено(Подразделение) Тогда      
		ДопустимаяПринадлежностьПоказателя.Добавить(Подразделение);			
    	Подразделение = Подразделение.Родитель;
		ДобавитьРекурсивно(Подразделение, ДопустимаяПринадлежностьПоказателя);
    КонецЕсли;
    
  КонецПроцедуры
  
//заполняет структуру отбора для форм выбора Назначения в зависимости от точки вызова
Процедура ЗаполнитьОтбор(Отбор, ТипЗначения, Организация = Неопределено)  Экспорт
	
	// ШОО++ 24.08.2022
	Если Не ЗначениеЗаполнено(Организация) Тогда 
		Возврат;
	КонецЕсли;   
	// ШОО-- 24.08.2022
	
	Если УБ_ОбщегоНазначения.ЭтоПодразделение(ТипЗначения) Тогда
		//если в качестве назначения выбрано Подразделение
		Отбор.Вставить("Организация", Организация);
	ИначеЕсли УБ_ОбщегоНазначения.ЭтоСотрудник(ТипЗначения) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УБ_Подразделения.Ссылка КАК Подразделение,
		|	УБ_Подразделения.Владелец КАК Владелец,
		|	УБ_ДанныеДляПодбораСотрудников.Сотрудник КАК Ссылка
		|ИЗ
		|	Справочник.УБ_Подразделения КАК УБ_Подразделения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УБ_ДанныеДляПодбораСотрудников КАК УБ_ДанныеДляПодбораСотрудников
		|		ПО УБ_Подразделения.Ссылка = УБ_ДанныеДляПодбораСотрудников.Подразделение
		|ГДЕ
		|	УБ_Подразделения.Владелец = &Владелец");
		УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
		Запрос.УстановитьПараметр("Владелец", Организация);
		МассивПодразделений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Отбор.Вставить("Ссылка", МассивПодразделений);
		
	КонецЕсли;
		
КонецПроцедуры
