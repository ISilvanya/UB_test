
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьДанныеДляПодбораСотрудников(СотрудникиКОбновлению = Неопределено, ОтключитьБизнесЛогику = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Если СотрудникиКОбновлению = Неопределено Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка
			|ИЗ
			|	Справочник.УБ_Сотрудники КАК Сотрудники";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		Иначе
			Сотрудники = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
	Иначе
		Сотрудники = ОбщегоНазначения.СкопироватьРекурсивно(СотрудникиКОбновлению);
	КонецЕсли;
	
	Если Сотрудники.Количество() > 0 Тогда
		РегистрыСведений.УБ_ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораСотрудников(
			Сотрудники, ОтключитьБизнесЛогику);
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.Код КАК Код,
		|	Сотрудники.Наименование КАК Наименование,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
		|	Сотрудники.ВАрхиве КАК ВАрхиве
		|ИЗ
		|	Справочник.УБ_Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБ_ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|		ПО Сотрудники.Ссылка = ДанныеДляПодбораСотрудников.Сотрудник
		|ГДЕ
		|	ЕСТЬNULL(ДанныеДляПодбораСотрудников.Начало, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЕСТЬNULL(ДанныеДляПодбораСотрудников.Окончание, ДАТАВРЕМЯ(3999, 12, 31)) = ДАТАВРЕМЯ(3999, 12, 31)";
	
	Если СотрудникиКОбновлению <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("СотрудникиКОбновлению",СотрудникиКОбновлению);
		Запрос.Текст = Запрос.Текст + "
			|	И Сотрудники.Ссылка В (&СотрудникиКОбновлению)";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Ссылка");
			СтруктураДанных.Вставить("Код");
			СтруктураДанных.Вставить("Наименование");
			СтруктураДанных.Вставить("ФизическоеЛицо");
			СтруктураДанных.Вставить("ГоловнаяОрганизация");
			СтруктураДанных.Вставить("ПометкаУдаления");
			СтруктураДанных.Вставить("ВАрхиве");
						
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
			
			РегистрыСведений.УБ_ДанныеДляПодбораСотрудников.ДобавитьДанныеНовогоСотрудника(
				СтруктураДанных, ОтключитьБизнесЛогику);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, Записывать) Экспорт
	
	Если КадровыеДвижения.Количество() Тогда
		Движения.УБ_КадроваяИсторияСотрудников.Записывать = Истина;
	КонецЕсли;
	
	Регистратор = Движения.УБ_КадроваяИсторияСотрудников.Отбор.Регистратор.Значение;
	
	ПозицияЕсть = (КадровыеДвижения.Колонки.Найти("Позиция") <> Неопределено);
	ПодразделениеЕсть = (КадровыеДвижения.Колонки.Найти("Подразделение") <> Неопределено);
	ДолжностьЕсть = (КадровыеДвижения.Колонки.Найти("Должность") <> Неопределено);
	
	ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, Регистратор);
	
	Если ПозицияЕсть Тогда
		
		ПозицииМассив = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Позиция", Истина);
		ПодразделенияДолжностиПозиций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПозицииМассив, "Подразделение, Должность");
		
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из КадровыеДвижения Цикл
		
		НоваяСтрока = Движения.УБ_КадроваяИсторияСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаДанных.Период;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		НоваяСтрока.Организация = СтрокаДанных.Организация;
		
		Если СтрокаДанных.ВидСобытия = Перечисления.УБ_ВидыКадровыхСобытий.Увольнение Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекущееПодразделение) Тогда
				НоваяСтрока.Подразделение = СтрокаДанных.ТекущееПодразделение;
			ИначеЕсли ПодразделениеЕсть Тогда
				НоваяСтрока.Подразделение = СтрокаДанных.Подразделение;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекущаяПозиция) Тогда
				НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.ТекущаяПозиция;
			ИначеЕсли ПозицияЕсть Тогда
				НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.Позиция;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекущаяДолжность) Тогда
				НоваяСтрока.Должность = СтрокаДанных.ТекущаяДолжность;
			ИначеЕсли ДолжностьЕсть Тогда
				НоваяСтрока.Должность = СтрокаДанных.Должность;
			КонецЕсли;
			
		Иначе
			
			Если ПодразделениеЕсть И (Не ПозицияЕсть Или Не ЗначениеЗаполнено(СтрокаДанных.Позиция)) Тогда
				НоваяСтрока.Подразделение = СтрокаДанных.Подразделение;
			Иначе
				НоваяСтрока.Подразделение = СтрокаДанных.ТекущееПодразделение;
			КонецЕсли;
			
			Если ДолжностьЕсть И (Не ПозицияЕсть Или Не ЗначениеЗаполнено(СтрокаДанных.Позиция)) Тогда
				НоваяСтрока.Должность = СтрокаДанных.Должность;
			Иначе
				НоваяСтрока.Должность = СтрокаДанных.ТекущаяДолжность;
			КонецЕсли;
			
			Если ПозицияЕсть Тогда
				
				НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.Позиция;
				
				Если ЗначениеЗаполнено(СтрокаДанных.Позиция) Тогда
					НоваяСтрока.Подразделение = ПодразделенияДолжностиПозиций[СтрокаДанных.Позиция].Подразделение;
					НоваяСтрока.Должность = ПодразделенияДолжностиПозиций[СтрокаДанных.Позиция].Должность;
				КонецЕсли;
				
			Иначе
				НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.ТекущаяПозиция;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.ВидСобытия = СтрокаДанных.ВидСобытия;
		
	КонецЦикла;
	
	Если Записывать И Движения.УБ_КадроваяИсторияСотрудников.Записывать Тогда
		Движения.УБ_КадроваяИсторияСотрудников.Записать();
		Движения.УБ_КадроваяИсторияСотрудников.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция МаксимальнаяДата() Экспорт
	
	Возврат Дата(3999, 12, 31, 23, 59, 59);
	
КонецФункции

Функция КадровыеДанныеСотрудников(Знач СписокСотрудников, Знач ДатаПолученияДанных = '00010101') Экспорт
	
	Если ДатаПолученияДанных = '00010101' Тогда
		ДатаПолученияДанных = ТекущаяДата();
	КонецЕсли;
	
	Если ТипЗнч(СписокСотрудников) <> Тип("Массив") Тогда
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокСотрудников);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаКадровыхДанныхСотрудников();
	
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	Возврат КадровыеДанныеСотрудников;
	
КонецФункции

Функция ТекстЗапросаКадровыхДанныхСотрудников() Экспорт

	Текст =        
	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	&ДатаПолученияДанных КАК Период,
		|	Сотрудники.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	Справочник.УБ_Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудников)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МоделиПланирования.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(МоделиПланирования.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыМоделейПланированияСотрудников
		|ИЗ
		|	РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(
		|			&ДатаПолученияДанных,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					Сотрудники.Ссылка КАК Ссылка
		|				ИЗ
		|					ВТ_Сотрудники КАК Сотрудники)) КАК МоделиПланирования
		|
		|СГРУППИРОВАТЬ ПО
		|	МоделиПланирования.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДляПодбора.Сотрудник КАК Сотрудник,
		|	ДанныеДляПодбора.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДляПодбора.Организация КАК Организация,
		|	ДанныеДляПодбора.Подразделение КАК Подразделение,
		|	ДанныеДляПодбора.Должность КАК Должность,
		|	ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	МоделиПланирования.МодельПланированияЭффективности КАК МодельПланированияЭффективности,
		|	МоделиПланирования.Грейд КАК Грейд
		|ИЗ
		|	РегистрСведений.УБ_ДанныеДляПодбораСотрудников КАК ДанныеДляПодбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК Сотрудники
		|		ПО ДанныеДляПодбора.Сотрудник = Сотрудники.Ссылка
		|			И (ДанныеДляПодбора.ИдентификаторЗаписи В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ДанныеДляПодбораСотрудниковОтбор.ИдентификаторЗаписи
		|				ИЗ
		|					РегистрСведений.УБ_ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудниковОтбор
		|				ГДЕ
		|					ДанныеДляПодбораСотрудниковОтбор.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.УБ_ВидыКадровыхСобытий.Увольнение)
		|					И ДанныеДляПодбораСотрудниковОтбор.Сотрудник = ДанныеДляПодбора.Сотрудник
		|					И ДанныеДляПодбораСотрудниковОтбор.Начало <= &ДатаПолученияДанных
		|					И (ДанныеДляПодбораСотрудниковОтбор.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|						ИЛИ ДанныеДляПодбораСотрудниковОтбор.Окончание >= &ДатаПолученияДанных)
		|				УПОРЯДОЧИТЬ ПО
		|					ДанныеДляПодбораСотрудниковОтбор.Начало УБЫВ,
		|					ДанныеДляПодбораСотрудниковОтбор.Организация,
		|					ДанныеДляПодбораСотрудниковОтбор.Подразделение))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(
		|				&ДатаПолученияДанных,
		|				(Сотрудник, Период) В
		|					(ВЫБРАТЬ
		|						Периоды.Сотрудник КАК Сотрудник,
		|						Периоды.Период КАК Период
		|					ИЗ
		|						ВТ_ПериодыМоделейПланированияСотрудников КАК Периоды)) КАК МоделиПланирования
		|		ПО ДанныеДляПодбора.Сотрудник = МоделиПланирования.Сотрудник
		|			И (НЕ ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию.Закрыта
		|				ИЛИ &ДатаПолученияДанных < ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию.ДатаЗакрытия)";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Текст);		
	Возврат Текст;
	
КонецФункции

Процедура СостояниеМоделиПланированияЭффективности(МодельПланированияЭффективности, ЭлементДекорация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МоделиПланированияЭффективности.Ссылка КАК МодельПланированияЭффективности
		// ШОО откл, этого реквизита нет в ШР КА|	РеквизитыШтатноеРасписание.ДатаЗакрытия КАК ДатаЗакрытия
		|ИЗ
		|	Справочник.УБ_МоделиПланированияЭффективности КАК МоделиПланированияЭффективности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ШтатноеРасписание КАК РеквизитыШтатноеРасписание
		|		ПО МоделиПланированияЭффективности.ШтатноеРасписание = РеквизитыШтатноеРасписание.Ссылка
		|ГДЕ
		|	МоделиПланированияЭффективности.Ссылка = &МодельПланированияЭффективности
		|	И РеквизитыШтатноеРасписание.Закрыта";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("МодельПланированияЭффективности", МодельПланированияЭффективности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ЭлементДекорация.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();                     
	ТекстСообщения = НСтр("ru = 'Модель закрыта.'");
	
	//ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//НСтр("ru = 'Модель закрыта с %1'"),
		//Формат(Выборка.ДатаЗакрытия, "ДЛФ=Д"));
	
	ЭлементДекорация.Видимость = Истина;
	ЭлементДекорация.Заголовок = ТекстСообщения;
	
КонецПроцедуры

Функция ПериодРаботыПоПериодуПараметровОткрытияФормыСписка(Параметры) Экспорт
	
	ПериодРаботы = Новый СтандартныйПериод;
	
	Если (ТипЗнч(Параметры) = Тип("Структура") Или ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура"))
		И Параметры.Свойство("Отбор") И Параметры.Отбор <> Неопределено Тогда
		
		ОтборПоПериодуУстановлен = Ложь;
		
		Если Параметры.Отбор.Свойство("НачалоПериодаПримененияОтбора") Тогда
			
			Если ЗначениеЗаполнено(Параметры.Отбор.НачалоПериодаПримененияОтбора) Тогда
				
				ОтборПоПериодуУстановлен = Истина;
				
				ПериодРаботы.ДатаНачала = Параметры.Отбор.НачалоПериодаПримененияОтбора;
				
				Если Параметры.Отбор.Свойство("ОкончаниеПериодаПримененияОтбора")
					И ЗначениеЗаполнено(Параметры.Отбор.ОкончаниеПериодаПримененияОтбора) Тогда
					ПериодРаботы.ДатаОкончания = Параметры.Отбор.ОкончаниеПериодаПримененияОтбора;
				Иначе
					ПериодРаботы.ДатаОкончания = КонецМесяца(ПериодРаботы.ДатаНачала);
				КонецЕсли;
				
			КонецЕсли;
			
			Параметры.Отбор.Удалить("НачалоПериодаПримененияОтбора");
			Параметры.Отбор.Удалить("ОкончаниеПериодаПримененияОтбора");
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("МесяцПримененияОтбора") Тогда
			
			Если Не ОтборПоПериодуУстановлен Тогда
				
				Если ЗначениеЗаполнено(Параметры.Отбор.МесяцПримененияОтбора) Тогда
					
					ОтборПоПериодуУстановлен = Истина;
					
					ПериодРаботы.ДатаНачала = Параметры.Отбор.МесяцПримененияОтбора;
					ПериодРаботы.ДатаОкончания = КонецМесяца(ПериодРаботы.ДатаНачала);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Параметры.Отбор.Удалить("МесяцПримененияОтбора");
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ДатаПримененияОтбора") Тогда
			
			Если Не ОтборПоПериодуУстановлен Тогда
				
				Если ЗначениеЗаполнено(Параметры.Отбор.ДатаПримененияОтбора) Тогда
					
					ОтборПоПериодуУстановлен = Истина;
					
					ПериодРаботы.ДатаНачала = Параметры.Отбор.ДатаПримененияОтбора;
					ПериодРаботы.ДатаОкончания = Параметры.Отбор.ДатаПримененияОтбора;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Параметры.Отбор.Удалить("ДатаПримененияОтбора");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПериодРаботы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция СотрудникиПодразделения
//
// Описание:
// Возвращает сотрудников, принадлежащих подразделению(-ям), переданным в параметре
//
// Параметры (название, тип, дифференцированное значение)
// ДатаПолученияДанных - Дата - необязательный
// Подразделение - СправочникСсылка.Подразделение, Массив
// ВключаяПодчиненные - Булево
// Возвращаемое значение: 
// РезультатЗапроса

Функция СотрудникиПодразделений(ДатаПолученияДанных = Неопределено, Подразделение, ВключаяПодчиненные = Ложь) Экспорт
	
	Если Не ТипЗнч(Подразделение) = Тип("Массив") Тогда
		мПодразделения = Новый Массив(1);
		мПодразделения[0] = Подразделение;
	Иначе
		мПодразделения = Подразделение;
	КонецЕсли;
	Если ДатаПолученияДанных = Неопределено Тогда
		ДатаПолученияДанных = Дата(1,1,1);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ДанныеДляПодбораСотрудников.Сотрудник КАК Сотрудник,
		|	УБ_ДанныеДляПодбораСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УБ_ДанныеДляПодбораСотрудников.Подразделение КАК Подразделение,
		|	УБ_ДанныеДляПодбораСотрудников.Сотрудник.Представление КАК СотрудникПредставление
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	РегистрСведений.УБ_ДанныеДляПодбораСотрудников КАК УБ_ДанныеДляПодбораСотрудников
		|ГДЕ
		|	УБ_ДанныеДляПодбораСотрудников.Подразделение В(&Подразделения)
		|	И НЕ УБ_ДанныеДляПодбораСотрудников.ПометкаУдаления
		|	И НЕ УБ_ДанныеДляПодбораСотрудников.ВАрхиве
		|	И УБ_ДанныеДляПодбораСотрудников.Начало <= &ДатаПолученияДанных
		|	И (УБ_ДанныеДляПодбораСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ УБ_ДанныеДляПодбораСотрудников.Окончание >= &ДатаПолученияДанных)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСотрудники.Сотрудник КАК Сотрудник,
		|	ВТСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Пользователи.Ссылка КАК Пользователь,
		|	ВТСотрудники.Подразделение КАК Подразделение,
		|	ВТСотрудники.СотрудникПредставление КАК СотрудникПредставление
		|ИЗ
		|	ВТСотрудники КАК ВТСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ВТСотрудники.ФизическоеЛицо = Пользователи.ФизическоеЛицо
		|ГДЕ
		|	Пользователи.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				ВТСотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|			ИЗ
		|				ВТСотрудники КАК ВТСотрудники)
		|	И НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.ПометкаУдаления";

	
	Запрос.УстановитьПараметр("Подразделения", мПодразделения);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	Если ВключаяПодчиненные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "В(&Подразделения)", "В ИЕРАРХИИ (&Подразделения)");
		
	КонецЕсли;	
	Возврат Запрос.Выполнить();

КонецФункции //СотрудникиПодразделений

////////////////////////////////////////////////////////////////////////////////
//
// Функция 
//
// Описание:
// Возвращает результат запроса к справочнику УБ_ШтатноеРасписание  
//
// Параметры (название, тип, дифференцированное значение)
// Отбор, Структура - параметры отбора, которые нужно добавить к запросу

// Возвращаемое значение: 
// РезультатЗапроса

Функция ШтатноеРасписание(Отбор) Экспорт
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
		|	УБ_ШтатноеРасписание.Наименование КАК Наименование,
		|	УБ_ШтатноеРасписание.Подразделение КАК Подразделение,
		|	УБ_ШтатноеРасписание.Должность КАК Должность
		|ИЗ
		|	Справочник.УБ_ШтатноеРасписание КАК УБ_ШтатноеРасписание
		|ГДЕ
		|	УБ_ШтатноеРасписание.Утверждена = ИСТИНА";
	
	СхемаЗапроса = Новый СхемаЗапроса;	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Для каждого Элемент Из Отбор Цикл
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(СтрШаблон("%1 = &"+Элемент.Ключ, Элемент.Ключ));
	КонецЦикла;        
	
	ПараметрыЗапроса = СхемаЗапроса.НайтиПараметры();
	
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос = Новый Запрос(ТекстЗапроса);
	Для каждого Элемент Из Отбор Цикл
  		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;        
	
	Возврат Запрос.Выполнить();
		
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ДействующиеРуководителиПодразделений
//
// Описание:
// Возвращает список действующих руководителей подразделений с отбором по параметрам
//
// Параметры (название, тип, дифференцированное значение)
// Период, Дата
// Подразделения, массив
// Возвращаемое значение: 
// Результат запроса
Функция ДействующиеРуководителиПодразделений(Период, Подразделения, БезДелегирования = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РуководителиПодразделений.Пользователь КАК Пользователь,
	|	РуководителиПодразделений.Руководитель КАК Руководитель,
	|	РуководителиПодразделений.Подразделение КАК Подразделение,
	|	РуководителиПодразделений.Руководитель.Представление КАК РуководительПредставление,
	|	Значение(Перечисление.УБ_ИсточникиДоступа.Руководитель) КАК Источник
	|ИЗ
	|	РегистрСведений.УБ_НазначенныеРуководителиПодразделений.СрезПоследних(&Период, Подразделение В (&Подразделение)) КАК РуководителиПодразделений";
	
	Если Не БезДелегирования Тогда
		Запрос.Текст = Запрос.Текст+	
	"
	|ОБЪЕДИНИТЬ ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДелегированныеСотрудники.ЗаместительРуководителя,
	|	ДелегированныеСотрудники.Сотрудник,
	|	ДелегированныеСотрудники.Подразделение,
	|	ДелегированныеСотрудники.Сотрудник.Представление,
	|	Значение(Перечисление.УБ_ИсточникиДоступа.Делегирование)
	|ИЗ
	|	РегистрСведений.УБ_ДелегированныеСотрудникиПодразделения.СрезПоследних(
	|			&Период,
	|			Подразделение В (&Подразделение)
	|				И Сотрудник = ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка)) КАК ДелегированныеСотрудники
	|ГДЕ
	|	ДелегированныеСотрудники.ДатаОкончания >= &Период";
	КонецЕсли;
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Подразделение", Подразделения);
	
	Возврат Запрос.Выполнить();

КонецФункции

// Функция ПользовательРуководитПодразделениями
//
// Описание:
// Возвращает список подразделений, которыми руководит пользователь (без иерархии)
//
// Параметры (название, тип, дифференцированное значение)
// Пользователь - СправочникСсылка.Пользователи
// Период - Дата
// БезДелегирования - Булево, не обязательный
// Возвращаемое значение: 
// Массив

Функция ПользовательРуководитПодразделениями(Пользователь = Неопределено, Период = Неопределено, Параметры) Экспорт
	
	Если Пользователь =  Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если Период =  Неопределено Тогда
		Период = ТекущаяДата();
	КонецЕсли;   
	
	ТекстыУсловий = Новый Массив;  
	ТекстыЗапроса = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РуководителиПодразделений.Пользователь КАК Пользователь,
		|	РуководителиПодразделений.Руководитель КАК Руководитель,
		|	РуководителиПодразделений.Подразделение КАК Подразделение,
		|	РуководителиПодразделений.Руководитель.Представление КАК РуководительПредставление,
		|	Значение(Перечисление.УБ_ИсточникиДоступа.Руководитель) КАК Источник
		|ИЗ
		|	РегистрСведений.УБ_НазначенныеРуководителиПодразделений.СрезПоследних(&Период, Пользователь = (&Пользователь)) КАК РуководителиПодразделений
		|ГДЕ                            
		|   &УсловияОтбора";
	
    Если Параметры.Отбор.Свойство("Владелец") Тогда
		
		ТекстыУсловий.Добавить("РуководителиПодразделений.Подразделение.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Параметры.Отбор.Владелец);//Параметры.НастройкиОтбора.Владелец);

	КонецЕсли;
	
	Если ТекстыУсловий.Количество() = 0 Тогда
		ТекстыЗапроса.Добавить(СтрЗаменить(ТекстЗапроса, "&УсловияОтбора", "(ИСТИНА)"));
	Иначе
		ТекстыЗапроса.Добавить(СтрЗаменить(ТекстЗапроса, "&УсловияОтбора", СтрСоединить(ТекстыУсловий, Символы.ПС + "И ")));
	КонецЕсли; 
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС);


	//Если Не Параметры.БезДелегирования Тогда
	//	Запрос.Текст = Запрос.Текст+	
	//"
	//|ОБЪЕДИНИТЬ ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ДелегированныеСотрудники.ЗаместительРуководителя,
	//|	ДелегированныеСотрудники.Сотрудник,
	//|	ДелегированныеСотрудники.Подразделение,
	//|	ДелегированныеСотрудники.Сотрудник.Представление,
	//|	Значение(Перечисление.УБ_ИсточникиДоступа.Делегирование)
	//|ИЗ
	//|	РегистрСведений.УБ_ДелегированныеСотрудникиПодразделения.СрезПоследних(
	//|			&Период,
	//|			Подразделение В (&Подразделение)
	//|				И Сотрудник = ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка)) КАК ДелегированныеСотрудники
	//|ГДЕ
	//|	ДелегированныеСотрудники.ДатаОкончания >= &Период";
	//КонецЕсли;
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивПодразделений = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивПодразделений.Добавить(Выборка.Подразделение);
	КонецЦикла;
	
	Возврат МассивПодразделений;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
//
// Функция ВсеСотрудникиПользователя
//
// Описание:
// Вовращает Массив значений справочника Сотрудники,
// отобранных по реквизиту Физическое лицо текущего пользователя
// Параметры:
// Пользователь - Неопределено - используется текущий пользователь
//				- СправочникСсылка.Пользователи - указанный авторизованный пользователь
// Возвращаемое значение: 
//  Массив - "СправочникСсылка.Сотрудники".
//
Функция ВсеСотрудникиПользователя(Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;                                                        
	
	ФЛПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УБ_Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(ТекстЗапроса);
	Запрос = Новый Запрос;  
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФЛПользователя);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
                                   
КонецФункции  //ВсеСотрудникиПользователя   

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьПользователяСотрудника
//
// Описание:
// Вовращает первое найденное значение справочника Пользователи,
// отобранных по реквизиту Физическое лицо переданного параметра
// Параметры:
// Сотрудник - СправочникСсылка.Сотрудники, Массив обязательный  
// Возвращаемое значение: 
// РезультатЗапроса, "СправочникСсылка.Пользователи" - в зависимости от переданного параметра
//
Функция ПолучитьПользователяСотрудника(Сотрудник) Экспорт
	Если Не ТипЗнч(Сотрудник) = Тип("Массив") Тогда
		МассивСотрудников = Новый Массив(1);
		МассивСотрудников[0] = Сотрудник;
		ВернутьОдного = Истина;
	Иначе
		МассивСотрудников = Сотрудник;
		ВернутьОдного = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.УБ_Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудник)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	ВТСотрудники.Ссылка КАК Сотрудник,
		|	ВТСотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТСотрудники КАК ВТСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ВТСотрудники.ФизическоеЛицо = Пользователи.ФизическоеЛицо
		|ГДЕ
		|	Пользователи.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				ВТСотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|			ИЗ
		|				ВТСотрудники КАК ВТСотрудники)";     
	Запрос.УстановитьПараметр("Сотрудник", МассивСотрудников);
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(ТекстЗапроса);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если ВернутьОдного Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Пользователь;
	Иначе
		Возврат Результат;
	КонецЕсли;
                                   
КонецФункции  //ВсеСотрудникиПользователя   

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

Процедура УБ_ЗаписатьМодельПланированияСотрудникаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("УБ_МоделиПланированияСотрудника") Тогда
		
		Если Не ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		МоделиПланированияСотрудника = Источник.ДополнительныеСвойства.УБ_МоделиПланированияСотрудника;
		МоделиПланированияСотрудника.ЗаполнитьЗначения(Источник.Ссылка, "КадровыйДокумент");
		
		РегистрыСведений.УБ_МоделиПланированияСотрудников.ЗаписатьМодельПланированияСотрудника(МоделиПланированияСотрудника, Отказ);
		
		// КДА++	
		//НаборЗаписей = РегистрыСведений.УБ_РуководителиПодразделений.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.КадровыйДокумент.Установить(Источник.Ссылка);
		//
		//Для Каждого СтрокаМодели Из МоделиПланированияСотрудника Цикл
		//	
		//	Если Не СтрокаМодели.МодельПланированияЭффективности.РуководящаяДолжность Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	СтрокаНабора = НаборЗаписей.Добавить();
		//	ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаМодели);
		//	СтрокаНабора.Руководитель = СтрокаМодели.Сотрудник;
		//	
		//КонецЦикла;
		//
		//НаборЗаписей.Записать();		
		// КДА--
	КонецЕсли;
	
КонецПроцедуры

Процедура УБ_ОтменаПроведенияКадровыхДокументовОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УБ_МоделиПланированияСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КадровыйДокумент.Установить(Источник.Ссылка);
	НаборЗаписей.Записать();
	
	// КДА++
	//НаборЗаписей = РегистрыСведений.УБ_РуководителиПодразделений.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.КадровыйДокумент.Установить(Источник.Ссылка);
	//НаборЗаписей.Записать();
	// КДА--
КонецПроцедуры

Процедура УБ_ЗаполнитьДанныеДляПодбораСотрудниковПередЗаписью(Источник, Отказ) Экспорт
	
	Если ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизацияПредыдущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ГоловнаяОрганизация");
	Если Источник.ЭтоНовый()
		Или ГоловнаяОрганизацияПредыдущая <> Источник.ГоловнаяОрганизация Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ОбновитьДанныеДляПодбораНового", Истина);
		
	Иначе
		
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка,
			"ГоловнаяОрганизация,Код,Наименование,ФизическоеЛицо,ПометкаУдаления,ВАрхиве");
		Источник.ДополнительныеСвойства.Вставить("ПредыдущиеЗначенияРеквизитов", ПредыдущиеЗначенияРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УБ_ОбновитьДанныеДляПодбораСотрудниковПриЗаписи(Источник, Отказ) Экспорт
	
	Если ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеЗначенияРеквизитов")
		И (Источник.ГоловнаяОрганизация <> Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ГоловнаяОрганизация
			Или Источник.Код <> Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Код
			Или Источник.Наименование <> Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Наименование
			Или Источник.ПометкаУдаления <> Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ПометкаУдаления
			Или Источник.ВАрхиве <> Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ВАрхиве) Тогда
		
		РегистрыСведений.УБ_ДанныеДляПодбораСотрудников.ОбновитьДанныеСотрудника(Источник);
	
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбновитьДанныеДляПодбораНового") Тогда
		РегистрыСведений.УБ_ДанныеДляПодбораСотрудников.ДобавитьДанныеНовогоСотрудника(Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура УБ_ОбновитьДанныеДляПодбораСотрудниковПриИзмененииКадровойИсторииПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	ИзменившиесяДанныеКадровойИстории = Источник.ТаблицаИзменившихсяДанныхНабора();
	
	Если ИзменившиесяДанныеКадровойИстории = Неопределено
		Или ИзменившиесяДанныеКадровойИстории.Количество() = 0 Тогда		
		Возврат;
	КонецЕсли;
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Сотрудники.Тип));
	ТаблицаФильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ИзменившиесяДанныеКадровойИстории.Сортировать("Сотрудник", Новый СравнениеЗначений);
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаИзменений Из ИзменившиесяДанныеКадровойИстории Цикл
		Если ПредыдущаяСтрока = Неопределено
			Или ПредыдущаяСтрока.Сотрудник <> СтрокаИзменений.Сотрудник Тогда
			
			СтрокаФильтра = ТаблицаФильтр.Добавить();
			СтрокаФильтра.Сотрудник = СтрокаИзменений.Сотрудник;
			СтрокаФильтра.ДатаНачала = '00010101';
			СтрокаФильтра.ДатаОкончания = МаксимальнаяДата();
			ПредыдущаяСтрока = СтрокаФильтра;
			
		КонецЕсли;
	КонецЦикла;
	
	РегистрыСведений.УБ_ДанныеДляПодбораСотрудников.ОбновитьРегистрДанныеДляПодбораСотрудников(ТаблицаФильтр);
	
	ПроверитьМаксимальноеКоличествоДействующихСотрудников();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтключитьБизнесЛогикуПриЗаписи(Знач Объект)
	
	Возврат Объект.ОбменДанными.Загрузка И (Не Объект.ДополнительныеСвойства.Свойство("ПроверятьБизнесЛогикуПриЗаписи"));
	
КонецФункции

Процедура ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, Регистратор)
	
	ПозицияЕсть = (КадровыеДвижения.Колонки.Найти("Позиция") <> Неопределено);
	ПодразделениеЕсть = (КадровыеДвижения.Колонки.Найти("Подразделение") <> Неопределено);
	ДолжностьЕсть = (КадровыеДвижения.Колонки.Найти("Должность") <> Неопределено);
	
	ПолучатьКадровыеДанные = Не (ПодразделениеЕсть
		И ПозицияЕсть
		И ДолжностьЕсть);
	
	Если Не ПолучатьКадровыеДанные Тогда
		
		Для Каждого СтрокаДвижений Из КадровыеДвижения Цикл
			Если СтрокаДвижений.ВидСобытия = Перечисления.УБ_ВидыКадровыхСобытий.Перемещение Тогда
				ПолучатьКадровыеДанные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ШтатноеРасписаниеОписаниеТипов = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_ШтатноеРасписание.Тип);
	ПодразделенияОписаниеТипов = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Подразделения.Тип);
	ДолжностиОписаниеТипов = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Должности.Тип);
	
	КадровыеДвижения.Колонки.Добавить("ТекущаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДвижения.Колонки.Добавить("ТекущаяПозиция", ШтатноеРасписаниеОписаниеТипов);
	КадровыеДвижения.Колонки.Добавить("ТекущееПодразделение", ПодразделенияОписаниеТипов);
	КадровыеДвижения.Колонки.Добавить("ТекущаяДолжность", ДолжностиОписаниеТипов);
	
	ОрганизацииПозиций = Неопределено;
	ОрганизацииПодразделений = Неопределено;
	
	Если ПозицияЕсть Или ПодразделениеЕсть Тогда
		
		Если ПозицияЕсть Тогда
			Позиции = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Позиция", Истина);
			ОрганизацииПозиций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Позиции, "Владелец");
		КонецЕсли;
		
		Если ПодразделениеЕсть Тогда
			Подразделения = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Подразделение", Истина);
			ОрганизацииПодразделений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Подразделения, "Владелец");
		КонецЕсли;
		
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Сотрудники.Тип));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаДвижений Из КадровыеДвижения Цикл
		
		Если ПозицияЕсть И ЗначениеЗаполнено(СтрокаДвижений.Позиция) Тогда
			СтрокаДвижений.Организация = ОрганизацииПозиций[СтрокаДвижений.Позиция];
		ИначеЕсли ПодразделениеЕсть И ЗначениеЗаполнено(СтрокаДвижений.Подразделение) Тогда
			СтрокаДвижений.Организация = ОрганизацииПодразделений[СтрокаДвижений.Подразделение];
		КонецЕсли;
		
		Если ПолучатьКадровыеДанные Тогда
			НоваяСтрока = ИзмеренияДаты.Добавить();
			НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
			НоваяСтрока.Период = СтрокаДвижений.Период;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмеренияДаты.Количество() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИзмеренияДаты.Сотрудник КАК Сотрудник,
			|	ИзмеренияДаты.Период КАК Период
			|ПОМЕСТИТЬ ВТСотрудникиПериод
			|ИЗ
			|	&ИзмеренияДаты КАК ИзмеренияДаты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	СправочникСотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников
			|ИЗ
			|	ВТСотрудникиПериод КАК ТаблицаОтборов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_Сотрудники КАК СправочникСотрудники
			|		ПО ТаблицаОтборов.Сотрудник = СправочникСотрудники.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МАКСИМУМ(ЕСТЬNULL(КадроваяИсторияСотрудников.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаПоследнегоСобытия
			|ПОМЕСТИТЬ ВТКадроваяИсторияСотрудниковПериоды
			|ИЗ
			|	ВТОтборовРазличныхСотрудников КАК ТаблицаОтборов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБ_КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ПО ТаблицаОтборов.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И ТаблицаОтборов.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо
			|			И ТаблицаОтборов.Период >= КадроваяИсторияСотрудников.Период
			|			И КадроваяИсторияСотрудников.Регистратор <> &Регистратор
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаОтборов.Период,
			|	ТаблицаОтборов.Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ФизическоеЛицо,
			|	ДатаПоследнегоСобытия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КадроваяИсторияПериоды.Период КАК Период,
			|	КадроваяИсторияПериоды.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадроваяИсторияСотрудников.Организация КАК ТекущаяОрганизация,
			|	КадроваяИсторияСотрудников.Подразделение КАК ТекущееПодразделение,
			|	КадроваяИсторияСотрудников.Должность КАК ТекущаяДолжность,
			|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ТекущаяПозиция
			|ИЗ
			|	ВТКадроваяИсторияСотрудниковПериоды КАК КадроваяИсторияПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБ_КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ПО КадроваяИсторияПериоды.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И КадроваяИсторияПериоды.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо
			|			И КадроваяИсторияПериоды.ДатаПоследнегоСобытия = КадроваяИсторияСотрудников.Период
			|			И КадроваяИсторияСотрудников.Регистратор <> &Регистратор";
		
		Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтруктураПоиска = Новый Структура("Сотрудник, Период");
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			
			НайденныеСтроки = КадровыеДвижения.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка,
					"ТекущаяОрганизация,
					|ТекущаяПозиция,
					|ТекущееПодразделение,
					|ТекущаяДолжность");
				
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.Организация) Тогда
					НайденнаяСтрока.Организация = Выборка.ТекущаяОрганизация;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

#Область ОбслуживаниеФормКадровыхДокументов
Процедура УстановитьСвязиПараметровВыбора(ЭлементСотрудник, ДоступныНеПринятые = Ложь) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы") Тогда
		
		МассивСвязей = Новый Массив;
		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.МесяцПримененияОтбора", "Объект.ДатаНазначения");
		МассивСвязей.Добавить(НоваяСвязь);
		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ТекущаяОрганизация", "Объект.Организация");
		МассивСвязей.Добавить(НоваяСвязь);
		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ТекущееПодразделение", "Объект.Подразделение");
		МассивСвязей.Добавить(НоваяСвязь);
		
		СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
		
		ЭлементСотрудник.СвязиПараметровВыбора = СвязиПараметровВыбора;
		
	Иначе
		
		НовыйПараметр = Новый ПараметрВыбора("ДоступныНеПринятые", ДоступныНеПринятые);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(НовыйПараметр);
		
		ЭлементСотрудник.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьМаксимальноеКоличествоДействующихСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляПодбораСотрудников.Сотрудник КАК Сотрудник,
		|	МИНИМУМ(ДанныеДляПодбораСотрудников.Начало) КАК ДатаНачала,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДанныеДляПодбораСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|			ИНАЧЕ ДанныеДляПодбораСотрудников.Окончание
		|		КОНЕЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ПериодыРаботыСотрудников
		|ИЗ
		|	РегистрСведений.УБ_ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.УБ_ВидыКадровыхСобытий.Прием)
		|		ИЛИ ДанныеДляПодбораСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.УБ_ВидыКадровыхСобытий.Перемещение)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляПодбораСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыРаботыСотрудников.ДатаНачала КАК ДатаПриема
		|ПОМЕСТИТЬ ВТ_ДатыПриемаСотрудников
		|ИЗ
		|	ВТ_ПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПриемаСотрудников.ДатаПриема КАК ДатаПриема
		|ИЗ
		|	ВТ_ДатыПриемаСотрудников КАК ДатыПриемаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников
		|		ПО ДатыПриемаСотрудников.ДатаПриема МЕЖДУ ПериодыРаботыСотрудников.ДатаНачала И ПериодыРаботыСотрудников.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПриемаСотрудников.ДатаПриема
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПериодыРаботыСотрудников.Сотрудник) > 50";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Достигнут лимит программы на количество действующих сотрудников'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Функция СотрудникЕстьРуководитель(Сотрудник, Организация, НачалоПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РуководителиПодразделений.Пользователь КАК Руководитель
		|ИЗ
		|	РегистрСведений.УБ_НазначенныеРуководителиПодразделений.СрезПоследних(
		|			&Период,
		|			Организация = &Организация) КАК РуководителиПодразделений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДелегированныеСотрудники.ЗаместительРуководителя
		|ИЗ
		|	РегистрСведений.УБ_ДелегированныеСотрудникиПодразделения.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И (Сотрудник = ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка)
		|					ИЛИ Сотрудник = &Сотрудник)) КАК ДелегированныеСотрудники";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Период", НачалоПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Руководитель = Сотрудник Тогда
			возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПереопределитьДатуОтстраненияРуководителя(Сотрудник, Организация, ДатаОтстранения, ПоПодразделению = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УБ_НазначенныеРуководителиПодразделений.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.УБ_НазначенныеРуководителиПодразделений КАК УБ_НазначенныеРуководителиПодразделений
		|ГДЕ
		|	УБ_НазначенныеРуководителиПодразделений.Организация = &Организация
		|	И УБ_НазначенныеРуководителиПодразделений.Руководитель = &Руководитель";
	
	Если ПоПодразделению Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И УБ_НазначенныеРуководителиПодразделений.Подразделение = &Подразделение";
		
		Массив = Новый Массив();
		Массив.Добавить(Сотрудник);
		ДанныеСотрудника = КадровыеДанныеСотрудников(Массив);
		Если ДанныеСотрудника.Количество() >= 1 Тогда
			Подразделение = ДанныеСотрудника[0]["Подразделение"];
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Руководитель", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УБ_НазначенныеРуководителиПодразделений.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
        НаборЗаписей.Прочитать();
		
		Для каждого Запись Из НаборЗаписей Цикл
			
			Если НачалоДня(Запись.ДатаОтстранения) > НачалоДня(ДатаОтстранения) Тогда
				
				Запись.ДатаОтстранения = ДатаОтстранения;
				
			КонецЕсли;
			
        КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
		Если Не Запись.Регистратор.Пустая() Тогда
			
			Документ = Запись.Регистратор.ПолучитьОбъект();
			Документ.ДатаОтстранения = ДатаОтстранения;
			Документ.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти