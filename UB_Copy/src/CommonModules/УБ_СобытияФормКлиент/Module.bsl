////////////////////////////////////////////////////////////////////////////////
// Содержит события форм, вызываемые на клиенте
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма	- УправляемаяФорма - форма, в которой расположена команда
//  Команда	- КомандаФормы - команда формы
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ДанныеДляРасчетаЗарплаты.Форма.ФормаДокумента" Тогда
		
		Если Команда.Имя = "УБ_ЗаполнитьПоказателиРасчетаЗарплаты" Тогда
			ЗаполнитьПоказателиРасчетаЗарплаты(Форма, Команда);
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.ШтатноеРасписание.Форма.ФормаЭлемента" Тогда
		
		Если Команда.Имя = "УБ_СоздатьНовуюМодельПланирования" Тогда
			ОткрытьНовуюМодель(Форма, Команда)
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	//Если Форма.ИмяФормы = "Справочник.ШтатноеРасписание.Форма.ФормаЭлемента" Тогда
	//	
	//	Если Элемент.Имя = "УБ_МодельПланированияЭффективности" Тогда
	//		ОткрытьМодельПланированияЭффективности(Форма, Элемент);
	//	КонецЕсли;
	//	
	//КонецЕсли;                                                                          
	Если Форма.ИмяФормы = "Документ.УБ_НазначениеРуководителя.Форма.ФормаСписка" Тогда
		
		СохраняемыеВНастройкахДанныеМодифицированы = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список,
			"Организация",
			Форма.ОрганизацияОтбор,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ЗначениеЗаполнено(Форма.ОрганизацияОтбор));    
			
			УБ_СобытияФорм.ОрганизацияОтборПриИзмененииНаСервере(Форма);
	
	КонецЕсли;
	
КонецПроцедуры  

Процедура ИзменениеЗначенияОтклонения(структураПараметров, Элемент, Промежуточное = Ложь, Абс = Ложь) Экспорт
	
	Дельта = 0.1;
	типПрямой = ТипРасчетаПрямой(структураПараметров.ТипРасчета);
	
	УсловиеВозврата = ((типПрямой) И (структураПараметров.ПозитивноеОтклонениеНормыОт = 0));
	УсловиеВозврата = (УсловиеВозврата ИЛИ (НЕ(типПрямой) И (структураПараметров.НегативноеОтклонениеНормыДо = 0)));
	
	Если УсловиеВозврата Тогда
		возврат;
	КонецЕсли;
	
	Если Элемент.Имя = "НегативноеОтклонениеНормыДо" Тогда
		
		Если (НЕ типПрямой) Тогда
			Дельта = -Дельта;
		КонецЕсли;
		
		структураПараметров.ПограничноеОтклонениеНормыОт = структураПараметров.НегативноеОтклонениеНормыДо + Дельта;
		ПограничноеОтклонениеНормыОтПриИзменении(структураПараметров, Абс);
		
	Иначе
		
		Если Элемент.Имя = "ПозитивноеОтклонениеНормыОт" Тогда
			
		  	Если типПрямой Тогда
				Дельта = -Дельта;
			КонецЕсли;
			
			структураПараметров.ПограничноеОтклонениеНормыДо = структураПараметров.ПозитивноеОтклонениеНормыОт + Дельта;
			ПограничноеОтклонениеНормыДоПриИзменении(структураПараметров, Абс);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Промежуточное Тогда
		
		Если Элемент.Имя = "ПограничноеОтклонениеНормыДо" Тогда
			ПограничноеОтклонениеНормыДоПриИзменении(структураПараметров, Абс);
		Иначе
			ПограничноеОтклонениеНормыОтПриИзменении(структураПараметров, Абс);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Абс Тогда
		РассчитатьАбсолютныеЗначения(структураПараметров);
	КонецЕсли;
	  
КонецПроцедуры

Процедура ПограничноеОтклонениеНормыОтПриИзменении(Объект, Абс)
	Дельта = 0.1;
	типПрямой = ТипРасчетаПрямой(Объект.ТипРасчета);
	
	Если типПрямой Тогда
		
		Объект.НегативноеОтклонениеНормыДо = Объект.ПограничноеОтклонениеНормыОт - Дельта;
		
		Если Объект.ПограничноеОтклонениеНормыОт >= Объект.ПограничноеОтклонениеНормыДо Тогда
			
			Объект.ПограничноеОтклонениеНормыДо = Объект.ПограничноеОтклонениеНормыОт + Дельта;
			
			Если Объект.ПограничноеОтклонениеНормыДо >= Объект.ПозитивноеОтклонениеНормыОт Тогда
				Объект.ПозитивноеОтклонениеНормыОт = Объект.ПограничноеОтклонениеНормыДо + Дельта;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Объект.НегативноеОтклонениеНормыДо = Объект.ПограничноеОтклонениеНормыОт + Дельта;
		Если Объект.ПограничноеОтклонениеНормыОт <= Объект.ПограничноеОтклонениеНормыДо Тогда
			
			Объект.ПограничноеОтклонениеНормыДо = Объект.ПограничноеОтклонениеНормыОт - Дельта;
			
			Если Объект.ПограничноеОтклонениеНормыДо <= Объект.ПозитивноеОтклонениеНормыОт Тогда
				Объект.ПозитивноеОтклонениеНормыОт = Объект.ПограничноеОтклонениеНормыДо - Дельта;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПограничноеОтклонениеНормыДоПриИзменении(Объект, Абс)
	Дельта = 0.1;
	типПрямой = ТипРасчетаПрямой(Объект.ТипРасчета);
	
	Если типПрямой Тогда
		Объект.ПозитивноеОтклонениеНормыОт = Объект.ПограничноеОтклонениеНормыДо + Дельта;
		
		Если Объект.ПограничноеОтклонениеНормыОт >= Объект.ПограничноеОтклонениеНормыДо Тогда
			
			Объект.ПограничноеОтклонениеНормыОт = Объект.ПограничноеОтклонениеНормыДо - Дельта;
			
			Если Абс Тогда
				Объект.ПограничноеОтклонениеНормыОтАбс = Окр(Объект.ПограничноеОтклонениеНормыОт * Объект.Значение/100, 2);	
			КонецЕсли;
			
			Если Объект.ПограничноеОтклонениеНормыОт <= Объект.НегативноеОтклонениеНормыДо Тогда
				Объект.НегативноеОтклонениеНормыДо = Объект.ПограничноеОтклонениеНормыОт - Дельта;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Объект.ПозитивноеОтклонениеНормыОт = Объект.ПограничноеОтклонениеНормыДо - Дельта;	
		
		Если Объект.ПограничноеОтклонениеНормыОт <= Объект.ПограничноеОтклонениеНормыДо Тогда
			
			Объект.ПограничноеОтклонениеНормыОт = Объект.ПограничноеОтклонениеНормыДо + Дельта;
			
			Если Объект.ПограничноеОтклонениеНормыОт >= Объект.НегативноеОтклонениеНормыДо Тогда
				Объект.НегативноеОтклонениеНормыДо = Объект.ПограничноеОтклонениеНормыОт + Дельта;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СозданиеМоделиММ(ВладелецФормы) Экспорт
	
	Отбор = Новый Структура("МодельПланирования", ПредопределенноеЗначение("Справочник.УБ_МоделиПланированияЭффективности.ПустаяСсылка"));
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПоказыватьСвободные", Истина);
	ОткрытьФорму("Справочник.УБ_ШтатноеРасписание.Форма.ФормаВыбора", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоказателиРасчетаЗарплаты(Форма, Команда)
	
	Объект = Форма.Объект;
	ДанныеСводно = Форма.ДанныеСводно;
	ПоказателиРасчетаЗарплаты = Форма.ПоказателиРасчетаЗарплаты;
	
	Организация = Объект.Организация;
	Подразделение = Объект.Подразделение;
	Сотрудники = Новый Массив;
	
	Для Каждого СтрокаДанные Из ДанныеСводно Цикл
		Если ТипЗнч(СтрокаДанные.Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
			Сотрудники.Добавить(СтрокаДанные.Объект);
		КонецЕсли;
	КонецЦикла;
	
	ДатаНачала = Объект.Период;
	ДатаОкончания = ?(ЗначениеЗаполнено(Объект.ПериодОкончания), Объект.ПериодОкончания,КонецМесяца(Объект.Период));
	
	ДанныеПоказателейРасчетаЗарплаты = УБ_РасчетПоказателейЭффективности.ЗаполнитьПоказателиРасчетаЗарплаты(
		Организация, Подразделение, Сотрудники, ДатаНачала, ДатаОкончания);
	
	Для Каждого ДанныеПоказателейСотрудника Из ДанныеПоказателейРасчетаЗарплаты Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Объект", ДанныеПоказателейСотрудника.Сотрудник);
		
		СтрокиСотрудника = ДанныеСводно.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
			
			Для Каждого СтрокаЗначениеПоказателя Из ДанныеПоказателейСотрудника.ЗначенияПоказателей Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИмяТаблицы", "ДанныеСводно");
				ПараметрыОтбора.Вставить("Показатель", СтрокаЗначениеПоказателя.Ключ);
				
				СтрокиПоказателиРасчетаЗарплаты = ПоказателиРасчетаЗарплаты.НайтиСтроки(ПараметрыОтбора);
				Если СтрокиПоказателиРасчетаЗарплаты.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяРеквизита = СтрокиПоказателиРасчетаЗарплаты[0].ИмяРеквизита;
				
				СтрокаСотрудника[ИмяРеквизита] = СтрокаЗначениеПоказателя.Значение;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОткрытьМодельПланированияЭффективности(Форма, Элемент)
	
	ПоказатьЗначение(,Форма.УБ_МодельПланированияЭффективности);
	
КонецПроцедуры	

Процедура ОткрытьНовуюМодель(Форма, Команда) 
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Владелец",Форма.Объект.Ссылка);
	
	ОткрытьФорму("Справочник.УБ_МоделиПланированияЭффективности.Форма.ФормаЭлемента", Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения));
	
КонецПроцедуры	

Функция ТипРасчетаПрямой(типРасчета) Экспорт
		возврат типРасчета = ПредопределенноеЗначение("Перечисление.УБ_ТипыРасчета.Прямой")
КонецФункции

Процедура РассчитатьАбсолютныеЗначения(структураПараметров) Экспорт
	
	Если структураПараметров.Значение = Неопределено Тогда
		возврат;
	КонецЕсли;
	
	сотаяЧасть = структураПараметров.Значение/100;
		
	структураПараметров.НегативноеОтклонениеНормыДоАбс = Окр(структураПараметров.НегативноеОтклонениеНормыДо * сотаяЧасть,2);		
	структураПараметров.ПозитивноеОтклонениеНормыОтАбс = Окр(структураПараметров.ПозитивноеОтклонениеНормыОт * сотаяЧасть,2);
		
	левоеПограничноеЗначение = Окр(структураПараметров.ПограничноеОтклонениеНормыОт * сотаяЧасть,2);
	правоеПограничноеЗначение = Окр(структураПараметров.ПограничноеОтклонениеНормыДо * сотаяЧасть,2);
	
	структураПараметров.ПограничноеОтклонениеДиапазон = Строка(левоеПограничноеЗначение) + " - " + Строка(правоеПограничноеЗначение);
	
КонецПроцедуры

Функция СформироватьСтруктуру() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("НегативноеОтклонениеНормыДо");
	Результат.Вставить("ПозитивноеОтклонениеНормыОт");
	Результат.Вставить("ПограничноеОтклонениеНормыОт");
	Результат.Вставить("ПограничноеОтклонениеНормыОтАбс");
	Результат.Вставить("ПограничноеОтклонениеНормыДо");
	Результат.Вставить("ПограничноеОтклонениеНормыДоАбс");
	Результат.Вставить("ПограничноеОтклонениеДиапазон");
	Результат.Вставить("ТипРасчета");
	Результат.Вставить("Значение");
	Результат.Вставить("НегативноеОтклонениеНормыДоАбс");
	Результат.Вставить("ПозитивноеОтклонениеНормыОтАбс");
	
	возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КадровыеДокументы 
Функция ФормаЭлемента(Элемент)
	Если ТипЗнч(Элемент.Родитель) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Элемент.Родитель;		
	Иначе
		Возврат ФормаЭлемента(Элемент.Родитель);
	КонецЕсли;
		
КонецФункции

Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Форма = ФормаЭлемента(Элемент);
	Объект = Форма.Объект;    
	РеквизитыОбъекта = Новый Структура("Отбор", Новый Структура);                      
	Если СтрНайти(Элемент.Имя, "Назначение")  Тогда
		РеквизитыОбъекта.Отбор.Вставить("ГоловноеПодразделение", Объект.Подразделение);
		РеквизитыОбъекта.Отбор.Вставить("Владелец", Объект.Организация);	
	Иначе
		РеквизитыОбъекта.Отбор.Вставить("Владелец", Объект.Организация);	
		РеквизитыОбъекта.Вставить("Объект", Объект);
		РеквизитыОбъекта.Вставить("ИмяФормы", Форма.ИмяФормы);
		РеквизитыОбъекта.Вставить("РольДоступнаПодразделениеРасш", Форма.РольДоступнаПодразделениеРасш);	
	КонецЕсли;
	ИмяФормыВыбора = УБ_ОбщегоНазначенияКлиентВызовСервера.ПолучитьИмяФормыВыбораПоСсылке(УБ_ОбщегоНазначенияКлиент.ЗначениеРеквизитаПоУмолчанию("Подразделение"));
	ФормаВыбора = ПолучитьФорму(ИмяФормыВыбора, РеквизитыОбъекта, Элемент);
	ФормаВыбора.Открыть();  

КонецПроцедуры 

Процедура ПодразделениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = ФормаЭлемента(Элемент);      
	ПараметрыНастроек = Новый Структура("ИмяФормы,	РольДоступнаПодразделениеРасш, ПараметрыПолученияДанных", 
													Форма.ИмяФормы, Форма.РольДоступнаПодразделениеРасш, ПараметрыПолученияДанных);

	
	Если СтрНайти(Элемент.Имя, "Назначение")  Тогда
		ПараметрыПолученияДанных.Отбор.Вставить("ГоловноеПодразделение", Форма.Объект.Подразделение);
	Иначе
		УБ_СобытияФорм.ДобавитьГоловноеПодразделениеВОтбор(ПараметрыНастроек, ПараметрыПолученияДанных);	
	КонецЕсли;
	ПараметрыПолученияДанных.Вставить("РольДоступнаПодразделениеРасш", Форма.РольДоступнаПодразделениеРасш);

	Если УБ_ОбщегоНазначенияКлиентПовтИсп.ИспользоватьСправочникиКАУП() Тогда                  
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ПодразделенияОрганизаций"), ПараметрыПолученияДанных);
		ДанныеВыбора.Добавить(Форма.Объект.Подразделение);
	Иначе
		ПараметрыПолученияДанных.Отбор.Вставить("Расформировано", Ложь);
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.УБ_Подразделения"), ПараметрыПолученияДанных);
	КонецЕсли;   
	
КонецПроцедуры

#КонецОбласти
