
#Область ПрограммныйИнтерфейс

Функция РассчитатьЗначенияПоказателяЭффективности(ПоказательЭффективности, СтруктураПараметров) Экспорт
	
	ПараметрыДанныхСКД = Новый Структура;
	ПараметрыДанныхСКД.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыДанныхСКД.Вставить("Подразделение", УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение"));
	ПараметрыДанныхСКД.Вставить("Сотрудник", УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Сотрудник"));
	ПараметрыДанныхСКД.Вставить("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыДанныхСКД.Вставить("НачалоПериода", НачалоМесяца(ТекущаяДата()));
	ПараметрыДанныхСКД.Вставить("КонецПериода", КонецМесяца(ТекущаяДата()));
	
	ЗаполнитьЗначенияСвойств(ПараметрыДанныхСКД, СтруктураПараметров);  
	
	// КДА++	
	Если ПоказательЭффективности.ВариантРасчетаЗначенияФакта = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаУстановкиФакта Тогда
		РезультатыПолученияФакта = ПолучитьЗначениеФактаИзДокумента(ПоказательЭффективности, ПараметрыДанныхСКД);         
		
		ДанныеПоказателяЭффективности = Новый ТаблицаЗначений;
		ДанныеПоказателяЭффективности.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДанныеПоказателяЭффективности.Колонки.Добавить("Подразделение", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Подразделения.Тип));
		ДанныеПоказателяЭффективности.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Сотрудники.Тип));
		ДанныеПоказателяЭффективности.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число"));
		
		НоваяСтрока = ДанныеПоказателяЭффективности.Добавить();
		НоваяСтрока.Организация = ПараметрыДанныхСКД.Организация;
		НоваяСтрока.Подразделение = ПараметрыДанныхСКД.Подразделение;
		НоваяСтрока.Сотрудник = ПараметрыДанныхСКД.Сотрудник;
		НоваяСтрока.Факт = РезультатыПолученияФакта;	
		
	 	Возврат ДанныеПоказателяЭффективности; 
	Иначе
		РезультатыПолученияФакта = ПолучитьРезультатСхемыКомпоновкиДанных(ПоказательЭффективности, ПараметрыДанныхСКД);
	КонецЕсли;
	// КДА--
	
	Если РезультатыПолученияФакта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПоказателяЭффективности = Новый ТаблицаЗначений;
	ДанныеПоказателяЭффективности.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеПоказателяЭффективности.Колонки.Добавить("Подразделение", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Подразделения.Тип));
	ДанныеПоказателяЭффективности.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Сотрудники.Тип));
	ДанныеПоказателяЭффективности.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаСотрудник Из РезультатыПолученияФакта.Строки Цикл
		НоваяСтрока = ДанныеПоказателяЭффективности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСотрудник);
	КонецЦикла;
	
	Возврат ДанныеПоказателяЭффективности;
	
КонецФункции

Функция РассчитатьЗначенияПланаПоказателяЭффективности(ПоказательЭффективности, СтруктураПараметров) Экспорт
	
	ПараметрыДанныхСКД = Новый Структура;
	ПараметрыДанныхСКД.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыДанныхСКД.Вставить("Подразделение", УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение"));
	ПараметрыДанныхСКД.Вставить("Сотрудник", УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Сотрудник"));
	ПараметрыДанныхСКД.Вставить("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыДанныхСКД.Вставить("НачалоПериода", НачалоМесяца(ТекущаяДата()));
	ПараметрыДанныхСКД.Вставить("КонецПериода", КонецМесяца(ТекущаяДата()));
	
	ЗаполнитьЗначенияСвойств(ПараметрыДанныхСКД, СтруктураПараметров);  
	
	// КДА++	
	РезультатыПолученияПлана = ПолучитьРезультатСхемыКомпоновкиДанныхПлана(ПоказательЭффективности, ПараметрыДанныхСКД);
	// КДА--
	
	Если РезультатыПолученияПлана = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПоказателяЭффективности = Новый ТаблицаЗначений;
	ДанныеПоказателяЭффективности.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеПоказателяЭффективности.Колонки.Добавить("Подразделение", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Подразделения.Тип));
	ДанныеПоказателяЭффективности.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Сотрудники.Тип));
	ДанныеПоказателяЭффективности.Колонки.Добавить("План", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаСотрудник Из РезультатыПолученияПлана.Строки Цикл
		НоваяСтрока = ДанныеПоказателяЭффективности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСотрудник);
	КонецЦикла;	

	
	Возврат ДанныеПоказателяЭффективности;
	
КонецФункции

Функция ПересчитатьЗначенияПоказателя(ПараметрыПоказателя) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПроцентВыполнения", 0);
	Результат.Вставить("Эффективность", 0);
	Результат.Вставить("Сумма", 0);
	
	Показатель = ПараметрыПоказателя.Показатель;
	ТипРасчета = ПараметрыПоказателя.ТипРасчета;
	БазовыйТипПоказателя = ПараметрыПоказателя.БазовыйТипПоказателя;
	Матричный = ПараметрыПоказателя.Матричный;
	ПериодРасчета = ПараметрыПоказателя.ПериодРасчета;
	//ИспользоватьШкалуПоказателей = ПараметрыПоказателя.ИспользоватьШкалуПоказателей;
	ШкалаПоказателей = ПараметрыПоказателя.ШкалаПоказателей;
	ВидРасценки = ПараметрыПоказателя.ВидРасценки;
	РассчитыватьРезультатОтФакта = ПараметрыПоказателя.РассчитыватьРезультатОтФакта;
	Расценка = ПараметрыПоказателя.Расценка;
	Вес = ПараметрыПоказателя.Вес;
	План = ПараметрыПоказателя.План;
	КритическоеЗначение = ПараметрыПоказателя.КритическоеЗначение;
	Факт = ПараметрыПоказателя.Факт;
	ОграничиватьМинимальноеЗначениеРезультата = ПараметрыПоказателя.ОграничиватьМинимальноеЗначениеРезультата;
	МинимальноеЗначениеРезультата = ПараметрыПоказателя.МинимальноеЗначениеРезультата;
	ОграничиватьМаксимальноеЗначениеРезультата = ПараметрыПоказателя.ОграничиватьМаксимальноеЗначениеРезультата;
	МаксимальноеЗначениеРезультата = ПараметрыПоказателя.МаксимальноеЗначениеРезультата;
	
	Если Матричный Тогда
		
		ПроцентВыполнения = ПроцентВыполненияПлана(КритическоеЗначение, План, Факт);
		
		Если ЗначениеЗаполнено(ШкалаПоказателей) Тогда
			ПроцентВыполнения = ОпределитьЗначениеПоказателяПоШкале(ПроцентВыполнения, ПериодРасчета, ШкалаПоказателей);
		КонецЕсли;
		
		Если ОграничиватьМинимальноеЗначениеРезультата Тогда
			ПроцентВыполнения = Макс(ПроцентВыполнения, МинимальноеЗначениеРезультата);
		КонецЕсли;
		
		Если ОграничиватьМаксимальноеЗначениеРезультата Тогда
			ПроцентВыполнения = Мин(ПроцентВыполнения, МаксимальноеЗначениеРезультата);
		КонецЕсли;
		
		Результат.ПроцентВыполнения = ПроцентВыполнения;
		Результат.Эффективность = Окр(ПроцентВыполнения * Вес / 100, 2);
		
	Иначе
		
		ПроцентВыполнения = ПроцентВыполненияПлана(КритическоеЗначение, План, Факт);
		Результат.ПроцентВыполнения = ПроцентВыполнения;
		
		Если ЗначениеЗаполнено(ШкалаПоказателей) Тогда
			Расценка = ОпределитьЗначениеПоказателяПоШкале(ПроцентВыполнения, ПериодРасчета, ШкалаПоказателей, Матричный);
			Результат.Вставить("Расценка", Расценка);
			Результат.Вставить("УтвержденноеЗначениеРасценка", Расценка);
		КонецЕсли;
		
		Если ВидРасценки = Перечисления.УБ_ВидыРасценокПоказателей.Процент Тогда
			Расценка = Расценка / 100;
		КонецЕсли;
		
		Если План = 0 И ТипРасчета = Перечисления.УБ_ТипыРасчета.Прямой
			Или РассчитыватьРезультатОтФакта Тогда
			Результат.Сумма = Расценка * Факт;
		Иначе
			Результат.Сумма = Окр(Расценка * ПроцентВыполнения / 100, 2);
		КонецЕсли;
		
		Если ОграничиватьМинимальноеЗначениеРезультата Тогда
			Результат.Сумма = Макс(Результат.Сумма, МинимальноеЗначениеРезультата);
		КонецЕсли;
		
		Если ОграничиватьМаксимальноеЗначениеРезультата Тогда
			Результат.Сумма = Мин(Результат.Сумма, МаксимальноеЗначениеРезультата);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПересчитатьИтоговыеЗначенияПоказателей(ТекущаяГруппировка, ДеревоНачислений, МодельПланирования, Грейд, ВерсияГрейда, ПериодРасчета, ВариантРасчетаПремии, ПараметрыМатериальнойМотивацииСотрудника,ЯчейкиРасчета) Экспорт
	
	Вес = 0;
	Эффективность = 0;
	Сумма = 0;
	
	СтрокиПоказателей = ТекущаяГруппировка.ПолучитьЭлементы();
	Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
		Если СтрокаПоказателя.Показатель.НеУчитыватьВРасчетеПерсональнойЭффективности Тогда
			Продолжить;
		КонецЕсли;
		Вес = Вес + СтрокаПоказателя.Вес;
		Эффективность = Эффективность + СтрокаПоказателя.Эффективность;
		Сумма = Сумма + СтрокаПоказателя.Сумма;
	КонецЦикла;
	
	ТекущаяГруппировка.Вес = Вес;
	ТекущаяГруппировка.Эффективность = Эффективность;
	ТекущаяГруппировка.Сумма = Сумма;
	
	Если ТекущаяГруппировка.Матричный Тогда
		
		ШкалаПоказателя = ОпределитьШкалуПоказателя(Грейд, ВерсияГрейда,МодельПланирования, ТекущаяГруппировка.ТипПоказателя);
		ПроцентПремии = ОпределитьЗначениеПоказателяПоШкале(Эффективность, ПериодРасчета, ШкалаПоказателя);
		ТекущаяГруппировка.ПроцентПремии = ПроцентПремии * ПараметрыМатериальнойМотивацииСотрудника.ПроцентПремии/100;
		
		РассчитатьПроцентПремииДляПоказателя(ТекущаяГруппировка,ДеревоНачислений, Грейд, ВерсияГрейда,ЯчейкиРасчета);
	
		СтрокаБазовогоТипаПоказателя = Неопределено;
		                                           
		СтрокиТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
		Для Каждого СтрокаТипПоказателя Из СтрокиТипыПоказателей Цикл
			Если СтрокаТипПоказателя.Показатель = ТекущаяГруппировка.БазовыйТипПоказателя Тогда
				СтрокаБазовогоТипаПоказателя = СтрокаТипПоказателя;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаБазовогоТипаПоказателя <> Неопределено Тогда
			Если ВариантРасчетаПремии = Перечисления.УБ_ВариантыРасчетаПремии.ОтФактическогоЗначения Тогда
				Сумма = СтрокаБазовогоТипаПоказателя.Сумма;
			ИначеЕсли ВариантРасчетаПремии = Перечисления.УБ_ВариантыРасчетаПремии.ОтНормативногоЗначения Тогда
				
				Сумма = 0;
				
				СтрокиПоказателей = СтрокаБазовогоТипаПоказателя.ПолучитьЭлементы();
				Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
					Сумма = Сумма + СтрокаПоказателя.Расценка;
				КонецЦикла;
				
			Иначе
				Сумма = 0;
			КонецЕсли;
			
			ТекущаяГруппировка.Сумма = Сумма * ТекущаяГруппировка.ПроцентПремии / 100;
		КонецЕсли;
		
	Иначе
		
		Если ВариантРасчетаПремии = Перечисления.УБ_ВариантыРасчетаПремии.ОтФактическогоЗначения Тогда
			Сумма = ТекущаяГруппировка.Сумма;
		ИначеЕсли ВариантРасчетаПремии = Перечисления.УБ_ВариантыРасчетаПремии.ОтНормативногоЗначения Тогда
			
			Сумма = 0;
			
			СтрокиПоказателей = ТекущаяГруппировка.ПолучитьЭлементы();
			Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
				Сумма = Сумма + СтрокаПоказателя.Расценка;
			КонецЦикла;
			
		Иначе
			Сумма = 0;
		КонецЕсли;
		
		СтрокиТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
		Для Каждого СтрокаТипПоказателя Из СтрокиТипыПоказателей Цикл
			Если СтрокаТипПоказателя.БазовыйТипПоказателя = ТекущаяГруппировка.Показатель Тогда
				СтрокаТипПоказателя.Сумма = Сумма * СтрокаТипПоказателя.ПроцентПремии / 100;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураПараметровПоказатея() Экспорт
	

	ПараметрыПоказателя = Новый Структура;
	ПараметрыПоказателя.Вставить("Показатель");
	ПараметрыПоказателя.Вставить("ТипРасчета");
	ПараметрыПоказателя.Вставить("БазовыйТипПоказателя");
	ПараметрыПоказателя.Вставить("Матричный");
	ПараметрыПоказателя.Вставить("Расценка", 0);
	ПараметрыПоказателя.Вставить("Вес", 0);
	ПараметрыПоказателя.Вставить("План", 0);
	ПараметрыПоказателя.Вставить("КритическоеЗначение", 0);
	ПараметрыПоказателя.Вставить("Факт", 0);
	//ПараметрыПоказателя.Вставить("ИспользоватьШкалуПоказателей", Ложь);
	ПараметрыПоказателя.Вставить("ШкалаПоказателей");
	ПараметрыПоказателя.Вставить("ВидРасценки");
	ПараметрыПоказателя.Вставить("РассчитыватьРезультатОтФакта", Ложь);
	ПараметрыПоказателя.Вставить("ОграничиватьМинимальноеЗначениеРезультата", Ложь);
	ПараметрыПоказателя.Вставить("МинимальноеЗначениеРезультата", 0);
	ПараметрыПоказателя.Вставить("ОграничиватьМаксимальноеЗначениеРезультата", Ложь);
	ПараметрыПоказателя.Вставить("МаксимальноеЗначениеРезультата", 0);
	ПараметрыПоказателя.Вставить("ПериодРасчета");
	
	Возврат ПараметрыПоказателя;
	
КонецФункции

Функция ПропорцииМатериальнойМотивацииСотрудника(Сотрудник, ПериодДействия) Экспорт
	
	ПропорцииМатериальнойМотивации = Новый Структура;
	ПропорцииМатериальнойМотивации.Вставить("Сотрудник", Сотрудник);
	ПропорцииМатериальнойМотивации.Вставить("ПроцентПремии", Константы.УБ_ПроцентПремии.Получить());
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ПропорцииМатериальнойМотивацииСрезПоследних.Сотрудник КАК Сотрудник,
		|	УБ_ПропорцииМатериальнойМотивацииСрезПоследних.ПроцентПремии КАК ПроцентПремии
		|ИЗ
		|	РегистрСведений.УБ_ПропорцииМатериальнойМотивации.СрезПоследних(&ПериодДействия, Сотрудник = &Сотрудник) КАК УБ_ПропорцииМатериальнойМотивацииСрезПоследних";
	
	Запрос.УстановитьПараметр("ПериодДействия", ПериодДействия);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПропорцииМатериальнойМотивации, Выборка);
	КонецЦикла;
	
	Возврат ПропорцииМатериальнойМотивации;
	
КонецФункции

Функция ЗаполнитьПоказателиРасчетаЗарплаты(Организация, Подразделение, Сотрудники, ДатаНачала, ДатаОкончания) Экспорт
	
	ДанныеПоказателейРасчетаЗарплаты = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.Сотрудник КАК Сотрудник,
		|	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.Показатель КАК Показатель,
		|	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.ЗначениеОборот КАК Значение
		|ИЗ
		|	РегистрНакопления.УБ_ДанныеПоказателейРасчетаЗарплаты.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			Организация = &Организация
		|				И (&Подразделение = ЗНАЧЕНИЕ(Справочник.УБ_Подразделения.ПустаяСсылка)
		|					ИЛИ Подразделение = &Подразделение)
		|				И Сотрудник В (&Сотрудники)) КАК УБ_ДанныеПоказателейРасчетаЗарплатыОбороты
		|ИТОГИ ПО
		|	Сотрудник";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСотрудник = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		ЗначенияПоказателей = Новый Соответствие;
		
		ВыборкаДетальныеЗаписи = ВыборкаСотрудник.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗначенияПоказателей.Вставить(ВыборкаДетальныеЗаписи.Показатель, ВыборкаДетальныеЗаписи.Значение);
		КонецЦикла;
		
		Если ЗначенияПоказателей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоказателейСотрудника = Новый Структура;
		ДанныеПоказателейСотрудника.Вставить("Сотрудник", ВыборкаСотрудник.Сотрудник);
		ДанныеПоказателейСотрудника.Вставить("ЗначенияПоказателей", ЗначенияПоказателей);
		
		ДанныеПоказателейРасчетаЗарплаты.Добавить(ДанныеПоказателейСотрудника);
		
	КонецЦикла;
	
	Возврат ДанныеПоказателейРасчетаЗарплаты;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормулами

Процедура РассчитатьРезультатПоказателяПоФормуле(ПоказательЭффективности, Строка, ИсходныеДанные, Грейд, ВерсияГрейда,ЯчейкиРасчета,Ячейка = Неопределено) Экспорт
	
	ФормулаРасчета = ПолучитьФормулуПоказателя(ПоказательЭффективности, Грейд, ВерсияГрейда,ЯчейкиРасчета,Ячейка);
	
	Если ФормулаРасчета <> Неопределено Тогда		
		ПараметрыВыполненияФормулы = ПараметрыВыполненияФормулы(ФормулаРасчета, Ложь);
	Иначе
		//ПараметрыВыполненияФормулы = ПараметрыВыполненияФормулы(ПоказательЭффективности.ФормулаРасчета, Ложь);
		//ФормулаРасчета = ПоказательЭффективности.ФормулаРасчета;	
	КонецЕсли;
	
	
	Попытка
		ФормулаДляВычисления = СтрЗаменить(ПараметрыВыполненияФормулы.ФормулаДляВыполнения, "ИсходныеДанные.", "Параметры.");
		Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаДляВычисления, ИсходныеДанные);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Если Результат <> Неопределено Тогда
		Если Ячейка = Неопределено Тогда
			Строка.Сумма = Результат;
		Иначе
			Строка[Ячейка] = Результат;
		КонецЕсли;	
	КонецЕсли;
	 
КонецПроцедуры

Функция ПолучитьФормулуПоказателя(ПоказательЭффективности, Грейд, ВерсияГрейда,ЯчейкиРасчета,Ячейка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ФормулыПоказателейЭффективности.ФормулаРасчета КАК ФормулаРасчета
		|ИЗ
		|	РегистрСведений.УБ_ФормулыПоказателейЭффективности КАК УБ_ФормулыПоказателейЭффективности
		|ГДЕ
		|	УБ_ФормулыПоказателейЭффективности.Грейд = &Грейд
		|	И УБ_ФормулыПоказателейЭффективности.ВерсияГрейда = &ВерсияГрейда
		|	И УБ_ФормулыПоказателейЭффективности.ПоказательЭффективности = &ПоказательЭффективности
		|	И УБ_ФормулыПоказателейЭффективности.Ячейка = &Ячейка
		|	И УБ_ФормулыПоказателейЭффективности.Ячейка В(&ЯчейкиРасчета)";
	
	Запрос.УстановитьПараметр("Грейд", Грейд);
	Запрос.УстановитьПараметр("ВерсияГрейда", ВерсияГрейда);
	Запрос.УстановитьПараметр("ПоказательЭффективности", ПоказательЭффективности);
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	Запрос.УстановитьПараметр("ЯчейкиРасчета", ЯчейкиРасчета); 
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе	
		Выборка = РезультатЗапроса.Выбрать();
	    Выборка.Следующий();
		Возврат Выборка.ФормулаРасчета;
	КонецЕсли;
		
КонецФункции

Функция ПоказательЭффективностиПоИдентификатору(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиЭффективности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УБ_ПоказателиЭффективности КАК ПоказателиЭффективности
		|ГДЕ
		|	ПоказателиЭффективности.Идентификатор = &Идентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УБ_ТипыПоказателей.Ссылка
		|ИЗ
		|	Справочник.УБ_ТипыПоказателей КАК УБ_ТипыПоказателей
		|ГДЕ
		|	УБ_ТипыПоказателей.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция КолонкиРасчетаЭффективностиДляФормулы() Экспорт
	
	Возврат "РАСЦЕНКА,ВЕС,ПЛАН,ФАКТ,ПРОЦЕНТВЫПОЛНЕНИЯ,ЭФФЕКТИВНОСТЬ,ПРОЦЕНТПРЕМИИ,СУММА";
	
КонецФункции

Процедура ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторПоказателей, Отказ = Ложь)
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ИсходныеДанные = Новый Структура;
	Для Каждого Показатель Из ИдентификаторПоказателей Цикл
		СтруктураПолейПоказателя = Новый Структура(КолонкиРасчетаЭффективностиДляФормулы());
		Для Каждого ПолеПоказателя Из СтруктураПолейПоказателя Цикл
			СтруктураПолейПоказателя[ПолеПоказателя.Ключ] = ГСЧ.СлучайноеЧисло(1);
		КонецЦикла;
		ИсходныеДанные.Вставить(Показатель, СтруктураПолейПоказателя);
	КонецЦикла;
	
	СтруктураПолейПоказателя = Новый Структура(КолонкиРасчетаЭффективностиДляФормулы());
	Для Каждого ПолеПоказателя Из СтруктураПолейПоказателя Цикл
		СтруктураПолейПоказателя[ПолеПоказателя.Ключ] = ГСЧ.СлучайноеЧисло(1);
	КонецЦикла;
	ИсходныеДанные.Вставить("ТекущийПоказатель", СтруктураПолейПоказателя);
	
	ФормулаДляПроверки = СтрЗаменить(ФормулаДляВыполнения, "ИсходныеДанные.", "Параметры.");
	
	Попытка
		Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаДляПроверки, ИсходныеДанные);
	Исключение
		ТекстСообщения = НСтр("ru = 'При проверке вычисления формулы возникла ошибка'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецПопытки;
	
КонецПроцедуры

Функция ФормулаДляВыполнения(Формула, ИдентификаторыПоказателей)
	
	ФормулаДляВыполнения = "";
	
	НачалоСлова = 1;
	Для Позиция = 1 По СтрДлина(Формула) Цикл
		КодСимвола = КодСимвола(Формула, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
			ФормулаДляВыполнения = ФормулаДляВыполнения + Сред(Формула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
	
	Возврат ФормулаДляВыполнения;
	
КонецФункции

Процедура ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей)	
	
	КолонкиРасчетаЭффективностиДляФормулы = КолонкиРасчетаЭффективностиДляФормулы();
	КолонкиРасчетаЭффективностиДляФормулы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиРасчетаЭффективностиДляФормулы);
	
	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(Формула, НачалоСлова, Позиция - НачалоСлова);
		Если НачалоСлова > 1 Тогда
			ПредыдущийСимвол = Сред(Формула, НачалоСлова - 1, 1);
		Иначе
			ПредыдущийСимвол = Неопределено;
		КонецЕсли;
		
		Если ИдентификаторыПоказателей.Найти(Слово) <> Неопределено Тогда
			ФормулаДляВыполнения = ФормулаДляВыполнения + "ИсходныеДанные." + Слово;
		ИначеЕсли КолонкиРасчетаЭффективностиДляФормулы.Найти(ВРег(Слово)) <> Неопределено И ПредыдущийСимвол <> "." Тогда
			 ФормулаДляВыполнения = ФормулаДляВыполнения + "ИсходныеДанные.ТекущийПоказатель." + Слово;
		Иначе
			ФормулаДляВыполнения = ФормулаДляВыполнения + Слово;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторыПоказателейФормулы(Формула)
	
	ИдентификаторыПоказателей = Новый Массив;
	
	РазделителиФормулы = " +-/*?=<>().,"
		+ Символы.ВК
		+ Символы.ВТаб
		+ Символы.НПП
		+ Символы.ПС
		+ Символы.ПФ
		+ Символы.Таб;
	ЗарезервированныеСлова = "ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,И,ИЛИ,НЕ,OR,AND,NOT"
		+ "," + КолонкиРасчетаЭффективностиДляФормулы();
	ЗарезервированныеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗарезервированныеСлова);
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Формула, РазделителиФормулы);
	Для Каждого Слово Из Слова Цикл
		// Это число
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Слово, ".", "")) Тогда
			Продолжить;
		КонецЕсли;
		// Это зарезервированное слово
		Если ЗарезервированныеСлова.Найти(ВРег(Слово)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Это должен быть показатель
		ИдентификаторыПоказателей.Добавить(Слово);
	КонецЦикла;
	
	Возврат ИдентификаторыПоказателей;
	
КонецФункции

Функция ПоказателиПоИдентификаторам(ИдентификаторыПоказателей)
	
	Отказ = Ложь;
	
	Показатели = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыПоказателей Цикл
		Показатель = ПоказательЭффективностиПоИдентификатору(Идентификатор);
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти показатель по идентификатору %1'"),
				Идентификатор);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Продолжить;
		КонецЕсли;
		Если Показатели.Найти(Показатель) = Неопределено Тогда
			Показатели.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат Показатели;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыВыполненияФормулы(Знач Формула, ПроверятьФормулу = Истина, НедопустимыеПоказатели = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Формула) Тогда
		Если Не ПроверятьФормулу Тогда
			Возврат Неопределено;
		КонецЕсли;
		//ТекстСообщения = НСтр("ru = 'Формула не заполнена'");
		//ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторыПоказателейФормулы = ИдентификаторыПоказателейФормулы(Формула);
	ПоказателиФормулы = ПоказателиПоИдентификаторам(ИдентификаторыПоказателейФормулы);
	Если ПоказателиФормулы = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФормулаДляВыполнения = ФормулаДляВыполнения(Формула, ИдентификаторыПоказателейФормулы);
	
	Если ПроверятьФормулу Тогда
		ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ);
		ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателейФормулы, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ФормулаДляВыполнения", ФормулаДляВыполнения);
	ПараметрыВыполнения.Вставить("ПоказателиФормулы", ПоказателиФормулы);
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

Процедура ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ)
	
	Если НедопустимыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПоказательФормулы Из ПоказателиФормулы Цикл
		Если НедопустимыеПоказатели.Найти(ПоказательФормулы) <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Использование показателя ""%1"" в этой формуле расчета недопустимо.'"),
				ПоказательФормулы);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначениеФактаИзДокумента(ПоказательЭффективности, ПараметрыДанныхСКД)

	Организация = ПараметрыДанныхСКД.Организация;
	Подразделение = ПараметрыДанныхСКД.Подразделение;
	Сотрудник = ПараметрыДанныхСКД.Сотрудник;
	ФизическоеЛицо = ПараметрыДанныхСКД.ФизическоеЛицо;
	НачалоПериода = ПараметрыДанныхСКД.НачалоПериода;
	КонецПериода = ПараметрыДанныхСКД.КонецПериода;
	
	/////////////////////////////////////////////////////////////////////////////////////
	// Получение руководителя подразделения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_НазначенныеРуководителиПодразделенийСрезПоследних.Руководитель КАК Руководитель,
		|	УБ_НазначенныеРуководителиПодразделенийСрезПоследних.ДатаОтстранения КАК ДатаОтстранения
		|ИЗ
		|	РегистрСведений.УБ_НазначенныеРуководителиПодразделений.СрезПоследних(, Подразделение = &Подразделение) КАК УБ_НазначенныеРуководителиПодразделенийСрезПоследних
		|ГДЕ
		|	(УБ_НазначенныеРуководителиПодразделенийСрезПоследних.ДатаОтстранения = ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|			ИЛИ УБ_НазначенныеРуководителиПодразделенийСрезПоследних.ДатаОтстранения <= &ТекущаяДата)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаРуководитель = РезультатЗапроса.Выбрать();
	    ВыборкаРуководитель.Следующий();
		Руководитель = ВыборкаРуководитель.Руководитель;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ФактПоПоказателям.ТекущееЗначение КАК ЗначениеФакта,
		|	УБ_ФактПоПоказателям.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	РегистрСведений.УБ_ФактПоПоказателям КАК УБ_ФактПоПоказателям
		|ГДЕ
		|	УБ_ФактПоПоказателям.показатель = &показатель
		|	И УБ_ФактПоПоказателям.ДатаНачала = &ДатаНачала
		|	И УБ_ФактПоПоказателям.Назначение = &Назначение";      
		
	Запрос.УстановитьПараметр("показатель", ПоказательЭффективности);	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоПериода);
	Если Руководитель = Сотрудник Тогда
		Запрос.УстановитьПараметр("Назначение", Подразделение);	
	Иначе
		Запрос.УстановитьПараметр("Назначение", Сотрудник);	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЗначениеФакта;
		
	Иначе Возврат 0 ; 
	КонецЕсли;		
КонецФункции	
	
Функция ПолучитьРезультатСхемыКомпоновкиДанных(ПоказательЭффективности, ПараметрыДанныхСКД)
	
	Организация = ПараметрыДанныхСКД.Организация;
	Подразделение = ПараметрыДанныхСКД.Подразделение;
	Сотрудник = ПараметрыДанныхСКД.Сотрудник;
	ФизическоеЛицо = ПараметрыДанныхСКД.ФизическоеЛицо;
	НачалоПериода = ПараметрыДанныхСКД.НачалоПериода;
	КонецПериода = ПараметрыДанныхСКД.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СборДанныхПоказателя.ХранилищеСхемыКомпоновкиДанныхФакта КАК ХранилищеСхемыКомпоновкиДанныхФакта,
		|	СборДанныхПоказателя.ХранилищеСхемыКомпоновкиДанныхПлана КАК ХранилищеСхемыКомпоновкиДанныхПлана,
		|	СборДанныхПоказателя.ХранилищеНастроекКомпоновкиДанныхПлана КАК ХранилищеНастроекПлана,
		|	СборДанныхПоказателя.ХранилищеНастроекКомпоновкиДанныхФакта КАК ХранилищеНастроекФакта,
		|	СборДанныхПоказателя.ПериодСбораДанных КАК ПериодСбораДанных
		|ИЗ
		|	РегистрСведений.УБ_СхемыСбораДанныхПоказателейЭффективности.СрезПоследних(&ДатаСреза, ПоказательЭффективности = &ПоказательЭффективности) КАК СборДанныхПоказателя";
	
	Запрос.УстановитьПараметр("ДатаСреза", ПараметрыДанныхСКД.НачалоПериода);
	Запрос.УстановитьПараметр("ПоказательЭффективности", ПоказательЭффективности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СкоректироватьПериодРасчетаСбораДанныхПоказателя(ПоказательЭффективности, НачалоПериода, КонецПериода, Выборка.ПериодСбораДанных);
	
	СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанныхФакта.Получить();
	
	НастройкиСхемы = Выборка.ХранилищеНастроекФакта.Получить();
	
	Если Не НастройкиСхемы = Неопределено Тогда
		Настройки = НастройкиСхемы;
	Иначе
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	ПараметрОрганизация = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("Организация"));
	Если ПараметрОрганизация <> Неопределено И ЗначениеЗаполнено(Организация) Тогда
		ПараметрОрганизация.Использование = Истина;
		ПараметрОрганизация.Значение = Организация;
	КонецЕсли;
	
	ПараметрПодразделение = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("Подразделение"));
	Если ПараметрПодразделение <> Неопределено И ЗначениеЗаполнено(Подразделение) Тогда
		ПараметрПодразделение.Использование = Истина;
		ПараметрПодразделение.Значение = Подразделение;
	КонецЕсли;
	
	ПараметрСотрудники = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("Сотрудник"));
	Если ПараметрСотрудники <> Неопределено Тогда
		ПараметрСотрудники.Использование = Истина;
		ПараметрСотрудники.Значение = Сотрудник;
	КонецЕсли;
	
	ПараметрФизическоеЛицо = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("ФизическоеЛицо"));
	Если ПараметрФизическоеЛицо <> Неопределено Тогда
		ПараметрФизическоеЛицо.Использование = Истина;
		ПараметрФизическоеЛицо.Значение = ФизическоеЛицо;
	КонецЕсли;
	
	ПараметрПериод = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("Период"));
	Если ПараметрПериод <> Неопределено Тогда
		
		ПараметрПериод.Использование = Истина;
		
		Если ТипЗнч(ПараметрПериод.Значение) <> Тип("СтандартныйПериод") Тогда
			ПараметрПериод.Значение = Новый СтандартныйПериод;
		КонецЕсли;
		
		ПараметрПериод.Значение.ДатаНачала = НачалоПериода;
		ПараметрПериод.Значение.ДатаОкончания = КонецПериода;
		
	КонецЕсли;
	
	ПараметрНачалоПериода = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
		ПараметрНачалоПериода.Значение = НачалоПериода;
	КонецЕсли;
	
	ПараметрКонецПериода = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
		ПараметрКонецПериода.Значение = КонецПериода;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ДеревоЗначений;
	
КонецФункции

Функция ПолучитьРезультатСхемыКомпоновкиДанныхПлана(ПоказательЭффективности, ПараметрыДанныхСКД)
	
	Организация = ПараметрыДанныхСКД.Организация;
	Подразделение = ПараметрыДанныхСКД.Подразделение;
	Сотрудник = ПараметрыДанныхСКД.Сотрудник;
	ФизическоеЛицо = ПараметрыДанныхСКД.ФизическоеЛицо;
	НачалоПериода = ПараметрыДанныхСКД.НачалоПериода;
	КонецПериода = ПараметрыДанныхСКД.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СборДанныхПоказателя.ХранилищеСхемыКомпоновкиДанныхФакта КАК ХранилищеСхемыКомпоновкиДанныхФакта,
		|	СборДанныхПоказателя.ХранилищеСхемыКомпоновкиДанныхПлана КАК ХранилищеСхемыКомпоновкиДанныхПлана,
		|	СборДанныхПоказателя.ХранилищеНастроекКомпоновкиДанныхПлана КАК ХранилищеНастроекПлана,
		|	СборДанныхПоказателя.ХранилищеНастроекКомпоновкиДанныхФакта КАК ХранилищеНастроекФакта,
		|	СборДанныхПоказателя.ПериодСбораДанных КАК ПериодСбораДанных
		|ИЗ
		|	РегистрСведений.УБ_СхемыСбораДанныхПоказателейЭффективности.СрезПоследних(&ДатаСреза,
		|		ПоказательЭффективности = &ПоказательЭффективности) КАК СборДанныхПоказателя";
	
	Запрос.УстановитьПараметр("ДатаСреза", ПараметрыДанныхСКД.НачалоПериода);
	Запрос.УстановитьПараметр("ПоказательЭффективности", ПоказательЭффективности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СкоректироватьПериодРасчетаСбораДанныхПоказателя(ПоказательЭффективности, НачалоПериода, КонецПериода, Выборка.ПериодСбораДанных);
	
	СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанныхПлана.Получить();
	
	НастройкиСхемы = Выборка.ХранилищеНастроекПлана.Получить();
	
	Если Не НастройкиСхемы = Неопределено Тогда
		Настройки = НастройкиСхемы;
	Иначе
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	ПараметрОрганизация = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("Организация"));
	Если ПараметрОрганизация <> Неопределено И ЗначениеЗаполнено(Организация) Тогда
		ПараметрОрганизация.Использование = Истина;
		ПараметрОрганизация.Значение = Организация;
	КонецЕсли;
	
	ПараметрПодразделение = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("Подразделение"));
	Если ПараметрПодразделение <> Неопределено И ЗначениеЗаполнено(Подразделение) Тогда
		ПараметрПодразделение.Использование = Истина;
		ПараметрПодразделение.Значение = Подразделение;
	КонецЕсли;
	
	ПараметрСотрудники = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("Сотрудник"));
	Если ПараметрСотрудники <> Неопределено Тогда
		ПараметрСотрудники.Использование = Истина;
		ПараметрСотрудники.Значение = Сотрудник;
	КонецЕсли;
	
	ПараметрФизическоеЛицо = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("ФизическоеЛицо"));
	Если ПараметрФизическоеЛицо <> Неопределено Тогда
		ПараметрФизическоеЛицо.Использование = Истина;
		ПараметрФизическоеЛицо.Значение = ФизическоеЛицо;
	КонецЕсли;
	
	ПараметрПериод = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("Период"));
	Если ПараметрПериод <> Неопределено Тогда
		
		ПараметрПериод.Использование = Истина;
		
		Если ТипЗнч(ПараметрПериод.Значение) <> Тип("СтандартныйПериод") Тогда
			ПараметрПериод.Значение = Новый СтандартныйПериод;
		КонецЕсли;
		
		ПараметрПериод.Значение.ДатаНачала = НачалоПериода;
		ПараметрПериод.Значение.ДатаОкончания = КонецПериода;
		
	КонецЕсли;
	
	ПараметрНачалоПериода = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
		ПараметрНачалоПериода.Значение = НачалоПериода;
	КонецЕсли;
	
	ПараметрКонецПериода = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
		ПараметрКонецПериода.Значение = КонецПериода;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ДеревоЗначений;
	
КонецФункции

Функция ПроцентВыполненияПлана(КритическоеЗначение, План, Факт)
	
	Если КритическоеЗначение = План Тогда
		Возврат 0;
	КонецЕсли;
	
	ПроцентВыполнения = (Факт - КритическоеЗначение) / (План - КритическоеЗначение);
	ПроцентВыполнения = Окр(ПроцентВыполнения * 100, 2);
	
	Возврат ПроцентВыполнения;
	
КонецФункции

Функция ОпределитьЗначениеПоказателяПоШкале(ПроцентВыполнения, ПериодРасчета, ШкалаПоказателей, Матричный = Истина)
	
	Если Не ЗначениеЗаполнено(ШкалаПоказателей) Тогда
		Возврат ?(Матричный, ПроцентВыполнения, 0);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА ЗначенияШкалы.ВерхняяГраница = 0
		|				И ЗначенияШкалы.Значение = 0
		|			ТОГДА &ПроцентВыполнения
		|		ИНАЧЕ ЗначенияШкалы.Значение
		|	КОНЕЦ КАК Значение,
		|	ЗначенияШкалы.Расценка КАК Расценка
		|ИЗ
		|	РегистрСведений.УБ_ЗначенияШкалыПоказателей.СрезПоследних(
		|			&ПериодРасчета,
		|			ШкалаПоказателей = &ШкалаПоказателей) КАК ЗначенияШкалыПоказателейСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УБ_УстановкаЗначенийШкалыПоказателей.ЗначенияШкалы КАК ЗначенияШкалы
		|		ПО ЗначенияШкалыПоказателейСрезПоследних.УстановкаЗначенийШкалыПоказателей = ЗначенияШкалы.Ссылка
		|ГДЕ
		|	&ПроцентВыполнения >= ЗначенияШкалы.НижняяГраница
		|	И (&ПроцентВыполнения <= ЗначенияШкалы.ВерхняяГраница
		|		ИЛИ ЗначенияШкалы.ВерхняяГраница = 0)";
	
	Запрос.УстановитьПараметр("ПериодРасчета", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("ПроцентВыполнения", ПроцентВыполнения);
	Запрос.УстановитьПараметр("ШкалаПоказателей", ШкалаПоказателей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Матричный Тогда
		Возврат Выборка.Значение;
	Иначе
		Возврат Выборка.Расценка;
	КонецЕсли;
	
КонецФункции

Процедура СкоректироватьПериодРасчетаСбораДанныхПоказателя(ПоказательЭффективности, НачалоПериода, КонецПериода, ПериодСбораДанных)
	
	Если ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ПрошлыйМесяц Тогда
		
		НачалоПериода = ДобавитьМесяц(НачалоПериода,-1);
		КонецПериода = ДобавитьМесяц(КонецПериода,-1);
		
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ТекущийКвартал Тогда
		
		НачалоПериода = НачалоКвартала(НачалоПериода);
		КонецПериода = КонецКвартала(НачалоПериода);
		
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ПрошлыйКвартал Тогда	
		
		ДатаРасчета = НачалоКвартала(НачалоПериода)-1;
		НачалоПериода = НачалоКвартала(ДатаРасчета);
		КонецПериода = КонецКвартала(НачалоПериода);
		
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ПервыйКвартал Тогда	
		ТекущийКвартал = Квартал(НачалоПериода);
		Если ТекущийКвартал  = 1 Тогда
			Год = Год(НачалоПериода)-1;
			НачалоПериода = ПолучитьДатуКвартала(Год,1);
		Иначе
			Год = Год(НачалоПериода);
			НачалоПериода = ПолучитьДатуКвартала(Год,1);
		КонецЕсли;
		КонецПериода = КонецКвартала(НачалоПериода);
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ВторойКвартал Тогда	
		ТекущийКвартал = Квартал(НачалоПериода);
		Если ТекущийКвартал  = 1 Тогда
			Год = Год(НачалоПериода)-1;
			НачалоПериода = ПолучитьДатуКвартала(Год,2);
		Иначе
			Год = Год(НачалоПериода);
			НачалоПериода = ПолучитьДатуКвартала(Год,2);
		КонецЕсли;
		КонецПериода = КонецКвартала(НачалоПериода);
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ТретийКвартал Тогда	
		ТекущийКвартал = Квартал(НачалоПериода);
		Если ТекущийКвартал  = 1 Тогда
			Год = Год(НачалоПериода)-1;
			НачалоПериода = ПолучитьДатуКвартала(Год,3);
		Иначе
			Год = Год(НачалоПериода);
			НачалоПериода = ПолучитьДатуКвартала(Год,3);
		КонецЕсли;
		КонецПериода = КонецКвартала(НачалоПериода);
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ЧетвертыйКвартал Тогда	
		ТекущийКвартал = Квартал(НачалоПериода);
		Если ТекущийКвартал  = 1 Тогда
			Год = Год(НачалоПериода)-1;
			НачалоПериода = ПолучитьДатуКвартала(Год,4);
		Иначе
			Год = Год(НачалоПериода);
			НачалоПериода = ПолучитьДатуКвартала(Год,4);
		КонецЕсли;
		КонецПериода = КонецКвартала(НачалоПериода);
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ТекущееПолугодие Тогда	
		Месяц = Месяц(НачалоПериода);
		Если Месяц <7 Тогда
			НачалоПериода = НачалоМесяца(Дата(Год(НачалоПериода),1,1));
			КонецПериода = КонецМесяца(Дата(Год(НачалоПериода),6,1));
		Иначе
			НачалоПериода = НачалоМесяца(Дата(Год(НачалоПериода),7,1));
			КонецПериода = КонецМесяца(Дата(Год(НачалоПериода),12,1));
		КонецЕсли;	
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ПрошлоеПолугодие Тогда	
		Месяц = Месяц(НачалоПериода);
		Если Месяц >7 Тогда
			НачалоПериода = НачалоМесяца(Дата(Год(НачалоПериода),1,1));
			КонецПериода = КонецМесяца(Дата(Год(НачалоПериода),6,1));
		Иначе
			НачалоПериода = НачалоМесяца(Дата(Год(НачалоПериода)-1,7,1));
			КонецПериода = КонецМесяца(Дата(Год(НачалоПериода)-1,12,1));
		КонецЕсли;
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ПервоеПолугодие Тогда
		Месяц = Месяц(НачалоПериода);
		Если Месяц >7 Тогда
			НачалоПериода = НачалоМесяца(Дата(Год(НачалоПериода),1,1));
			КонецПериода = КонецМесяца(Дата(Год(НачалоПериода),6,1));
		Иначе
			НачалоПериода = НачалоМесяца(Дата(Год(НачалоПериода)-1,1,1));
			КонецПериода = КонецМесяца(Дата(Год(НачалоПериода)-1,6,1));
		КонецЕсли;
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ВтороеПолугодие Тогда	
		Месяц = Месяц(НачалоПериода);
		Если Месяц >7 Тогда
			НачалоПериода = НачалоМесяца(Дата(Год(НачалоПериода)-1,7,1));
			КонецПериода = КонецМесяца(Дата(Год(НачалоПериода)-1,12,1));
		Иначе
			НачалоПериода = НачалоМесяца(Дата(Год(НачалоПериода)-1,7,1));
			КонецПериода = КонецМесяца(Дата(Год(НачалоПериода)-1,12,1));
		КонецЕсли;
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ТекущийГод Тогда
		НачалоПериода = НачалоГода(НачалоПериода);
		КонецПериода = КонецГода(НачалоПериода);
	ИначеЕсли ПериодСбораДанных = Перечисления.УБ_ПериодыРасчетаСбораДанных.ПрошлыйГод Тогда
		НачалоПериода = НачалоГода(ДобавитьМесяц(Началопериода,-12));
		КонецПериода = КонецГода(НачалоПериода);	
	КонецЕсли;	
	
	
КонецПроцедуры

Функция Квартал(Дата) Экспорт  
    Возврат Цел((Месяц(Дата) - 1) / 3) + 1
КонецФункции

Функция ПолучитьДатуКвартала(Год,Квартал)

	Возврат Дата(Год, (Квартал-1)*3+1,1);
	
КонецФункции	

//	ТАА++	
// Функционал формул для типов показателей

Процедура РассчитатьПроцентПремииДляПоказателя(ТекущиеДанные,ДеревоНачислений, Грейд, ВерсияГрейда,ЯчейкиРасчета) Экспорт
	
	ФормулаРасчета = ПолучитьФормулуПоказателя(ТекущиеДанные.Показатель, Грейд, ВерсияГрейда,ЯчейкиРасчета, "ПроцентПремии");
	Если ЗначениеЗаполнено(ФормулаРасчета) Тогда	
		ИсходныеДанные = ИсходныеДанныеПоказателяДляРасчетаПоФормуле(ТекущиеДанные.Показатель,ДеревоНачислений);
		
		РассчитатьРезультатТипаПоказателяПоФормуле(ТекущиеДанные.Показатель, ИсходныеДанные, ТекущиеДанные,ФормулаРасчета);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура РассчитатьРезультатТипаПоказателяПоФормуле(Показатель, ИсходныеДанные, ТекущиеДанные,ФормулаРасчета)
	
	
	Если ФормулаРасчета <> Неопределено Тогда		
		ПараметрыВыполненияФормулы = ПараметрыВыполненияФормулы(ФормулаРасчета, Ложь);
	Иначе
		ПараметрыВыполненияФормулы = ПараметрыВыполненияФормулы(Показатель.ФормулаРасчета, Ложь);
	КонецЕсли;
	
	ФормулаДляВычисления = СтрЗаменить(ПараметрыВыполненияФормулы.ФормулаДляВыполнения, "ИсходныеДанные.", "Параметры.");
	Попытка
		Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаДляВычисления, ИсходныеДанные);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Если Не Результат = Неопределено Тогда
		ТекущиеДанные.ПроцентПремии = Результат;
	КонецЕсли;	
	 
КонецПроцедуры

Функция ИсходныеДанныеПоказателяДляРасчетаПоФормуле(ЦелевойПоказатель,ДеревоНачислений)
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить(ЦелевойПоказатель.Идентификатор, ЗначенияКолонокРасчетаПоказателя(ЦелевойПоказатель,ДеревоНачислений));
	
	//ПараметрыОтбора = Новый Структура("ЦелевойПоказатель", ЦелевойПоказатель);
	//НайденныеСтроки = ЗависимостьПоказателейВФормулахРасчета.НайтиСтроки(ПараметрыОтбора);
	//Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	//	ИсходныеДанные.Вставить(НайденнаяСтрока.ПоказательРасчета.Идентификатор,
	//		ЗначенияКолонокРасчетаПоказателя(НайденнаяСтрока.ПоказательРасчета,ДеревоНачислений));
	//КонецЦикла;
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		Если СтрокаТипПоказателя.Показатель <> ЦелевойПоказатель Тогда	
			ИсходныеДанные.Вставить(СтрокаТипПоказателя.Показатель.Идентификатор,
				ЗначенияКолонокРасчетаПоказателя(СтрокаТипПоказателя.Показатель,ДеревоНачислений));	
		КонецЕсли;
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			ИсходныеДанные.Вставить(СтрокаПоказатель.Показатель.Идентификатор,
				ЗначенияКолонокРасчетаПоказателя(СтрокаПоказатель.Показатель,ДеревоНачислений));	
		КонецЦикла;			
	КонецЦикла;	
	
	Возврат ИсходныеДанные;
	
КонецФункции

Функция ЗначенияКолонокРасчетаПоказателя(ПоказательЭффективности,ДеревоНачислений)
	
	ЗначенияКолонокПоказателя = Новый Структура(КолонкиРасчетаЭффективностиДляФормулы());
	
	ПоказательНайден = Ложь;
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		Если СтрокаТипПоказателя.Показатель = ПоказательЭффективности Тогда
			ЗаполнитьЗначенияСвойств(ЗначенияКолонокПоказателя, СтрокаТипПоказателя);
			Прервать;
		КонецЕсли;
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			Если СтрокаПоказатель.Показатель = ПоказательЭффективности Тогда
				ЗаполнитьЗначенияСвойств(ЗначенияКолонокПоказателя, СтрокаПоказатель);
				ПоказательНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПоказательНайден Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначенияКолонокПоказателя;
	
КонецФункции

Функция ОпределитьШкалуПоказателя(Грейд, ВерсияГрейда, МодельПланирования, ТипПоказателя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УБ_УстановленныеШкалыПоказателей.ШкалаПоказателя КАК ШкалаПоказателя
	               |ИЗ
	               |	РегистрСведений.УБ_УстановленныеШкалыПоказателей КАК УБ_УстановленныеШкалыПоказателей
	               |ГДЕ
	               |	УБ_УстановленныеШкалыПоказателей.МодельПланирования = &МодельПланирования
	               |	И УБ_УстановленныеШкалыПоказателей.Грейд = &Грейд
	               |	И УБ_УстановленныеШкалыПоказателей.ВерсияГрейда = &ВерсияГрейда
	               |	И УБ_УстановленныеШкалыПоказателей.ТипПоказателя = &ТипПоказателя";
	Запрос.УстановитьПараметр("МодельПланирования",МодельПланирования);
	Запрос.УстановитьПараметр("Грейд",Грейд);
	Запрос.УстановитьПараметр("ВерсияГрейда",ВерсияГрейда);
	Запрос.УстановитьПараметр("ТипПоказателя",ТипПоказателя);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ШкалаПоказателя;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УБ_ВерсииГрейдовСрезПоследних.ШкалаПоказателей КАК ШкалаПоказателя
		               |ИЗ
		               |	РегистрСведений.УБ_ВерсииГрейдов.СрезПоследних КАК УБ_ВерсииГрейдовСрезПоследних
		               |ГДЕ
		               |	УБ_ВерсииГрейдовСрезПоследних.МодельПланированияЭффективности = &МодельПланирования
		               |	И УБ_ВерсииГрейдовСрезПоследних.Грейд = &Грейд
		               |	И УБ_ВерсииГрейдовСрезПоследних.ВерсияГрейда = &ВерсияГрейда";
		Запрос.УстановитьПараметр("МодельПланирования",МодельПланирования);
		Запрос.УстановитьПараметр("Грейд",Грейд);
		Запрос.УстановитьПараметр("ВерсияГрейда",ВерсияГрейда);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ШкалаПоказателя;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	


#КонецОбласти
