
#Область ОбработчикиПодписокНаСобытия

Процедура УБ_ЗаполнитьДоступностьРасчетаЭффективностиСотрудников(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицоПредыдущее = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ФизическоеЛицо");
	НедействителенПредыдущее = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Недействителен");
	Если Источник.ЭтоНовый() Или ФизическоеЛицоПредыдущее <> Источник.ФизическоеЛицо
		Или НедействителенПредыдущее <> Источник.Недействителен Тогда
		Источник.ДополнительныеСвойства.Вставить("ДобавитьДанныеДоступностиНовогоПользователя", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УБ_ОбновитьДоступностьРасчетаЭффективностиСотрудников(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;                       	 
	
	Если Источник.ДополнительныеСвойства.Свойство("ДобавитьДанныеДоступностиНовогоПользователя") Тогда
		
		ТаблицаФильтр = ТаблицаФильтрДоступностиРасчетаЭффективности();
		
		СтрокаФильтра = ТаблицаФильтр.Добавить(); 	
		СтрокаФильтра.Пользователь = Источник.Ссылка; 			
		СтрокаФильтра.ФизическоеЛицо = Источник.ФизическоеЛицо;
		СтрокаФильтра.ДатаНачала = '00010101';
		СтрокаФильтра.ДатаОкончания = '39991231235959'; 
		
		ОбновитьРегистрДоступностьРасчетаЭффективностиСотрудников(ТаблицаФильтр);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УБ_ОбновитьДоступностьРасчетаЭффективностиПриИзмененииКадровойИстории(Источник, Отказ, Замещение) Экспорт
	
	ИзменившиесяДанныеКадровойИстории = Источник.ТаблицаИзменившихсяДанныхНабора();
	
	Если ИзменившиесяДанныеКадровойИстории = Неопределено
		Или ИзменившиесяДанныеКадровойИстории.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛица = Новый Массив;
	
	Для Каждого СтрокаИзменений Из ИзменившиесяДанныеКадровойИстории Цикл
		Если ФизическиеЛица.Найти(СтрокаИзменений.ФизическоеЛицо) = Неопределено Тогда
			ФизическиеЛица.Добавить(СтрокаИзменений.ФизическоеЛицо);
		КонецЕсли;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ФизическоеЛицо В (&ФизическиеЛица)";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПользователей = РезультатЗапроса.Выбрать();
	
	ТаблицаФильтр = ТаблицаФильтрДоступностиРасчетаЭффективности();
	
	Пока ВыборкаПользователей.Следующий() Цикл
		СтрокаФильтра = ТаблицаФильтр.Добавить(); 			
		СтрокаФильтра.Пользователь = ВыборкаПользователей.Пользователь;
		СтрокаФильтра.ФизическоеЛицо = ВыборкаПользователей.ФизическоеЛицо;
		СтрокаФильтра.ДатаНачала = '00010101';
		СтрокаФильтра.ДатаОкончания = '39991231235959';
	КонецЦикла;
	
 	ОбновитьРегистрДоступностьРасчетаЭффективностиСотрудников(ТаблицаФильтр);
	
КонецПроцедуры

Процедура УБ_ОбновитьДоступностьРасчетаЭффективностиПриИзмененииРуководителяПодразделения(Источник, Отказ, Замещение) Экспорт
	
	ИзменившиесяДанные = Источник.ТаблицаИзменившихсяДанныхНабора();
	Если ИзменившиесяДанные = Неопределено
		Или ИзменившиесяДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФильтрРасчетаЭффективности = ТаблицаФильтрДоступностиРасчетаЭффективности();
	
	Если Тип(Источник) = Тип("РегистрСведенийНаборЗаписей.УБ_ДелегированныеСотрудникиПодразделения") Тогда 		
		МассивСтрокРасчетаЭффективности = ИзменившиесяДанные.НайтиСтроки(Новый Структура("ВидОперации", Перечисления.УБ_ВидыОперацийДелегирования.ПодсистемаМотивации));

		рэИзменившиесяДанные = ИзменившиесяДанные.Скопировать(МассивСтрокРасчетаЭффективности); 
		ЗаместителиРуководителей = рэИзменившиесяДанные.ВыгрузитьКолонку("СтароеЗначениеЗаместительРуководителя");

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗаместителиРуководителей, рэИзменившиесяДанные.ВыгрузитьКолонку("НовоеЗначениеЗаместительРуководителя"), Истина);               

		Для Каждого ЗаместительРуководителя Из ЗаместителиРуководителей Цикл
			Если ЗначениеЗаполнено(ЗаместительРуководителя) Тогда
				СтрокаФильтра = ТаблицаФильтрРасчетаЭффективности.Добавить();
				СтрокаФильтра.Пользователь = ЗаместительРуководителя;
				СтрокаФильтра.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаместительРуководителя,"ФизическоеЛицо"); 	
				СтрокаФильтра.ДатаНачала = '00010101';
				СтрокаФильтра.ДатаОкончания = '39991231235959';
			КонецЕсли;
		КонецЦикла;
		
	Иначе 		   
		ПользователиРуководителей = ИзменившиесяДанные.ВыгрузитьКолонку("СтароеЗначениеПользователь");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПользователиРуководителей,
			ИзменившиесяДанные.ВыгрузитьКолонку("НовоеЗначениеПользователь"), Истина);

		Для Каждого Руководитель Из ПользователиРуководителей Цикл
			Если ЗначениеЗаполнено(Руководитель) Тогда
				СтрокаФильтра = ТаблицаФильтрРасчетаЭффективности.Добавить();
				СтрокаФильтра.Пользователь = Руководитель;
				СтрокаФильтра.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Руководитель,"ФизическоеЛицо"); 	
				СтрокаФильтра.ДатаНачала = '00010101';
				СтрокаФильтра.ДатаОкончания = '39991231235959';
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	ОбновитьРегистрДоступностьРасчетаЭффективностиСотрудников(ТаблицаФильтрРасчетаЭффективности);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПерезаполнитьДанныеРегистра() Экспорт
	
	ТаблицаФильтр = ТаблицаФильтрДоступностиРасчетаЭффективности();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.Недействителен";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	
	Пока Выборка.Следующий() Цикл 
		
		СтрокаФильтра = ТаблицаФильтр.Добавить(); 	
		СтрокаФильтра.Пользователь = Выборка.Пользователь;
		СтрокаФильтра.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		СтрокаФильтра.ДатаНачала = '00010101';
		СтрокаФильтра.ДатаОкончания = '39991231235959'; 
		
	КонецЦикла;     	
	
	ОбновитьРегистрДоступностьРасчетаЭффективностиСотрудников(ТаблицаФильтр);
	
КонецПроцедуры

// возвращает предварительный текст запроса для динамического списка
// сотрудников
// например, может быть использован в форме УБ_ФормаВыбораСотрудника
// или при заполнении списков значений с отметками
&НаСервере
Функция ТекстЗапросаСписокСотрудников() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	Сотрудники.Ссылка КАК Ссылка,
	 |	Сотрудники.Код КАК Код,
	 |	Сотрудники.Наименование КАК Наименование,
	 |	ДанныеДляПодбора.Наименование КАК НаименованиеСотрудника,
	 |	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	 |	Сотрудники.ГоловнаяОрганизация КАК Организация,
	 |	Сотрудники.ВАрхиве КАК ВАрхиве,
	 |	Сотрудники.УточнениеНаименования КАК УточнениеНаименования,
	 |	ДанныеДляПодбора.Подразделение КАК Подразделение,
	 |	ДанныеДляПодбора.Должность КАК Должность,
	 |	ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
	 |	ДанныеДляПодбора.Начало КАК Начало,
	 |	ДанныеДляПодбора.Окончание КАК Окончание,
	 |	ЕСТЬNULL(МоделиПланированияСотрудников.МодельПланированияЭффективности, ЗНАЧЕНИЕ(Справочник.УБ_МоделиПланированияЭффективности.ПустаяСсылка)) КАК МодельПланированияЭффективности,
	 |	ЕСТЬNULL(МоделиПланированияСотрудников.Грейд, ЗНАЧЕНИЕ(Справочник.УБ_Грейды.ПустаяСсылка)) КАК Грейд,
	 |	ДанныеДляПодбора.ВидСобытия КАК ВидСобытия,
	 |	ВЫБОР
	 |		КОГДА ДанныеДляПодбора.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.УБ_ВидыКадровыхСобытий.Прием)
	 |				ИЛИ ДанныеДляПодбора.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.УБ_ВидыКадровыхСобытий.Перемещение)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК ДействующийСотрудник
	 |ИЗ
	 |	РегистрСведений.УБ_ДанныеДляПодбораСотрудников КАК ДанныеДляПодбора
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УБ_Сотрудники КАК Сотрудники
	 |		ПО ДанныеДляПодбора.Сотрудник = Сотрудники.Ссылка
	 |			И ДанныеДляПодбора.Наименование = Сотрудники.Наименование
	 |			И (ДанныеДляПодбора.ИдентификаторЗаписи В
	 |				(ВЫБРАТЬ ПЕРВЫЕ 1
	 |					ДанныеДляПодбораСотрудниковОтбор.ИдентификаторЗаписи
	 |				ИЗ
	 |					РегистрСведений.УБ_ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудниковОтбор
	 |				ГДЕ
	 |					ДанныеДляПодбораСотрудниковОтбор.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.УБ_ВидыКадровыхСобытий.Увольнение)
	 |					И ДанныеДляПодбораСотрудниковОтбор.Сотрудник = ДанныеДляПодбора.Сотрудник
	 |					И ДанныеДляПодбораСотрудниковОтбор.Наименование = ДанныеДляПодбора.Наименование
	 |					И ДанныеДляПодбораСотрудниковОтбор.Начало <= &ДатаОкончания
	 |					И (ДанныеДляПодбораСотрудниковОтбор.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	 |						ИЛИ ДанныеДляПодбораСотрудниковОтбор.Окончание >= &ДатаНачала)
	 |				УПОРЯДОЧИТЬ ПО
	 |					ДанныеДляПодбораСотрудниковОтбор.Начало УБЫВ,
	 |					ДанныеДляПодбораСотрудниковОтбор.Организация,
	 |					ДанныеДляПодбораСотрудниковОтбор.Подразделение))
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(
	 |				&ДатаНачала,
	 |				(Период, Сотрудник) В
	 |					(ВЫБРАТЬ
	 |						МАКСИМУМ(МоделиПланированияСотрудников.Период) КАК Период,
	 |						МоделиПланированияСотрудников.Сотрудник КАК Сотрудник
	 |					ИЗ
	 |						РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(&ДатаНачала, ) КАК МоделиПланированияСотрудников
	 |					СГРУППИРОВАТЬ ПО
	 |						МоделиПланированияСотрудников.Сотрудник)) КАК МоделиПланированияСотрудников
	 |		ПО ДанныеДляПодбора.Сотрудник = МоделиПланированияСотрудников.Сотрудник
	 |			И (НЕ ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию.Закрыта
	 |				ИЛИ &ДатаНачала < ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию.ДатаЗакрытия)";
		
	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Функция ТекстОграниченияДоступаКСотрудникамРуководителя()  Экспорт
	
	ТекстОграничениеДоступа = 
		"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УБ_ДоступностьРасчетаЭффективностиСотрудниковДляПользователей КАК ДоступностьРасчетаЭффективностиДляПользователей
		|		ПО (ДоступностьРасчетаЭффективностиДляПользователей.Пользователь = &ТекущийПользователь)
		|		И (ДоступностьРасчетаЭффективностиДляПользователей.Организация = ДанныеДляПодбора.Организация)
		|		И (ДоступностьРасчетаЭффективностиДляПользователей.Подразделение = ДанныеДляПодбора.Подразделение)
		|		И (ДоступностьРасчетаЭффективностиДляПользователей.ИдентификаторЗаписи В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ДоступностьРасчетаЭффективности.ИдентификаторЗаписи
		|			ИЗ
		|				РегистрСведений.УБ_ДоступностьРасчетаЭффективностиСотрудниковДляПользователей КАК ДоступностьРасчетаЭффективности
		|			ГДЕ
		|				ДоступностьРасчетаЭффективности.Пользователь = &ТекущийПользователь
		|				И ДоступностьРасчетаЭффективности.Подразделение = ДанныеДляПодбора.Подразделение
		|				И ВЫБОР
		|					КОГДА ДоступностьРасчетаЭффективности.Сотрудник = ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоступностьРасчетаЭффективности.Сотрудник = ДанныеДляПодбора.Сотрудник
		|				КОНЕЦ
		|				И ДоступностьРасчетаЭффективности.ДатаНачала <= &ДатаОкончания
		|				И ВЫБОР
		|					КОГДА ДоступностьРасчетаЭффективности.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|					ИНАЧЕ ДоступностьРасчетаЭффективности.ДатаОкончания
		|				КОНЕЦ >= &ДатаНачала
		|			УПОРЯДОЧИТЬ ПО
		|				ДоступностьРасчетаЭффективности.Сотрудник))";
	
    	Возврат ТекстОграничениеДоступа;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаФильтрДоступностиРасчетаЭффективности()
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаФильтр.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаФильтр;
	
КонецФункции

Процедура ОбновитьРегистрДоступностьРасчетаЭффективностиСотрудников(ТаблицаФильтр)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФильтр", ТаблицаФильтр);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаФильтр.Пользователь КАК Пользователь,
		|	ТаблицаФильтр.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаФильтр.ДатаНачала КАК ДатаНачала,
		|	ТаблицаФильтр.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТТаблицаФильтр
		|ИЗ
		|	&ТаблицаФильтр КАК ТаблицаФильтр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(НазначенныеРуководителиПодразделений.Период, ДЕНЬ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(НазначенныеРуководителиПодразделений.ДатаОтстранения, ДЕНЬ) КАК КонецПериода,
		|	НазначенныеРуководителиПодразделений.Организация КАК Организация,
		|	НазначенныеРуководителиПодразделений.Подразделение КАК Подразделение,
		|	ТаблицаФильтр.Пользователь КАК Пользователь,
		|	ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ИСТИНА КАК ЭтоРуководитель,
		|	ЛОЖЬ КАК ЭтоДелегирование,
		|	ЛОЖЬ КАК ЭтоКадроваяИстория
		|ПОМЕСТИТЬ ВТКадроваяИсторияИРуководителиПодразделенийПериоды
		|ИЗ
		|	ВТТаблицаФильтр КАК ТаблицаФильтр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УБ_НазначенныеРуководителиПодразделений КАК НазначенныеРуководителиПодразделений
		|		ПО ТаблицаФильтр.Пользователь = НазначенныеРуководителиПодразделений.Пользователь
		|			И (НазначенныеРуководителиПодразделений.Период >= НАЧАЛОПЕРИОДА(ТаблицаФильтр.ДатаНачала, ДЕНЬ))
		|			И (НазначенныеРуководителиПодразделений.Период <= ВЫБОР
		|				КОГДА ТаблицаФильтр.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|				ИНАЧЕ КОНЕЦПЕРИОДА(ТаблицаФильтр.ДатаОкончания, ДЕНЬ)
		|			КОНЕЦ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДелегированныеСотрудникиПодразделения.Период, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(ДелегированныеСотрудникиПодразделения.ДатаОкончания, ДЕНЬ),
		|	ДелегированныеСотрудникиПодразделения.Организация,
		|	ДелегированныеСотрудникиПодразделения.Подразделение,
		|	ТаблицаФильтр.Пользователь,
		|	ДелегированныеСотрудникиПодразделения.Сотрудник,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	ВТТаблицаФильтр КАК ТаблицаФильтр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УБ_ДелегированныеСотрудникиПодразделения КАК ДелегированныеСотрудникиПодразделения
		|		ПО ТаблицаФильтр.Пользователь = ДелегированныеСотрудникиПодразделения.ЗаместительРуководителя
		|			И (ДелегированныеСотрудникиПодразделения.Период >= НАЧАЛОПЕРИОДА(ТаблицаФильтр.ДатаНачала, ДЕНЬ))
		|			И (ДелегированныеСотрудникиПодразделения.Период <= ВЫБОР
		|				КОГДА ТаблицаФильтр.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|				ИНАЧЕ КОНЕЦПЕРИОДА(ТаблицаФильтр.ДатаОкончания, ДЕНЬ)
		|			КОНЕЦ)
		|ГДЕ
		|	ДелегированныеСотрудникиПодразделения.ВидОперации = &ВидОперации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.Период, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(ТаблицаФильтр.ДатаОкончания, ДЕНЬ),
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	ТаблицаФильтр.Пользователь,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ВТТаблицаФильтр КАК ТаблицаФильтр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УБ_КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ТаблицаФильтр.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо
		|			И (КадроваяИсторияСотрудников.Период >= НАЧАЛОПЕРИОДА(ТаблицаФильтр.ДатаНачала, ДЕНЬ))
		|			И (КадроваяИсторияСотрудников.Период <= ВЫБОР
		|				КОГДА ТаблицаФильтр.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|				ИНАЧЕ КОНЕЦПЕРИОДА(ТаблицаФильтр.ДатаОкончания, ДЕНЬ)
		|			КОНЕЦ)
		|			И (КадроваяИсторияСотрудников.Подразделение <> ЗНАЧЕНИЕ(Справочник.УБ_Подразделения.ПустаяСсылка))
		|			И (КадроваяИсторияСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.УБ_ВидыКадровыхСобытий.Увольнение))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КадроваяИсторияИРуководители.НачалоПериода, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
		|	КадроваяИсторияИРуководители.КонецПериода КАК ДатаОкончания,
		|	КадроваяИсторияИРуководители.Организация КАК Организация,
		|	КадроваяИсторияИРуководители.Подразделение КАК Подразделение,
		|	ЕСТЬNULL(КадроваяИсторияИРуководители.Сотрудник, ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка)) КАК Сотрудник,
		|	ТаблицаФильтр.Пользователь КАК Пользователь,
		|	ЕСТЬNULL(КадроваяИсторияИРуководители.ЭтоРуководитель, ЛОЖЬ) КАК ЭтоРуководитель,
		|	ЕСТЬNULL(КадроваяИсторияИРуководители.ЭтоДелегирование, ЛОЖЬ) КАК ЭтоДелегирование,
		|	ЕСТЬNULL(КадроваяИсторияИРуководители.ЭтоКадроваяИстория, ЛОЖЬ) КАК ЭтоКадроваяИстория
		|ИЗ
		|	ВТТаблицаФильтр КАК ТаблицаФильтр
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияИРуководителиПодразделенийПериоды КАК КадроваяИсторияИРуководители
		|		ПО ТаблицаФильтр.Пользователь = КадроваяИсторияИРуководители.Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь,
		|	Организация,
		|	Сотрудник,
		|	ДатаНачала
		|ИТОГИ ПО
		|	Пользователь,
		|	Организация,
		|	Сотрудник";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.УБ_ВидыОперацийДелегирования.ПодсистемаМотивации);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПользователи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Пользователь");
	
	Пока ВыборкаПользователи.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.УБ_ДоступностьРасчетаЭффективностиСотрудниковДляПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаПользователи.Пользователь);
		
		ВыборкаОрганизации = ВыборкаПользователи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
		Пока ВыборкаОрганизации.Следующий() Цикл
			
			ВыборкаСотрудники = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
			Пока ВыборкаСотрудники.Следующий() Цикл
				
				ПредыдущаяСтрокаКадровойИстории = Неопределено;
				
				ВыборкаДетальныеЗаписи = ВыборкаСотрудники.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписи.ЭтоРуководитель Тогда
		
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаНачала) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ВыборкаДетальныеЗаписи.ЭтоКадроваяИстория Тогда
						
						Если ПредыдущаяСтрокаКадровойИстории = Неопределено
							Или ПредыдущаяСтрокаКадровойИстории.Подразделение <> ВыборкаДетальныеЗаписи.Подразделение Тогда
							
							Если ПредыдущаяСтрокаКадровойИстории <> Неопределено Тогда
								ПредыдущаяСтрокаКадровойИстории.ДатаОкончания = НачалоДня(ВыборкаДетальныеЗаписи.ДатаНачала) - 1;
							КонецЕсли;
							
							СтрокаНабора = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаДетальныеЗаписи);
							
							СтрокаНабора.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
							
							ПредыдущаяСтрокаКадровойИстории = СтрокаНабора;
							
						КонецЕсли;
						
					Иначе
						
						СтрокаНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаДетальныеЗаписи);
						
						СтрокаНабора.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры

#КонецОбласти
