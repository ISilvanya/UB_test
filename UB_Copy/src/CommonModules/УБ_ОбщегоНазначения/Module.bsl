#Область ДанныеВБазе
// Возвращает всех родителей элемента, согласно рекомендациям на ИТС:
// "Получение всех родителей элемента" (https://its.1c.ru/db/metod8dev/content/2659/hdoc)
//
// Параметры:
//  СсылкаНаЭлемент  - СправочникСсылка, ПланВидовХарактеристикСсылка - Ссылка на элемент, родителей которого нужно найти
//  КоличествоВыбираемыхЗаПорцию  - Число - Количество выбираемых родителей за одно выполнение запроса. 
//		Используется минимальное число из переданного и ограничения количества уровней в конфигураторе
//
// Возвращаемое значение:
//   Массив[СправочникСсылка, ПланВидовХарактеристикСсылка] - массив с родителями элемента
//
&НаСервереБезКонтекста
Функция РодителиЭлемента(СсылкаНаЭлемент, Знач КоличествоВыбираемыхЗаПорцию = 5) Экспорт
	
	РодителиЭлемента = Новый Массив;
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Возврат РодителиЭлемента;
	КонецЕсли;
	
	МетаданныеЭлемента = СсылкаНаЭлемент.Метаданные();
	Если МетаданныеЭлемента.ОграничиватьКоличествоУровней Тогда
		КоличествоВыбираемыхЗаПорцию = Мин(КоличествоВыбираемыхЗаПорцию, МетаданныеЭлемента.КоличествоУровней);
	КонецЕсли;
	
	ВыбираемыеПоля = Новый Массив;
	ВыбираемоеПоле = "Родитель";
	Для НомерРодителя = 1 По КоличествоВыбираемыхЗаПорцию Цикл
		ВыбираемыеПоля.Добавить(ВыбираемоеПоле);
		ВыбираемоеПоле = ВыбираемоеПоле + ".Родитель";
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ %1 ИЗ %2 ГДЕ Ссылка = &ТекущийЭлемент";
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, СтрСоединить(ВыбираемыеПоля, ","), МетаданныеЭлемента.ПолноеИмя());
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ТекущийЭлемент = СсылкаНаЭлемент;
	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл
		
		Запрос.УстановитьПараметр("ТекущийЭлемент", ТекущийЭлемент); 
		Результат = Запрос.Выполнить(); 
		Если Результат.Пустой() Тогда 
			Прервать; 
		КонецЕсли; 
		
		Выборка = Результат.Выбрать(); 
		Выборка.Следующий(); 
		Для НомерКолонки = 0 По Результат.Колонки.Количество() - 1 Цикл 
			ТекущийЭлемент = Выборка[НомерКолонки]; 
			Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда 
				РодителиЭлемента.Добавить(ТекущийЭлемент);
			Иначе 
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат РодителиЭлемента;
	
КонецФункции            

#КонецОбласти

Процедура УБ_ОбработкаЗаполненияОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	МетаданныеОбъекта = Источник.Метаданные();
	
	Если Лев(ТипЗнч(Источник), 17) = "Справочник объект" Тогда
		Если МетаданныеОбъекта.Иерархический И Источник.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьРеквизитДолжность = МетаданныеОбъекта.Реквизиты.Найти("Должность") <> Неопределено;
	ЕстьРеквизитПодразделение = МетаданныеОбъекта.Реквизиты.Найти("Подразделение") <> Неопределено;
	ЕстьРеквизитПоказательРасчетаЗарплаты = МетаданныеОбъекта.Реквизиты.Найти("ПоказательРасчетаЗарплаты") <> Неопределено;
	ЕстьРеквизитСотрудник = МетаданныеОбъекта.Реквизиты.Найти("Сотрудник") <> Неопределено;
	ЕстьРеквизитШтатноеРасписание = МетаданныеОбъекта.Реквизиты.Найти("ШтатноеРасписание") <> Неопределено;
	
	Если УБ_ОбщегоНазначенияПовтИсп.ИспользоватьСправочникиКАУП() Тогда
		
		Если ЕстьРеквизитДолжность
			И ТипЗнч(Источник.Должность) <> Тип("СправочникСсылка.Должности") Тогда				
			Источник.Должность = Справочники.Должности.ПустаяСсылка();
		КонецЕсли;
		
		Если ЕстьРеквизитПодразделение
			И ТипЗнч(Источник.Подразделение) <> Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Источник.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
		Если ЕстьРеквизитПоказательРасчетаЗарплаты
			И ТипЗнч(Источник.ПоказательРасчетаЗарплаты) <> Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда
			Источник.ПоказательРасчетаЗарплаты = Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка();
		КонецЕсли;
		
		Если ЕстьРеквизитСотрудник
			И ТипЗнч(Источник.Сотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
			Источник.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		
		Если ЕстьРеквизитШтатноеРасписание
			И ТипЗнч(Источник.ШтатноеРасписание) <> Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			Источник.ШтатноеРасписание = Справочники.ШтатноеРасписание.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если ЕстьРеквизитДолжность
			И ТипЗнч(Источник.Должность) <> Тип("СправочникСсылка.УБ_Должности") Тогда
			Источник.Должность = Справочники.УБ_Должности.ПустаяСсылка();
		КонецЕсли;
		
		Если ЕстьРеквизитПодразделение
			И ТипЗнч(Источник.Подразделение) <> Тип("СправочникСсылка.УБ_Подразделения") Тогда
			Источник.Подразделение = Справочники.УБ_Подразделения.ПустаяСсылка();
		КонецЕсли;
		
		Если ЕстьРеквизитПоказательРасчетаЗарплаты
			И ТипЗнч(Источник.ПоказательРасчетаЗарплаты) <> Тип("СправочникСсылка.УБ_ПоказателиРасчетаЗарплаты") Тогда
			Источник.ПоказательРасчетаЗарплаты = Справочники.УБ_ПоказателиРасчетаЗарплаты.ПустаяСсылка();
		КонецЕсли;
		
		Если ЕстьРеквизитСотрудник
			И ТипЗнч(Источник.Сотрудник) <> Тип("СправочникСсылка.УБ_Сотрудники") Тогда
			Источник.Сотрудник = Справочники.УБ_Сотрудники.ПустаяСсылка();
		КонецЕсли;
		
		Если ЕстьРеквизитШтатноеРасписание
			И ТипЗнч(Источник.ШтатноеРасписание) <> Тип("СправочникСсылка.УБ_ШтатноеРасписание") Тогда
			Источник.ШтатноеРасписание = Справочники.УБ_ШтатноеРасписание.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТипЗначенияСвязанныхРеквизитовПоУмолчанию(Объект, СписокРеквизитов, ИмяТабличнойЧасти = Неопределено) Экспорт
	
	МассивРеквизитов = Новый Массив;
	Если ТипЗнч(СписокРеквизитов) = Тип("Массив") Тогда
		МассивРеквизитов = СписокРеквизитов;
	ИначеЕсли ТипЗнч(СписокРеквизитов) = Тип("Строка") Тогда
		
		СписокРеквизитов = СтрРазделить(СписокРеквизитов, ",");
		Для Каждого ИмяРеквизита Из СписокРеквизитов Цикл
			МассивРеквизитов.Добавить(СокрЛП(ИмяРеквизита));
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = Неопределено Тогда
		
		Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
			Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			Если Объект[ИмяРеквизита] = Неопределено Тогда
				Объект[ИмяРеквизита] = ЗначениеРеквизитаПоУмолчанию(ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
			
			Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
				Если СтрокаТабличнойЧасти[ИмяРеквизита] = Неопределено Тогда
					СтрокаТабличнойЧасти[ИмяРеквизита] = ЗначениеРеквизитаПоУмолчанию(ИмяРеквизита);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// (источник https://infostart.ru/1c/articles/1335442/
Функция ДобавитьУсловноеОформление(ФормаОбъекта, ПараметрыОформления, Отбор) экспорт
	
	ПолеОформления = СтрЗаменить(Отбор.ТЧ,"Объект.","");
	
	НовыйЭлемент = ФормаОбъекта.УсловноеОформление.Элементы.Добавить(); 
	Для Каждого Элемент Из ПараметрыОформления Цикл
		
		Если Элемент.Ключ="Поле" Тогда
			ПолеОформления = Элемент.Значение;
		Иначе
			НовыйЭлемент.Оформление.УстановитьЗначениеПараметра(Элемент.Ключ, Элемент.Значение);	
		КонецЕсли;	
		
	КонецЦикла;		
	НовыйЭлемент.Использование = Истина;
			
	ОформляемыеПоля = НовыйЭлемент.Поля.Элементы.Добавить();
	ОформляемыеПоля.Поле = Новый ПолеКомпоновкиДанных(ПолеОформления);
	
	ЭлементОтбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(Отбор.ТЧ+"."+Отбор.Поле);
	
	Если Отбор.Свойство("ВидСравнения") Тогда
		ЭлементОтбор.ВидСравнения  	= Отбор.ВидСравнения;
	Иначе	
		ЭлементОтбор.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементОтбор.ПравоеЗначение = Отбор.Значение;	
	
	Возврат Новый Структура("Элемент, Отбор", ФормаОбъекта.УсловноеОформление.Элементы.Количество()-1, НовыйЭлемент.Отбор.Элементы.Количество()-1);
	
КонецФункции

Процедура СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(ТекстЗапроса) Экспорт
	
	Если УБ_ОбщегоНазначенияПовтИсп.ИспользоватьСправочникиКАУП() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"Справочник.УБ_Должности",
			"Справочник.Должности");
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"Справочник.УБ_Подразделения",
			"Справочник.ПодразделенияОрганизаций");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"Справочник.УБ_ПоказателиРасчетаЗарплаты",
			"Справочник.ПоказателиРасчетаЗарплаты");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"Справочник.УБ_Сотрудники",
			"Справочник.Сотрудники");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"Справочник.УБ_ШтатноеРасписание",
			"Справочник.ШтатноеРасписание");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"РегистрСведений.УБ_ДанныеДляПодбораСотрудников",
			"РегистрСведений.ДанныеДляПодбораСотрудников");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"РегистрСведений.УБ_КадроваяИсторияСотрудников",
			"РегистрСведений.КадроваяИсторияСотрудников");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"Перечисление.УБ_ВидыКадровыхСобытий",
			"Перечисление.ВидыКадровыхСобытий");
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СкорректироватьСхемуПодТекущуюКонфигурацию(Схема) Экспорт
	
	Если УБ_ОбщегоНазначенияПовтИсп.ИспользоватьСправочникиКАУП() Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.УБ_Подразделения") ; 
		ОписаниеТипаКАУП = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций") ; 
		Для каждого НаборДанных Из Схема.НаборыДанных Цикл
			Для каждого Поле Из НаборДанных.Поля Цикл
				Если Поле.ТипЗначения = ОписаниеТипа Тогда
					Поле.ТипЗначения = ОписаниеТипаКАУП;	
				КонецЕсли;	
				
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеРеквизитаПоУмолчанию(ИмяРеквизита = "") Экспорт
	
	ЗначениеПоУмолчанию = Неопределено;
	
	Если УБ_ОбщегоНазначенияПовтИсп.ИспользоватьСправочникиКАУП() Тогда
		
		Если ИмяРеквизита = "Должность" Тогда
			ЗначениеПоУмолчанию = Справочники.Должности.ПустаяСсылка();
		ИначеЕсли ИмяРеквизита = "Подразделение" Тогда
			ЗначениеПоУмолчанию = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ИначеЕсли ИмяРеквизита = "ПоказательРасчетаЗарплаты" Тогда
			ЗначениеПоУмолчанию = Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка();
		ИначеЕсли ИмяРеквизита = "Сотрудник" Тогда
			ЗначениеПоУмолчанию = Справочники.Сотрудники.ПустаяСсылка();
		ИначеЕсли ИмяРеквизита = "ШтатноеРасписание" Или ИмяРеквизита = "ДолжностьПоШтатномуРасписанию" Тогда
			ЗначениеПоУмолчанию = Справочники.ШтатноеРасписание.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если ИмяРеквизита = "Должность" Тогда
			ЗначениеПоУмолчанию = Справочники.УБ_Должности.ПустаяСсылка();
		ИначеЕсли ИмяРеквизита = "Подразделение" Тогда
			ЗначениеПоУмолчанию = Справочники.УБ_Подразделения.ПустаяСсылка();
		ИначеЕсли ИмяРеквизита = "ПоказательРасчетаЗарплаты" Тогда
			ЗначениеПоУмолчанию = Справочники.УБ_ПоказателиРасчетаЗарплаты.ПустаяСсылка();
		ИначеЕсли ИмяРеквизита = "Сотрудник" Тогда
			ЗначениеПоУмолчанию = Справочники.УБ_Сотрудники.ПустаяСсылка();
		ИначеЕсли ИмяРеквизита = "ШтатноеРасписание" Или ИмяРеквизита = "ДолжностьПоШтатномуРасписанию" Тогда
			ЗначениеПоУмолчанию = Справочники.УБ_ШтатноеРасписание.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;      
	
	Если ИмяРеквизита = "Компания" Тогда
		ЗначениеПоУмолчанию = Справочники.УБ_Компании.Компания;
	КонецЕсли;
	
	//TODO ООО 21.01.2022  уточнить идентификаторы
	Если УБ_ОбщегоНазначенияПовтИсп.ЭтоРозница() Тогда
		ЗначениеПоУмолчанию = Неопределено;
	Иначе
		Если ИмяРеквизита = "Проект" Тогда		//проекты предполагаются во всех конфигурациях
			ЗначениеПоУмолчанию = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли; 		
	КонецЕсли;
	
	Если ИмяРеквизита = "Организация" Тогда
		ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат  ЗначениеПоУмолчанию;
	
КонецФункции

Функция ПолучитьИмяФормыВыбораПоСсылке(Ссылка) Экспорт
    Возврат Ссылка.Метаданные().ПолноеИмя() + ".ФормаВыбора";
КонецФункции

Функция ПолучитьИмяФормыПоСсылке(Ссылка, ВидФормы = "ФормаЭлемента") Экспорт
    Возврат Ссылка.Метаданные().ПолноеИмя()+".Форма." + ВидФормы;
КонецФункции

#Область ОбслуживаниеВстраиванияКонфигурации
Функция ЭтоПодразделение(Значение) Экспорт
	
	Попытка      
		Если УБ_ОбщегоНазначенияПовтИсп.ИспользоватьСправочникиКАУП() Тогда
 			Возврат Значение = Тип ("СправочникСсылка.ПодразделенияОрганизаций") или Значение = Тип("СправочникСсылка.УБ_Подразделения");
		Иначе
			Возврат Значение = Тип("СправочникСсылка.УБ_Подразделения");
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
		
КонецФункции

 ////////////////////////////////////////////////////////////////////////////////
 //
 // Функция 
 //
 // Описание:
 // Проверяет переданный параметр на соответствие одному из типов значений
 // для обычных конфигураций - Должность, для УБ - УБ_должность
 // Параметры (название, тип, дифференцированное значение)
 // Значение - Тип
 // Возвращаемое значение: Булево

 Функция ЭтоДолжность(Значение) Экспорт
	
	Попытка
 		Возврат Значение = Тип ("СправочникСсылка.Должности") или Значение = Тип("СправочникСсылка.УБ_Должности");
	Исключение
		Возврат Ложь;
	КонецПопытки;
		
КонецФункции

// Параметры
// Значение - Тип
Функция ЭтоСотрудник(Значение) Экспорт
	
	Попытка
		Возврат Значение = Тип ("СправочникСсылка.Сотрудники") или Значение = Тип("СправочникСсылка.УБ_Сотрудники") ;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	//Попытка
	//	Возврат Значение = Тип ("СправочникСсылка.Сотрудники") ;
	//Исключение
	//	Возврат Значение = Тип("СправочникСсылка.УБ_Сотрудники") 
	//КонецПопытки;
		
КонецФункции
#КонецОбласти

//#Область МетодыРаботыАвтозаполненияРеквизитовДокумента

//// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
//// 
//// Параметры:
////  Разрядность 			- число, разряд числа.
////  РазрядностьДробнойЧасти - число, разряд дробной части.
////  Неотрицательный - Булево, если Истина, то числа только положительные, если Ложь, то любые.
////
//// Возвращаемое значение:
////  Объект "ОписаниеТипов" для числа указанной разрядности.
////
//Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти, Неотрицательный = Ложь) Экспорт
//	
//	Если Неотрицательный Тогда
//		Знак = ДопустимыйЗнак.Неотрицательный;
//	Иначе
//		Знак = ДопустимыйЗнак.Любой;
//	КонецЕсли;
//	
//	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак));

//КонецФункции // ПолучитьОписаниеТиповЧисла()        

//// Служебная функция, предназначенная для получения описания типов даты
//// 
//// Параметры:
////  ЧастиДаты - системное перечисление ЧастиДаты.
//// 
//Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

//	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты));

//КонецФункции // ПолучитьОписаниеТиповДаты()

//#КонецОбласти

//#Область ПрочиеПроцедурыИФункции


//// Возвращает таблицу значений на основании массива структур
//// 
//// Параметры:
////	МассивСтруктур - МассивСтруктур - массив структур, которые будут преобразованы в таблиц значений.
////										Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
////
//// Возвращаемое значение:
////	ТаблицаЗначений - таблица значений, созданная из массива структур.
//// 
//Функция МассивВТаблицуЗначений(МассивСтруктур) Экспорт
//	Таблица = Новый ТаблицаЗначений;
//	// Создадим колонки по первой структуре массива
//	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
//		И МассивСтруктур.Количество() <> 0 Тогда
//		ПерваяСтруктура = МассивСтруктур[0];
//		Для Каждого Свойство Из ПерваяСтруктура Цикл 
//			Таблица.Колонки.Добавить(Свойство.Ключ, ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
//		КонецЦикла;
//		
//		Для Каждого Структура Из МассивСтруктур Цикл 
//			НоваяСтрока = Таблица.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
//		КонецЦикла;
//	КонецЕсли;
//	
//	Возврат Таблица;
//КонецФункции         

//#КонецОбласти 

#Область ПроцедурыИФункцииИспользуемыеПриКонструированииЗапросов //(из ЗУП)

// Возвращает фрагмент текста запроса, отделяющего один запрос от другого.
//
Функция РазделительЗапросов() Экспорт
	
	Возврат "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
КонецФункции

// Добавляет к тексту запроса, переданному в параметре ТекстЗапроса, текст запроса
// уничтожения временной таблицы.
//
// Параметры:
//		ТекстЗапроса - Строка
//		ИмяВременнойТаблицы - Строка
//
Процедура ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВременнойТаблицы) Экспорт
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = ?(ПустаяСтрока(ТекстЗапроса), "", ТекстЗапроса + РазделительЗапросов()) + "УНИЧТОЖИТЬ " + ИмяВременнойТаблицы;
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет замену имени временной таблицы. Если не указано новое имя 
// временной таблицы, производится удаление из текста запроса строки, осуществляющей
// создание временной таблицы. Если новое имя временной таблицы передано, то производится
// замена всех фрагментов текста, содержащих старое имя временной таблицы на новое имя.
//
// Параметры:
//	ТекстЗапроса
//	ТекущееИмяТаблицы
//	НовоеИмяТаблицы
//
Процедура ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, ТекущееИмяТаблицы, НовоеИмяТаблицы = "") Экспорт
	
	Если ПустаяСтрока(НовоеИмяТаблицы) Тогда
		ЗамещаемыйТекст = "";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ " + ТекущееИмяТаблицы, "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ " + ТекущееИмяТаблицы, "ПОМЕСТИТЬ " + НовоеИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Формирует временную таблицу периодов с заданной периодичностью, формируемой, с помощью,
// запроса, возвращаемого методом ЗапросВТПериоды.
// Создает в МенеджерВременныхТаблиц временную таблицу с именем <ИмяВТ> 
// и периодичностью <Периодичность>	
// за интервал с <НачалоИнтервала> по <ОкончаниеИнтервала>.
// Если в ДопПараметры (Структура) передан Календарь, тогда ВТ строится по календарному графику

Процедура СоздатьВТПериоды(МенеджерВременныхТаблиц, НачалоИнтервала, ОкончаниеИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ДопПараметры) Экспорт
	
	перем Календарь;	
	
	Если НачалоИнтервала > ОкончаниеИнтервала Тогда
		ВызватьИсключение НСтр("ru='Дата окончания не может быть меньше даты начала.'")
	КонецЕсли;
	ДопПараметры.Свойство("Календарь", Календарь);
	Если НЕ Календарь = Справочники.Календари.ПустаяСсылка() и
		ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ГрафикиРаботы") Тогда
		Графики = Новый Массив;
		Графики.Добавить(Календарь);
		МодульГрафикиРаботы = ОбщегоНазначения.ОбщийМодуль("ГрафикиРаботы");
		//тут можно узнать много полезного - кроме собственно дня, еще его продолжительность
		МодульГрафикиРаботы.СоздатьВТРасписанияРаботыНаПериод(МенеджерВременныхТаблиц, Графики, НачалоИнтервала, ОкончаниеИнтервала);
		Запрос = ЗапросВТПериодыПоКалендарю();			
	Иначе
		Запрос = ЗапросВТПериоды(НачалоИнтервала, ОкончаниеИнтервала, Периодичность, ИмяПоляПериод, ИмяВТ, ДопПараметры.ИспользоватьКонецПериода);	
	КонецЕсли;

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция возвращает запрос, формирующий временную таблицу периодов с заданной периодичностью.
//
// Параметры:
//	ОписаниеНачалаИнтервала - Строка, имя параметра в тексте запроса ("&НачалоПериода", "ДАТАВРЕМЯ(2013, 1, 1)").
//							- Дата, начальная дата интервала, за который формируются периоды.
//	ОписаниеОкончанияИнтервала -  Строка, имя параметра в тексте запроса,
//							- Дата, конечная дата интервала, за который формируются периоды.
//	Периодичность - периодичность, на которую будет разбиваться интервал.
//		По умолчанию <МЕСЯЦ>. Может принимать значения:	ГОД, КВАРТАЛ, МЕСЯЦ, ДЕНЬ.
//	ИмяПоляПериод - наименование колонки во временной таблице периодов. 
//		По умолчанию <Период>.
//	ИмяВТ - наименование временной таблицы периодов, по умолчанию <ВТПериоды>.
//	ИспользоватьКонецПериода - булево, необязательный, по умолчанию - Ложь. 
//		Определяет необходимость использовать в качестве значения последнюю секунду периода. 
//		То есть если Истина, то для периодичности месяц, 
//		временная таблица будет заполнена датами конца каждого месяца, 
//		и если ложь, то - датами начала.
//
Функция ЗапросВТПериоды(Знач ОписаниеНачалаИнтервала, Знач ОписаниеОкончанияИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) Экспорт
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Дата")
		И ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Дата") Тогда
		
		Если ОписаниеОкончанияИнтервала < ОписаниеНачалаИнтервала Тогда
			
			ТекстИсключения = НСтр("ru='Дата окончания периода не может быть меньше даты начала'");
			ВызватьИсключение ТекстИсключения;
			
		Иначе
			
			ЛетВИнтервале = Год(ОписаниеОкончанияИнтервала) - Год(ОписаниеНачалаИнтервала);
			Если ЛетВИнтервале > 100 Тогда
				
				ТекстИсключения = НСтр("ru='Попытка получить данные за слишком большой интервал времени'")
					+ " (%1 " + НСтр("ru='лет'") + ": " + НСтр("ru='с'")+ " %2 " + НСтр("ru='по'") + " %3)";
				
				ТекстИсключения = СтрШаблон(ТекстИсключения, Формат(ЛетВИнтервале, "ЧГ="), Формат(ОписаниеНачалаИнтервала, "ДЛФ=D"), Формат(ОписаниеОкончанияИнтервала, "ДЛФ=D"));
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК Цифра
		|ПОМЕСТИТЬ ВТЦифры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС) КАК ИмяПоляПериод
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	ВТЦифры КАК Цифры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры1000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 999)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9999)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99999)
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС) МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала";
	
	Если ВРег(Периодичность) <> "ГОД"
		И ВРег(Периодичность) <> "КВАРТАЛ"
		И ВРег(Периодичность) <> "МЕСЯЦ"
		И ВРег(Периодичность) <> "ДЕНЬ" Тогда
		
		ВызватьИсключение НСтр("ru='Невозможно сформировать запрос с переданными параметрами.'");
		
	КонецЕсли;
	
	Если ИспользоватьКонецПериода Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НАЧАЛОПЕРИОДА", "КОНЕЦПЕРИОДА");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЧАС", Периодичность);
	ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ИмяПоляПериод", "КАК " + ИмяПоляПериод);
	
	Если ИспользоватьКонецПериода Тогда
		НачалоПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	Иначе
		НачалоПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериодаИнтервала", НачалоПериодаИнтервалаПредставление);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеПериодаИнтервала", ОкончаниеПериодаИнтервалаПредставление);
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Строка") Тогда
		НачалоИнтервалаПредставление = ОписаниеНачалаИнтервала;
	Иначе
		НачалоИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеНачалаИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Строка") Тогда
		ОкончаниеИнтервалаПредставление = ОписаниеОкончанияИнтервала;
	Иначе
		ОкончаниеИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеОкончанияИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоИнтервала",
		"ВЫБОР КОГДА " + НачалоИнтервалаПредставление + " = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДАТАВРЕМЯ(1980, 1, 1) ИНАЧЕ " + НачалоИнтервалаПредставление + " КОНЕЦ");
	
	ИмяОкончаниеИнтервала = "ОкончаниеИнтервала" + СтрЗаменить(ИмяВТ, "_", "");
	Запрос.УстановитьПараметр(ИмяОкончаниеИнтервала, ДобавитьМесяц(ТекущаяДатаСеанса(), 60));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеИнтервала",
		"ВЫБОР КОГДА " + ОкончаниеИнтервалаПредставление+ " = КОНЕЦПЕРИОДА(ДАТАВРЕМЯ(1, 1, 1), " + ВРег(Периодичность) + ") ТОГДА &" + ИмяОкончаниеИнтервала + " ИНАЧЕ " + ОкончаниеИнтервалаПредставление+ " КОНЕЦ");
	
	ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТЦифры");
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Функция возвращает запрос, формирующий временную таблицу периодов с заданной периодичностью.
//
// Параметры:
//	ОписаниеНачалаИнтервала - Строка, имя параметра в тексте запроса ("&НачалоПериода", "ДАТАВРЕМЯ(2013, 1, 1)").
//							- Дата, начальная дата интервала, за который формируются периоды.
//	ОписаниеОкончанияИнтервала -  Строка, имя параметра в тексте запроса,
//							- Дата, конечная дата интервала, за который формируются периоды.
//	Периодичность - периодичность, на которую будет разбиваться интервал.
//		По умолчанию <МЕСЯЦ>. Может принимать значения:	ГОД, КВАРТАЛ, МЕСЯЦ, ДЕНЬ.
//	ИмяПоляПериод - наименование колонки во временной таблице периодов. 
//		По умолчанию <Период>.
//	ИмяВТ - наименование временной таблицы периодов, по умолчанию <ВТПериоды>.
//	ИспользоватьКонецПериода - булево, необязательный, по умолчанию - Ложь. 
//		Определяет необходимость использовать в качестве значения последнюю секунду периода. 
//		То есть если Истина, то для периодичности месяц, 
//		временная таблица будет заполнена датами конца каждого месяца, 
//		и если ложь, то - датами начала.
//
Функция ЗапросВТПериодыПоКалендарю() 
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТРасписанияРаботы.ДатаГрафика КАК Период
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции


#КонецОбласти


// Возвращает список форм, в которых используется функционал границ эффективности
// Возвращаемое значение:
// Массив
Функция ФормаВходитСписокФормСГраницамиЭффективности(ИмяФормы) Экспорт
	
	МассивФормПроверямыхДокументов = Новый Массив;
	МассивФормПроверямыхДокументов.Добавить("Справочник.УБ_ПоказателиЭффективности.Форма.ФормаЭлемента");
	МассивФормПроверямыхДокументов.Добавить("Документ.УБ_ПланированиеЦелейИПоказателей.Форма.ФормаРедактированияСтрокиПоказателя");
	МассивФормПроверямыхДокументов.Добавить("Справочник.УБ_ТипыПоказателей.Форма.ФормаЭлемента");
	МассивФормПроверямыхДокументов.Добавить("Документ.УБ_УтверждениеГрейда.Форма.ФормаПараметров");
	МассивФормПроверямыхДокументов.Добавить("Обработка.УБ_ПанельАдминистрирования.Форма.НастройкиУБ");
	
	Возврат МассивФормПроверямыхДокументов.Найти(ИмяФормы) <> Неопределено;
			
КонецФункции
