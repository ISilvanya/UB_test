#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Подразделение)";
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//     КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для   изменения.
//         См. описание 1 параметра процедуры   ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//     Параметры - Структура - Вспомогательные параметры. Для чтения.
//         См. описание 2 параметра процедуры   ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов,   Параметры) Экспорт	
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УБ_АнализЭффективностиСотрудников) Тогда
		Команда = КомандыОтчетов.Добавить();
		Команда.Представление = НСтр("ru = 'Анализ эффективности сотрудника'");
		Команда.Важность = "Важное";
		Команда.ВидимостьВФормах = "ФормаДокумента";
		Команда.МножественныйВыбор = Ложь;
		Команда.РежимЗаписи = "Проводить";
		Команда.Менеджер = Метаданные.Отчеты.УБ_АнализЭффективностиСотрудников.ПолноеИмя();
		Команда.КлючВарианта = "АнализЭффективностиСотрудниковИзДокумента";
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УБ_ОписаниеПоказателейЭффективностиСотрудников) Тогда
		Команда = КомандыОтчетов.Добавить();
		Команда.Представление = НСтр("ru = 'Описание показателей эффективности'");
		Команда.Важность = "Важное";
		Команда.ВидимостьВФормах = "ФормаДокумента";
		Команда.МножественныйВыбор = Ложь;
		Команда.Менеджер = Метаданные.Отчеты.УБ_ОписаниеПоказателейЭффективностиСотрудников.ПолноеИмя();
		Команда.КлючВарианта = "ОписаниеПоказателейЭффективностиСотрудниковИзДокумента";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ПодготовитьДанныеНачислений(СтруктураПараметров, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеМоделиПланирования = ДанныеМоделиПланированияСотрудника(СтруктураПараметров);
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("Руководитель", ДанныеМоделиПланирования.Руководитель);
	РезультатЗаполнения.Вставить("ПоказателиСотрудника", ДанныеМоделиПланирования.ПоказателиСотрудника);
	РезультатЗаполнения.Вставить("СтандартыСотрудника", ДанныеМоделиПланирования.СтандартыСотрудника);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнениеПослеВыполненияДлительнойОперации(Объект, Параметры) Экспорт
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресРезультата);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиСотрудника = Неопределено;
	Если СтруктураДанных.Свойство("ПоказателиСотрудника", ПоказателиСотрудника)
		И ПоказателиСотрудника.Количество() Тогда
		
		Объект.МодельПланированияЭффективности = ПоказателиСотрудника[0].МодельПланированияЭффективности;
		Объект.Грейд = ПоказателиСотрудника[0].Грейд;
		Объект.ВерсияГрейда = ПоказателиСотрудника[0].ВерсияГрейда;
		Объект.ВариантРасчетаПремии = ПоказателиСотрудника[0].ВариантРасчетаПремии;
		Объект.ШкалаПоказателей = ПоказателиСотрудника[0].ШкалаПоказателейМодели;
		Объект.ПредельныйКоэффициент = ПоказателиСотрудника[0].ПредельныйКоэффициент;
		Объект.Должность = ПоказателиСотрудника[0].Должность;
		/////////////////////////////////////////////////////////////////////////////////////////////////
		Руководитель = СтруктураДанных.Руководитель;
		/////////////////////////////////////////////////////////////////////////////////////////////////
	
		Если Параметры.СохранятьИсправления Тогда
			УдалитьНеиспользуемыеПоказатели(Объект, ПоказателиСотрудника);
		Иначе
			Объект.Начисления.Очистить();
		КонецЕсли;
		
		Для Каждого СтрокаПоказатели Из ПоказателиСотрудника Цикл
			// Получение планового значения показателя
			/////////////////////////////////////////////////////////////////////////
			Если СтрокаПоказатели.ПоказательЭффективности.ВариантРасчетаЗначенияПлана 
				= Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаПланирования Тогда	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	УБ_ПланПоПоказателям.ТекущееЗначение КАК ПланПоказателя,
					|	УБ_ПланПоПоказателям.Назначение,
					|	УБ_ПланПоПоказателям.ДатаОкончания
					|ИЗ
					|	РегистрСведений.УБ_ПланПоПоказателям КАК УБ_ПланПоПоказателям
					|ГДЕ
					|	УБ_ПланПоПоказателям.ДатаОкончания = &ДатаОкончания
					|	И УБ_ПланПоПоказателям.Показатель = &Показатель
					|	И УБ_ПланПоПоказателям.Назначение = &Назначение";
				
				Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Объект.ПериодРасчета));
				Если Руководитель = Объект.Сотрудник Тогда  
					Запрос.УстановитьПараметр("Назначение", Объект.Подразделение);
				Иначе 
					Запрос.УстановитьПараметр("Назначение", Объект.Сотрудник); 
				КонецЕсли; 
				Запрос.УстановитьПараметр("Показатель", СтрокаПоказатели.ПоказательЭффективности);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда				
					ВыборкаПлан = РезультатЗапроса.Выбрать();
					ВыборкаПлан.Следующий();  
					СтрокаПоказатели.План = ВыборкаПлан.ПланПоказателя;
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
		///////////////////////////////////////////////////////////////////////////	
		Для Каждого СтрокаПоказатели Из ПоказателиСотрудника Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ПоказательЭффективности", СтрокаПоказатели.ПоказательЭффективности);
			ПараметрыОтбора.Вставить("ТипПоказателя", СтрокаПоказатели.ТипПоказателя);
			
			НайденныеСтроки = Объект.Начисления.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() Тогда
				
				ТекущаяСтрока = НайденныеСтроки[0];
				
				ИсключаемыеСвойства = "Факт";
				Если ТекущаяСтрока.Расценка <> ТекущаяСтрока.УтвержденноеЗначениеРасценка
					И ЗначениеЗаполнено(ТекущаяСтрока.Расценка) Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",Расценка";
				КонецЕсли;
				Если ТекущаяСтрока.Вес <> ТекущаяСтрока.УтвержденноеЗначениеВес
					И ЗначениеЗаполнено(ТекущаяСтрока.Вес) Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",Вес";
				КонецЕсли;
				Если ТекущаяСтрока.План <> ТекущаяСтрока.УтвержденноеЗначениеПлан
					И ЗначениеЗаполнено(ТекущаяСтрока.План) Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",План";
				КонецЕсли;
				Если ТекущаяСтрока.КритическоеЗначение <> ТекущаяСтрока.УтвержденноеКритическоеЗначение
					И ЗначениеЗаполнено(ТекущаяСтрока.КритическоеЗначение) Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",КритическоеЗначение";
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаПоказатели,, ИсключаемыеСвойства);
				ЗаполнитьИндикаторПоказателя(ТекущаяСтрока,Объект);
			Иначе
				НоваяСтрока = Объект.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказатели);
				ЗаполнитьИндикаторПоказателя(НоваяСтрока,Объект);
			КонецЕсли;
			
		КонецЦикла;
		
		ИтоговыеНачисления = Объект.Начисления.Выгрузить();
		ИтоговыеНачисления.Свернуть("ТипПоказателя", "Вес, Эффективность, Сумма");
		
		Объект.ИтоговыеНачисления.Загрузить(ИтоговыеНачисления);
		
		Параметры.ЕстьДанныеДляЗаполнения = Истина;
		
		Параметры.ТекстОповещения = НСтр("ru = 'Начисления заполнены'");
		
	КонецЕсли;
	
	СтандартыСотрудника = Неопределено;
	Если СтруктураДанных.Свойство("СтандартыСотрудника", СтандартыСотрудника)
		И СтандартыСотрудника.Количество() Тогда
		
		УдалитьНеиспользуемыеСтандарты(Объект, СтандартыСотрудника);
		
		Для Каждого СтрокаСтандарты Из СтандартыСотрудника Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Стандарт", СтрокаСтандарты.Стандарт);
			
			НайденныеСтроки = Объект.СтандартыОценкиСотрудника.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() Тогда
				
				ТекущаяСтрока = НайденныеСтроки[0];
				
				ИсключаемыеСвойства = "Комментарий";
				Если ТекущаяСтрока.ШкалаОценок = СтрокаСтандарты.ШкалаОценок Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",Оценка";
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаСтандарты,, ИсключаемыеСвойства);
				
			Иначе
				НоваяСтрока = Объект.СтандартыОценкиСотрудника.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтандарты);
			КонецЕсли;
			
			НайденныеСтроки = Объект.СтандартыОценкиРуководителя.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() Тогда
				
				ТекущаяСтрока = НайденныеСтроки[0];
				
				ИсключаемыеСвойства = "Комментарий";
				Если ТекущаяСтрока.ШкалаОценок = СтрокаСтандарты.ШкалаОценок Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",Оценка";
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаСтандарты,, ИсключаемыеСвойства);
				
			Иначе
				НоваяСтрока = Объект.СтандартыОценкиРуководителя.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтандарты);
			КонецЕсли;
			
		КонецЦикла;
		
		Параметры.ЕстьДанныеДляЗаполнения = Истина;
		
	КонецЕсли;
	
	Если Не Параметры.ЕстьДанныеДляЗаполнения Тогда
		Параметры.ТекстОповещения = НСтр("ru = 'Начисления не заполнены'");
		Параметры.ПояснениеОповещения = НСтр("ru = 'В информационной базе отсутствуют данные для заполнения.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИндикаторПоказателя(СтрокаНачислений,Объект)
	
	    СписокГраницЭффективности = СформироватьСписокГраницЭффективности(СтрокаНачислений,Объект);
	
	
		Если СтрокаНачислений.ПроцентВыполнения <= СписокГраницЭффективности.НегативноеОтклонениеНормыДо И НЕ СтрокаНачислений.План = 0 Тогда
			СтрокаНачислений.ИндексКартинкиГраницЭффективности = 4;
		ИначеЕсли СтрокаНачислений.ПроцентВыполнения >= СписокГраницЭффективности.ПозитивноеОтклонениеНормыОт И НЕ СтрокаНачислений.План = 0 Тогда
			СтрокаНачислений.ИндексКартинкиГраницЭффективности = 9;
		ИначеЕсли СтрокаНачислений.ПроцентВыполнения >= СписокГраницЭффективности.ПограничноеОтклонениеНормыОт 
			И СтрокаНачислений.ПроцентВыполнения <= СписокГраницЭффективности.ПограничноеОтклонениеНормыДо И НЕ СтрокаНачислений.План = 0 Тогда
			СтрокаНачислений.ИндексКартинкиГраницЭффективности = 8;
		Иначе СтрокаНачислений.ИндексКартинкиГраницЭффективности = 0;
		КонецЕсли;				
		
КонецПроцедуры

Функция СформироватьСписокГраницЭффективности(СтрокаНачислений,Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.НегативноеОтклонениеНормыДо КАК НегативноеОтклонениеНормыДо,
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.ПограничноеОтклонениеНормыОт КАК ПограничноеОтклонениеНормыОт,
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.ПограничноеОтклонениеНормыДо КАК ПограничноеОтклонениеНормыДо,
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.ПозитивноеОтклонениеНормыОт КАК ПозитивноеОтклонениеНормыОт
	               |ИЗ
	               |	РегистрСведений.УБ_СоставПоказателейМоделейПланирования.СрезПоследних КАК УБ_СоставПоказателейМоделейПланированияСрезПоследних
	               |ГДЕ
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.ПоказательЭффективности = &ПоказательЭффективности
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.ТипПоказателя = &ТипПоказателя
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.Грейд = &Грейд
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.ВерсияГрейда = &ВерсияГрейда
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.МодельПланированияЭффективности = &МодельПланированияЭффективности";
	Запрос.УстановитьПараметр("ПоказательЭффективности",СтрокаНачислений.ПоказательЭффективности);
	Запрос.УстановитьПараметр("ТипПоказателя",СтрокаНачислений.ТипПоказателя);
	Запрос.УстановитьПараметр("Грейд",Объект.Грейд);
	Запрос.УстановитьПараметр("ВерсияГрейда",Объект.ВерсияГрейда);
	Запрос.УстановитьПараметр("МодельПланированияЭффективности",Объект.МодельПланированияЭффективности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокГраницЭффективности = Новый Структура;
	Если Выборка.Следующий() Тогда
		СписокГраницЭффективности.Вставить("НегативноеОтклонениеНормыДо",Выборка.НегативноеОтклонениеНормыДо);
		СписокГраницЭффективности.Вставить("ПограничноеОтклонениеНормыОт",Выборка.ПограничноеОтклонениеНормыОт);
		СписокГраницЭффективности.Вставить("ПограничноеОтклонениеНормыДо",Выборка.ПограничноеОтклонениеНормыДо);
		СписокГраницЭффективности.Вставить("ПозитивноеОтклонениеНормыОт",Выборка.ПозитивноеОтклонениеНормыОт);
	Иначе		
		СписокГраницЭффективности.Вставить("НегативноеОтклонениеНормыДо",33.33);
		СписокГраницЭффективности.Вставить("ПограничноеОтклонениеНормыОт",33.34);
		СписокГраницЭффективности.Вставить("ПограничноеОтклонениеНормыДо",66.66);
		СписокГраницЭффективности.Вставить("ПозитивноеОтклонениеНормыОт",66.67);
	КонецЕсли;	
	
	Возврат СписокГраницЭффективности;
	
КонецФункции	

Функция ПодготовитьДанныеНачисленийГрупповогоСоздания(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеМоделиПланирования = ДанныеМоделиПланированияСотрудника(СтруктураПараметров);
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("Руководитель", ДанныеМоделиПланирования.Руководитель);
	РезультатЗаполнения.Вставить("ПоказателиСотрудника", ДанныеМоделиПланирования.ПоказателиСотрудника);
	РезультатЗаполнения.Вставить("СтандартыСотрудника", ДанныеМоделиПланирования.СтандартыСотрудника);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗаполнения; 
	
КонецФункции

Процедура ИТ_ЗаполнениеПослеВыполненияДлительнойОперацииГрупповогоСоздания(Объект, Параметры) Экспорт
	
	СтруктураДанных = Параметры.СтруктураРезультата;
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиСотрудника = Неопределено;
	Если СтруктураДанных.Свойство("ПоказателиСотрудника", ПоказателиСотрудника)
		И ПоказателиСотрудника.Количество() Тогда
		
		Объект.МодельПланированияЭффективности = ПоказателиСотрудника[0].МодельПланированияЭффективности;
		Объект.Грейд = ПоказателиСотрудника[0].Грейд;
		Объект.ВерсияГрейда = ПоказателиСотрудника[0].ВерсияГрейда;
		Объект.ВариантРасчетаПремии = ПоказателиСотрудника[0].ВариантРасчетаПремии;
		Объект.ШкалаПоказателей = ПоказателиСотрудника[0].ШкалаПоказателейМодели;
		Объект.ПредельныйКоэффициент = ПоказателиСотрудника[0].ПредельныйКоэффициент;
		Объект.Должность = ПоказателиСотрудника[0].Должность;
		/////////////////////////////////////////////////////////////////////////////////////////////////
		Руководитель = СтруктураДанных.Руководитель;
		/////////////////////////////////////////////////////////////////////////////////////////////////
	
		Объект.Начисления.Очистить();	
		
		Для Каждого СтрокаПоказатели Из ПоказателиСотрудника Цикл
			// Получение планового значения показателя
			/////////////////////////////////////////////////////////////////////////
			Если СтрокаПоказатели.ПоказательЭффективности.ВариантРасчетаЗначенияПлана 
				= Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаПланирования Тогда	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	УБ_ПланПоПоказателям.ТекущееЗначение КАК ПланПоказателя,
					|	УБ_ПланПоПоказателям.Назначение,
					|	УБ_ПланПоПоказателям.ДатаОкончания
					|ИЗ
					|	РегистрСведений.УБ_ПланПоПоказателям КАК УБ_ПланПоПоказателям
					|ГДЕ
					|	УБ_ПланПоПоказателям.ДатаОкончания = &ДатаОкончания
					|	И УБ_ПланПоПоказателям.Показатель = &Показатель
					|	И УБ_ПланПоПоказателям.Назначение = &Назначение";
				
				Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Объект.ПериодРасчета));
				Если Руководитель = Объект.Сотрудник Тогда  
					Запрос.УстановитьПараметр("Назначение", Объект.Подразделение);
				Иначе 
					Запрос.УстановитьПараметр("Назначение", Объект.Сотрудник); 
				КонецЕсли; 
				Запрос.УстановитьПараметр("Показатель", СтрокаПоказатели.ПоказательЭффективности);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда				
					ВыборкаПлан = РезультатЗапроса.Выбрать();
					ВыборкаПлан.Следующий();  
					СтрокаПоказатели.План = ВыборкаПлан.ПланПоказателя;
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
		///////////////////////////////////////////////////////////////////////////	
		Для Каждого СтрокаПоказатели Из ПоказателиСотрудника Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ПоказательЭффективности", СтрокаПоказатели.ПоказательЭффективности);
			ПараметрыОтбора.Вставить("ТипПоказателя", СтрокаПоказатели.ТипПоказателя);
			
			НайденныеСтроки = Объект.Начисления.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() Тогда
				
				ТекущаяСтрока = НайденныеСтроки[0];
				
				ИсключаемыеСвойства = "Факт";
				Если ТекущаяСтрока.Расценка <> ТекущаяСтрока.УтвержденноеЗначениеРасценка
					И ЗначениеЗаполнено(ТекущаяСтрока.Расценка) Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",Расценка";
				КонецЕсли;
				Если ТекущаяСтрока.Вес <> ТекущаяСтрока.УтвержденноеЗначениеВес
					И ЗначениеЗаполнено(ТекущаяСтрока.Вес) Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",Вес";
				КонецЕсли;
				Если ТекущаяСтрока.План <> ТекущаяСтрока.УтвержденноеЗначениеПлан
					И ЗначениеЗаполнено(ТекущаяСтрока.План) Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",План";
				КонецЕсли;
				Если ТекущаяСтрока.КритическоеЗначение <> ТекущаяСтрока.УтвержденноеКритическоеЗначение
					И ЗначениеЗаполнено(ТекущаяСтрока.КритическоеЗначение) Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",КритическоеЗначение";
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаПоказатели,, ИсключаемыеСвойства);
				РассчитатьЗначениеПланаИФактаСбораДанных(ТекущаяСтрока, Объект);
			Иначе
				НоваяСтрока = Объект.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказатели);
				РассчитатьЗначениеПланаИФактаСбораДанных(НоваяСтрока, Объект);
			КонецЕсли;
			
		КонецЦикла;
		
		ИтоговыеНачисления = Объект.Начисления.Выгрузить();
		ИтоговыеНачисления.Свернуть("ТипПоказателя", "Вес, Эффективность, Сумма");
		
		Объект.ИтоговыеНачисления.Загрузить(ИтоговыеНачисления);
		
		Параметры.ЕстьДанныеДляЗаполнения = Истина;
		
		Параметры.ТекстОповещения = НСтр("ru = 'Начисления заполнены'");
		
	КонецЕсли;
	
	СтандартыСотрудника = Неопределено;
	Если СтруктураДанных.Свойство("СтандартыСотрудника", СтандартыСотрудника)
		И СтандартыСотрудника.Количество() Тогда
		
		//УдалитьНеиспользуемыеСтандарты(Объект, СтандартыСотрудника);
		
		Для Каждого СтрокаСтандарты Из СтандартыСотрудника Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Стандарт", СтрокаСтандарты.Стандарт);
			
			НайденныеСтроки = Объект.СтандартыОценкиСотрудника.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() Тогда
				
				ТекущаяСтрока = НайденныеСтроки[0];
				
				ИсключаемыеСвойства = "Комментарий";
				Если ТекущаяСтрока.ШкалаОценок = СтрокаСтандарты.ШкалаОценок Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",Оценка";
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаСтандарты,, ИсключаемыеСвойства);
				
			Иначе
				НоваяСтрока = Объект.СтандартыОценкиСотрудника.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтандарты);
			КонецЕсли;
			
			НайденныеСтроки = Объект.СтандартыОценкиРуководителя.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() Тогда
				
				ТекущаяСтрока = НайденныеСтроки[0];
				
				ИсключаемыеСвойства = "Комментарий";
				Если ТекущаяСтрока.ШкалаОценок = СтрокаСтандарты.ШкалаОценок Тогда
					ИсключаемыеСвойства = ИсключаемыеСвойства + ",Оценка";
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаСтандарты,, ИсключаемыеСвойства);
				
			Иначе
				НоваяСтрока = Объект.СтандартыОценкиРуководителя.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтандарты);
			КонецЕсли;
			
		КонецЦикла;
		
		Параметры.ЕстьДанныеДляЗаполнения = Истина;
		
	КонецЕсли;
	
	Если Не Параметры.ЕстьДанныеДляЗаполнения Тогда
		Параметры.ТекстОповещения = НСтр("ru = 'Начисления не заполнены'");
		Параметры.ПояснениеОповещения = НСтр("ru = 'В информационной базе отсутствуют данные для заполнения.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаСостоянияДокументовРасчетаЭффективностиСотрудников(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДанныеПоказателейРасчетаЗарплаты(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДанныеНачисленийРасчетаЭффективностиСотрудников(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудников(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаКоэффициентыРаспределенияБезокладнойСистемыПоказателей(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаКоэффициентыРаспределенияБезокладнойСистемыПоказателейВакантныхПозиций(Запрос, ТекстыЗапроса, Регистры);
	
	УБ_ПроведениеСервер.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.НачалоПериода КАК Период,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ДанныеДокумента.Сотрудник КАК Сотрудник,
		|	ДанныеДокумента.ФактУтвержден КАК ФактУтвержден
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Сотрудник", Реквизиты.Сотрудник);
	Запрос.УстановитьПараметр("ФактУтвержден", Реквизиты.ФактУтвержден);
	Запрос.УстановитьПараметр("МассивПустыхСсылок", УБ_ОбщегоНазначенияПовтИсп.МассивПустыхСсылокОпределяемогоТипа("УБ_Сотрудники"));
	
КонецПроцедуры

Функция ТекстЗапросаВременнаяТаблицаПоказателиРасчетаЗарплаты(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяВременнойТаблицы = "ВТПоказателиРасчетаЗарплаты";
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Организация КАК Организация,
		|	&Подразделение КАК Подразделение,
		|	&Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА РеквизитыПоказателей.ИспользоватьНастройкуИзТипаПоказателя
		|			ТОГДА РеквизитыТиповПоказателей.ПоказательРасчетаЗарплаты 
		|		ИНАЧЕ РеквизитыПоказателей.ПоказательРасчетаЗарплаты
		|	КОНЕЦ КАК Показатель,
		|	ТаблицаНачисления.Сумма КАК Значение,
		|	ЛОЖЬ КАК РаспределениеПремии
		|ПОМЕСТИТЬ ВТПоказателиРасчетаЗарплаты
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.Начисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ПоказателиЭффективности КАК РеквизитыПоказателей
		|		ПО ТаблицаНачисления.ПоказательЭффективности = РеквизитыПоказателей.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ТипыПоказателей КАК РеквизитыТиповПоказателей
		|		ПО ТаблицаНачисления.ТипПоказателя = РеквизитыТиповПоказателей.Ссылка
		|ГДЕ
		|	ТаблицаНачисления.Ссылка = &Ссылка
		|	И &ФактУтвержден
		|	И НЕ ЕСТЬNULL(РеквизитыТиповПоказателей.Матричный, ИСТИНА)
		|	И НЕ РеквизитыПоказателей.НеУчитыватьВРасчетеПерсональнойЭффективности
		|	И НЕ РеквизитыТиповПоказателей.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы
		|	И НЕ (РеквизитыПоказателей.ИспользоватьНастройкуИзТипаПоказателя И РеквизитыТиповПоказателей.НеВыводитьИтоговыеЗначения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период,
		|	&Организация,
		|	&Подразделение,
		|	&Сотрудник,
		|	РеквизитыТиповПоказателей.ПоказательРасчетаЗарплаты,
		|	ВЫБОР
		|		КОГДА ТаблицаИтоговыеНачисления.Сумма <> 0
		|			ТОГДА ТаблицаИтоговыеНачисления.Сумма
		|		ИНАЧЕ ТаблицаИтоговыеНачисления.ПроцентПремии
		|	КОНЕЦ,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.ИтоговыеНачисления КАК ТаблицаИтоговыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ТипыПоказателей КАК РеквизитыТиповПоказателей
		|		ПО ТаблицаИтоговыеНачисления.ТипПоказателя = РеквизитыТиповПоказателей.Ссылка
		|ГДЕ
		|	ТаблицаИтоговыеНачисления.Ссылка = &Ссылка
		|	И &ФактУтвержден
		|	И ЕСТЬNULL(РеквизитыТиповПоказателей.Матричный, ЛОЖЬ)
		|	И НЕ РеквизитыТиповПоказателей.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы
		|	И НЕ РеквизитыТиповПоказателей.НеВыводитьИтоговыеЗначения";
	
	Если ПолучитьФункциональнуюОпцию("УБ_ИспользоватьБезокладнуюСистемуПоказателей") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ	
			|	&Период,
			|	&Организация,
			|	&Подразделение,
			|	ТаблицаРаспределениеПремии.Сотрудник,
			|	ВерсииГрейдов.ПоказательРасчетаЗарплатыПриБезокладнойСистеме, 
			|	ТаблицаРаспределениеПремии.Сумма,
			|	ИСТИНА
			|ИЗ
			|	Документ.УБ_РасчетЭффективностиСотрудников.РаспределениеПремииПодразделения КАК ТаблицаРаспределениеПремии
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(&Период, ) КАК МоделиСотрудников
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБ_ВерсииГрейдов.СрезПоследних(&Период, ) КАК ВерсииГрейдов
			|			ПО МоделиСотрудников.МодельПланированияЭффективности = ВерсииГрейдов.МодельПланированияЭффективности
			|				И МоделиСотрудников.Грейд = ВерсииГрейдов.Грейд
			|				И ВерсииГрейдов.Статус = ЗНАЧЕНИЕ(Перечисление.УБ_СтатусыМоделейПланирования.Действует)
			|				И ВерсииГрейдов.ПоказательРасчетаЗарплатыПриБезокладнойСистеме <> ЗНАЧЕНИЕ(Справочник.УБ_ПоказателиРасчетаЗарплаты.ПустаяСсылка)
			|		ПО ТаблицаРаспределениеПремии.Сотрудник = МоделиСотрудников.Сотрудник
			|			И МоделиСотрудников.Период В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					МоделиСотрудниковОтбор.Период КАК Период
			|				ИЗ
			|					РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(&Период) КАК МоделиСотрудниковОтбор
			|				ГДЕ
			|					МоделиСотрудниковОтбор.Сотрудник = МоделиСотрудников.Сотрудник
			|				УПОРЯДОЧИТЬ ПО
			|					Период Убыв)
			|ГДЕ
			|	ТаблицаРаспределениеПремии.Ссылка = &Ссылка
			|	И &ФактУтвержден
			|	И ТаблицаРаспределениеПремии.Сумма <> 0
			|	И НЕ ВерсииГрейдов.ПоказательРасчетаЗарплатыПриБезокладнойСистеме ЕСТЬ NULL";
		
	КонецЕсли;
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(ТекстЗапроса);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСостоянияДокументовРасчетаЭффективностиСотрудников(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СостоянияДокументовРасчетаЭффективностиСотрудников";
	
	Если Не УБ_ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК РасчетЭффективностиСотрудника,
		|	ДанныеДокумента.Сотрудник КАК Сотрудник,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.НачалоПериода КАК НачалоПериода,
		|	ДанныеДокумента.КонецПериода КАК КонецПериода,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ФактУтвержден
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.ФактУтвержден)
		|		КОГДА ДанныеДокумента.ПланУтвержден
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.ПланУтвержден)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.НеУтвержден)
		|	КОНЕЦ КАК Состояние
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
	
Функция ТекстЗапросаТаблицаДанныеПоказателейРасчетаЗарплаты(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДанныеПоказателейРасчетаЗарплаты";
	
	Если Не УБ_ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не УБ_ПроведениеСервер.ЕстьТаблицаЗапроса("ВТПоказателиРасчетаЗарплаты", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаПоказателиРасчетаЗарплаты(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПоказателиРасчетаЗарплаты.Период КАК Период,
		|	ПоказателиРасчетаЗарплаты.Организация КАК Организация,
		|	ПоказателиРасчетаЗарплаты.Подразделение КАК Подразделение,
		|	ПоказателиРасчетаЗарплаты.Сотрудник КАК Сотрудник,
		|	ПоказателиРасчетаЗарплаты.Показатель КАК Показатель,
		|	СУММА(ПоказателиРасчетаЗарплаты.Значение) КАК Значение,
		|	ПоказателиРасчетаЗарплаты.РаспределениеПремии КАК РаспределениеПремии
		|ИЗ
		|	ВТПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиРасчетаЗарплаты.Период,
		|	ПоказателиРасчетаЗарплаты.Организация,
		|	ПоказателиРасчетаЗарплаты.Подразделение,
		|	ПоказателиРасчетаЗарплаты.Сотрудник,
		|	ПоказателиРасчетаЗарплаты.Показатель,
		|	ПоказателиРасчетаЗарплаты.РаспределениеПремии";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаТаблицаДанныеНачисленийРасчетаЭффективностиСотрудников(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДанныеНачисленийРасчетаЭффективностиСотрудников";
	
	Если Не УБ_ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Организация КАК Организация,
		|	&Подразделение КАК Подразделение,
		|	&Сотрудник КАК Сотрудник,
		|	ТаблицаНачисления.ПоказательЭффективности КАК ПоказательЭффективности,
		|	ТаблицаНачисления.ТипПоказателя КАК ТипПоказателя,
		|	ТаблицаНачисления.Расценка КАК Расценка,
		|	ТаблицаНачисления.Вес КАК Вес,
		|	ТаблицаНачисления.План КАК План,
		|	ТаблицаНачисления.Факт КАК Факт,
		|	ТаблицаНачисления.ПроцентВыполнения КАК ПроцентВыполнения,
		|	ТаблицаНачисления.Эффективность КАК Эффективность,
		|	ТаблицаНачисления.Сумма КАК Сумма
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.Начисления КАК ТаблицаНачисления
		|ГДЕ
		|	ТаблицаНачисления.Ссылка = &Ссылка
		|	И НЕ ТаблицаНачисления.ПоказательЭффективности.НеУчитыватьВРасчетеПерсональнойЭффективности";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудников(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудников";
	
	Если Не УБ_ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Организация КАК Организация,
		|	&Подразделение КАК Подразделение,
		|	&Сотрудник КАК Сотрудник,
		|	ТаблицаИтоговыеНачисления.ТипПоказателя КАК ТипПоказателя,
		|	ТаблицаИтоговыеНачисления.Эффективность КАК Эффективность,
		|	ТаблицаИтоговыеНачисления.Сумма КАК Сумма,
		|	ТаблицаИтоговыеНачисления.ПроцентПремии КАК ПроцентПремии
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.ИтоговыеНачисления КАК ТаблицаИтоговыеНачисления
		|ГДЕ
		|	ТаблицаИтоговыеНачисления.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаКоэффициентыРаспределенияБезокладнойСистемыПоказателей(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "КоэффициентыРаспределенияБезокладнойСистемыПоказателей";
	
	Если Не УБ_ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Организация КАК Организация,
		|	&Подразделение КАК Подразделение,
		|	&Сотрудник КАК Сотрудник,
		|	ТаблицаИтоговыеНачисления.ТипПоказателя КАК ТипПоказателя,
		|	ТаблицаИтоговыеНачисления.Сумма КАК ЗначениеКоэффициента
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.ИтоговыеНачисления КАК ТаблицаИтоговыеНачисления
		|ГДЕ
		|	ТаблицаИтоговыеНачисления.Ссылка = &Ссылка
		|	И ТаблицаИтоговыеНачисления.ТипПоказателя.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы
		|	И &ФактУтвержден";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаКоэффициентыРаспределенияБезокладнойСистемыПоказателейВакантныхПозиций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "КоэффициентыРаспределенияБезокладнойСистемыПоказателейВакантныхПозиций";
	
	Если Не УБ_ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Организация КАК Организация,
		|	&Подразделение КАК Подразделение,
		|	РаспределениеПремииПодразделения.Модель.ШтатноеРасписание КАК ШтатноеРасписание,
		|	РаспределениеПремииПодразделения.КоэффициентРаспределения КАК ЗначениеКоэффициента
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.РаспределениеПремииПодразделения КАК РаспределениеПремииПодразделения
		|ГДЕ
		|	РаспределениеПремииПодразделения.Ссылка = &Ссылка
		|	И РаспределениеПремииПодразделения.Сотрудник В (&МассивПустыхСсылок)";
	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанныхМоделиПланирования

Функция ДанныеМоделиПланированияСотрудника(СтруктураПараметров)
	
	ДанныеМоделиПланирования = Новый Структура;
	ДанныеМоделиПланирования.Вставить("Руководитель");
	ДанныеМоделиПланирования.Вставить("ПоказателиСотрудника");
	ДанныеМоделиПланирования.Вставить("СтандартыСотрудника");
	
	ПоказателиСотрудника = ТаблицаПоказателейСотрудника();
	СтандартыСотрудника = ТаблицаСтандартовСотрудника();
	
	Сотрудники = СтруктураПараметров.Сотрудники;
	МесяцНачисления = КонецМесяца(СтруктураПараметров.МесяцНачисления);
	Организация = СтруктураПараметров.Организация;
	Подразделение = СтруктураПараметров.Подразделение;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", МесяцНачисления);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("МесяцПрименения", МесяцНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(МоделиПланированияСотрудников.Период) КАК Период,
		|	МоделиПланированияСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_ПериодыНазначенияМоделейСотрудникам
		|ИЗ
		|	РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), Сотрудник В (&Сотрудники)) КАК МоделиПланированияСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	МоделиПланированияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МоделиПланированияСотрудников.Сотрудник КАК Сотрудник,
		|	МоделиПланированияСотрудников.МодельПланированияЭффективности КАК МодельПланированияЭффективности,
		|	МоделиПланированияСотрудников.Грейд КАК Грейд,
		|	ВерсииГрейдов.ВерсияГрейда КАК ВерсияГрейда,
		|	ВерсииГрейдов.ВариантРасчетаПремии КАК ВариантРасчетаПремии,
		|	ВерсииГрейдов.ШкалаПоказателей КАК ШкалаПоказателей,
		|	ВерсииГрейдов.ПредельныйКоэффициент КАК ПредельныйКоэффициент,
		|	МоделиПланированияСотрудников.МодельПланированияЭффективности.ШтатноеРасписание.Должность КАК Должность
		|ПОМЕСТИТЬ ВТ_ДействующиеМоделиПланированияСотрудников
		|ИЗ
		|	РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), Сотрудник В (&Сотрудники)) КАК МоделиПланированияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыНазначенияМоделейСотрудникам КАК ПериодыНазначенияМоделейСотрудникам
		|		ПО МоделиПланированияСотрудников.Период = ПериодыНазначенияМоделейСотрудникам.Период
		|			И МоделиПланированияСотрудников.Сотрудник = ПериодыНазначенияМоделейСотрудникам.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБ_ВерсииГрейдов.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), ) КАК ВерсииГрейдов
		|		ПО МоделиПланированияСотрудников.МодельПланированияЭффективности = ВерсииГрейдов.МодельПланированияЭффективности
		|			И МоделиПланированияСотрудников.Грейд = ВерсииГрейдов.Грейд
		|ГДЕ
		|	ВерсииГрейдов.Статус = ЗНАЧЕНИЕ(Перечисление.УБ_СтатусыМоделейПланирования.Действует)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставПоказателейМоделейПланирования.МодельПланированияЭффективности КАК МодельПланированияЭффективности,
		|	СоставПоказателейМоделейПланирования.Грейд КАК Грейд,
		|	СоставПоказателейМоделейПланирования.ВерсияГрейда КАК ВерсияГрейда,
		|	СоставПоказателейМоделейПланирования.ПоказательЭффективности КАК ПоказательЭффективности,
		|	СоставПоказателейМоделейПланирования.Вес КАК Вес,
		|	СоставПоказателейМоделейПланирования.План КАК План,
		|	СоставПоказателейМоделейПланирования.КритическоеЗначение КАК КритическоеЗначение,
		|	СоставПоказателейМоделейПланирования.МинимальноеЗначениеРезультата КАК МинимальноеЗначениеРезультата,
		|	СоставПоказателейМоделейПланирования.МаксимальноеЗначениеРезультата КАК МаксимальноеЗначениеРезультата,
		|	СоставПоказателейМоделейПланирования.ШкалаПоказателей КАК ШкалаПоказателей,
		|	СоставПоказателейМоделейПланирования.ТипПоказателя КАК ТипПоказателя,
		|	СоставПоказателейМоделейПланирования.Расценка КАК Расценка,
		|	СоставПоказателейМоделейПланирования.ВидРасценки КАК ВидРасценки,
		|	СоставПоказателейМоделейПланирования.РассчитыватьРезультатОтФакта КАК РассчитыватьРезультатОтФакта,
		|	СоставПоказателейМоделейПланирования.Фиксированный КАК Фиксированный,
		|	СоставПоказателейМоделейПланирования.НегативноеОтклонениеНормыДо КАК НегативноеОтклонениеНормыДо,
		|	СоставПоказателейМоделейПланирования.ПограничноеОтклонениеНормыОт КАК ПограничноеОтклонениеНормыОт,
		|	СоставПоказателейМоделейПланирования.ПограничноеОтклонениеНормыДо КАК ПограничноеОтклонениеНормыДо,
		|	СоставПоказателейМоделейПланирования.ПозитивноеОтклонениеНормыОт КАК ПозитивноеОтклонениеНормыОт,
		|	СоставПоказателейМоделейПланирования.ПериодичностьРасчета КАК ПериодичностьРасчета,
		|	СоставПоказателейМоделейПланирования.ОграничиватьМинимальноеЗначениеРезультата КАК ОграничиватьМинимальноеЗначениеРезультата,
		|	СоставПоказателейМоделейПланирования.ОграничиватьМаксимальноеЗначениеРезультата КАК ОграничиватьМаксимальноеЗначениеРезультата,
		|	СоставПоказателейМоделейПланирования.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_СоставПоказателейМоделейПланирования
		|ИЗ
		|	РегистрСведений.УБ_СоставПоказателейМоделейПланирования.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&Период, МЕСЯЦ),
		|			(МодельПланированияЭффективности, Грейд, ВерсияГрейда) В
		|				(ВЫБРАТЬ
		|					ДействующиеМоделиПланированияСотрудников.МодельПланированияЭффективности КАК МодельПланированияЭффективности,
		|					ДействующиеМоделиПланированияСотрудников.Грейд КАК Грейд,
		|					ДействующиеМоделиПланированияСотрудников.ВерсияГрейда КАК ВерсияГрейда
		|				ИЗ
		|					ВТ_ДействующиеМоделиПланированияСотрудников КАК ДействующиеМоделиПланированияСотрудников)) КАК СоставПоказателейМоделейПланирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УБ_ПоказателиЭффективности.ПериодыИспользованияПоказателя КАК ТЧПериодыИспользованияПоказателя
		|		ПО СоставПоказателейМоделейПланирования.ПоказательЭффективности = ТЧПериодыИспользованияПоказателя.Ссылка
		|			И (МЕСЯЦ(ТЧПериодыИспользованияПоказателя.МесяцПрименения) = МЕСЯЦ(&Период))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ПоказателиЭффективности КАК РеквизитыПоказателейЭффективности
		|		ПО СоставПоказателейМоделейПланирования.ПоказательЭффективности = РеквизитыПоказателейЭффективности.Ссылка";
	
	Запрос.Выполнить();
	
	ЗаполнитьВременнуюТаблицуРасценокПоказателейЭффективности(Запрос, Организация, Подразделение);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РуководителиПодразделений.Руководитель КАК Руководитель
		|ИЗ
		|	РегистрСведений.УБ_НазначенныеРуководителиПодразделений.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), Подразделение = &Подразделение) КАК РуководителиПодразделений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействующиеМоделиПланированияСотрудников.Сотрудник КАК Сотрудник,
		|	ДействующиеМоделиПланированияСотрудников.МодельПланированияЭффективности КАК МодельПланированияЭффективности,
		|	ДействующиеМоделиПланированияСотрудников.Грейд КАК Грейд,
		|	ДействующиеМоделиПланированияСотрудников.ВерсияГрейда КАК ВерсияГрейда,
		|	ДействующиеМоделиПланированияСотрудников.ВариантРасчетаПремии КАК ВариантРасчетаПремии,
		|	ДействующиеМоделиПланированияСотрудников.ШкалаПоказателей КАК ШкалаПоказателейМодели,
		|	СоставПоказателейМоделейПланирования.ПоказательЭффективности КАК ПоказательЭффективности,
		|	СоставПоказателейМоделейПланирования.ТипПоказателя КАК ТипПоказателя,
		|	ЕСТЬNULL(СоставПоказателейМоделейПланирования.Расценка, 0) КАК Расценка,
		|	СоставПоказателейМоделейПланирования.Вес КАК Вес,
		|	СоставПоказателейМоделейПланирования.План КАК План,
		|	СоставПоказателейМоделейПланирования.КритическоеЗначение КАК КритическоеЗначение,
		|	СоставПоказателейМоделейПланирования.МинимальноеЗначениеРезультата КАК МинимальноеЗначениеРезультата,
		|	СоставПоказателейМоделейПланирования.МаксимальноеЗначениеРезультата КАК МаксимальноеЗначениеРезультата,
		|	СоставПоказателейМоделейПланирования.ШкалаПоказателей КАК ШкалаПоказателей,
		|	ДействующиеМоделиПланированияСотрудников.ПредельныйКоэффициент КАК ПредельныйКоэффициент,
		|	СоставПоказателейМоделейПланирования.НомерСтроки КАК НомерСтроки,
		|	СоставПоказателейМоделейПланирования.Фиксированный КАК Фиксированный,
		|	ДействующиеМоделиПланированияСотрудников.Должность КАК Должность
		|ИЗ
		|	ВТ_ДействующиеМоделиПланированияСотрудников КАК ДействующиеМоделиПланированияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоставПоказателейМоделейПланирования КАК СоставПоказателейМоделейПланирования
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасценкиПоказателейЭффективности КАК РасценкиПоказателейЭффективности
		|			ПО СоставПоказателейМоделейПланирования.ПоказательЭффективности = РасценкиПоказателейЭффективности.ПоказательЭффективности
		|		ПО ДействующиеМоделиПланированияСотрудников.МодельПланированияЭффективности = СоставПоказателейМоделейПланирования.МодельПланированияЭффективности
		|			И ДействующиеМоделиПланированияСотрудников.Грейд = СоставПоказателейМоделейПланирования.Грейд
		|			И ДействующиеМоделиПланированияСотрудников.ВерсияГрейда = СоставПоказателейМоделейПланирования.ВерсияГрейда
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействующиеМоделиПланированияСотрудников.Сотрудник КАК Сотрудник,
		|	ДействующиеМоделиПланированияСотрудников.МодельПланированияЭффективности КАК МодельПланированияЭффективности,
		|	ДействующиеМоделиПланированияСотрудников.Грейд КАК Грейд,
		|	ДействующиеМоделиПланированияСотрудников.ВерсияГрейда КАК ВерсияГрейда,
		|	СоставСтандартовМоделейПланирования.Стандарт КАК Стандарт,
		|	СоставСтандартовМоделейПланирования.ШкалаОценок КАК ШкалаОценок,
		|	СоставСтандартовМоделейПланирования.Вес КАК Вес
		|ИЗ
		|	ВТ_ДействующиеМоделиПланированияСотрудников КАК ДействующиеМоделиПланированияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УБ_СоставСтандартовМоделейПланирования.СрезПоследних(
		|				КОНЕЦПЕРИОДА(&Период, МЕСЯЦ),
		|				(МодельПланированияЭффективности, Грейд, ВерсияГрейда) В
		|					(ВЫБРАТЬ
		|						ДействующиеМоделиПланированияСотрудников.МодельПланированияЭффективности КАК МодельПланированияЭффективности,
		|						ДействующиеМоделиПланированияСотрудников.Грейд КАК Грейд,
		|						ДействующиеМоделиПланированияСотрудников.ВерсияГрейда КАК ВерсияГрейда
		|					ИЗ
		|						ВТ_ДействующиеМоделиПланированияСотрудников КАК ДействующиеМоделиПланированияСотрудников)) КАК СоставСтандартовМоделейПланирования
		|		ПО ДействующиеМоделиПланированияСотрудников.МодельПланированияЭффективности = СоставСтандартовМоделейПланирования.МодельПланированияЭффективности
		|			И ДействующиеМоделиПланированияСотрудников.Грейд = СоставСтандартовМоделейПланирования.Грейд
		|			И ДействующиеМоделиПланированияСотрудников.ВерсияГрейда = СоставСтандартовМоделейПланирования.ВерсияГрейда";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРуководитель = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3].Выбрать();
	ВыборкаПоказатели = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	ВыборкаСтандарты = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	
	Пока ВыборкаРуководитель.Следующий() Цикл
		ДанныеМоделиПланирования.Руководитель = ВыборкаРуководитель.Руководитель;
	КонецЦикла;
	
	Пока ВыборкаПоказатели.Следующий() Цикл
		НоваяСтрока = ПоказателиСотрудника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоказатели);
		
		Если НоваяСтрока.Фиксированный Тогда
			ЗаполнитьРасценкуФиксированногоПоказателя(НоваяСтрока,Организация,МесяцНачисления);
		КонецЕсли;	
		
		НоваяСтрока.УтвержденноеЗначениеРасценка = НоваяСтрока.Расценка;
		НоваяСтрока.УтвержденноеЗначениеВес = НоваяСтрока.Вес;
		НоваяСтрока.УтвержденноеЗначениеПлан = НоваяСтрока.План;
		НоваяСтрока.УтвержденноеКритическоеЗначение = НоваяСтрока.КритическоеЗначение;
	КонецЦикла;
	
	Пока ВыборкаСтандарты.Следующий() Цикл
		НоваяСтрока = СтандартыСотрудника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтандарты);
	КонецЦикла;
	
	ДанныеМоделиПланирования.ПоказателиСотрудника = ПоказателиСотрудника;
	ДанныеМоделиПланирования.СтандартыСотрудника = СтандартыСотрудника;
	
	Возврат ДанныеМоделиПланирования;
	
КонецФункции

Процедура ЗаполнитьРасценкуФиксированногоПоказателя(СтрокаПоказателя,Организация,МесяцНачисления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Расценка КАК Расценка
	               |ИЗ
	               |	РегистрСведений.УБ_РасценкиПоказателейЭффективности.СрезПоследних(&Период, ) КАК УБ_РасценкиПоказателейЭффективностиСрезПоследних
	               |ГДЕ
	               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Подразделение = &Подразделение
	               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.МодельПланирования = &МодельПланирования
	               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Показатель = &Показатель
	               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Организация = &Организация";
	Запрос.УстановитьПараметр("Период",МесяцНачисления);
	Запрос.УстановитьПараметр("Подразделение",СтрокаПоказателя.Подразделение);
	Запрос.УстановитьПараметр("МодельПланирования",СтрокаПоказателя.МодельПланированияЭффективности);
	Запрос.УстановитьПараметр("Показатель",СтрокаПоказателя.ПоказательЭффективности);
	Запрос.УстановитьПараметр("Организация",Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.Расценка = Выборка.Расценка;
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Расценка КАК Расценка
		               |ИЗ
		               |	РегистрСведений.УБ_РасценкиПоказателейЭффективности.СрезПоследних(&Период, ) КАК УБ_РасценкиПоказателейЭффективностиСрезПоследних
		               |ГДЕ
		               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Подразделение = &Подразделение
		               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Показатель = &Показатель
		               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Организация = &Организация";
		Запрос.УстановитьПараметр("Период",МесяцНачисления);
		Запрос.УстановитьПараметр("Подразделение",СтрокаПоказателя.Подразделение);
		//Запрос.УстановитьПараметр("МодельПланирования",СтрокаПоказателя.МодельПланированияЭффективности);
		Запрос.УстановитьПараметр("Показатель",СтрокаПоказателя.ПоказательЭффективности);
		Запрос.УстановитьПараметр("Организация",Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаПоказателя.Расценка = Выборка.Расценка;
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Расценка КАК Расценка
			               |ИЗ
			               |	РегистрСведений.УБ_РасценкиПоказателейЭффективности.СрезПоследних(&Период, ) КАК УБ_РасценкиПоказателейЭффективностиСрезПоследних
			               |ГДЕ
			               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.МодельПланирования = &МодельПланирования
			               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Показатель = &Показатель
			               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Организация = &Организация";
			Запрос.УстановитьПараметр("Период",МесяцНачисления);
			//Запрос.УстановитьПараметр("Подразделение",СтрокаПоказателя.Подразделение);
			Запрос.УстановитьПараметр("МодельПланирования",СтрокаПоказателя.МодельПланированияЭффективности);
			Запрос.УстановитьПараметр("Показатель",СтрокаПоказателя.ПоказательЭффективности);
			Запрос.УстановитьПараметр("Организация",Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтрокаПоказателя.Расценка = Выборка.Расценка;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Расценка КАК Расценка
				               |ИЗ
				               |	РегистрСведений.УБ_РасценкиПоказателейЭффективности.СрезПоследних(&Период, ) КАК УБ_РасценкиПоказателейЭффективностиСрезПоследних
				               |ГДЕ
				               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Показатель = &Показатель
				               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Организация = &Организация";
				Запрос.УстановитьПараметр("Период",МесяцНачисления);
				//Запрос.УстановитьПараметр("Подразделение",СтрокаПоказателя.Подразделение);
				//Запрос.УстановитьПараметр("МодельПланирования",СтрокаПоказателя.МодельПланированияЭффективности);
				Запрос.УстановитьПараметр("Показатель",СтрокаПоказателя.ПоказательЭффективности);
				Запрос.УстановитьПараметр("Организация",Организация);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаПоказателя.Расценка = Выборка.Расценка;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьВременнуюТаблицуРасценокПоказателейЭффективности(Запрос, Организация, Подразделение)
	
	ЗначениеПодразделенияПоУмолчанию = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(ЗначениеПодразделенияПоУмолчанию));
	
	ИерархияПодразделений = Новый ТаблицаЗначений;
	ИерархияПодразделений.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов(МассивТипов));
	ИерархияПодразделений.Колонки.Добавить("УровеньИерархии", Новый ОписаниеТипов("Число"));
	
	СтрокаПустоеПодразделение = ИерархияПодразделений.Добавить();
	СтрокаПустоеПодразделение.ПодразделениеОрганизации = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение");
	СтрокаПустоеПодразделение.УровеньИерархии = 0;
	
	ЗапросИерархияПодразделений = Новый Запрос;
	ЗапросИерархияПодразделений.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.УБ_Подразделения КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	Ссылка ИЕРАРХИЯ";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(ЗапросИерархияПодразделений.Текст);
	
	ЗапросИерархияПодразделений.УстановитьПараметр("Ссылка", Подразделение);
	
	РезультатЗапроса = ЗапросИерархияПодразделений.Выполнить();
	
	ВыборкаИерархияПодразделений = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИерархияПодразделений.Следующий() Цикл
		НоваяСтрока = ИерархияПодразделений.Добавить();
		НоваяСтрока.ПодразделениеОрганизации = ВыборкаИерархияПодразделений.Ссылка;
		НоваяСтрока.УровеньИерархии = ВыборкаИерархияПодразделений.Уровень() + 1;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИерархияПодразделений", ИерархияПодразделений);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИерархияПодразделений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ИерархияПодразделений.УровеньИерархии КАК УровеньИерархии
		|ПОМЕСТИТЬ ВТ_ИерархияПодразделений
		|ИЗ
		|	&ИерархияПодразделений КАК ИерархияПодразделений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасценкиПоказателейЭффективности.Организация КАК Организация,
		|	РасценкиПоказателейЭффективности.Подразделение КАК Подразделение,
		|	ИерархияПодразделений.УровеньИерархии КАК УровеньИерархииПодразделения,
		|	РасценкиПоказателейЭффективности.МодельПланирования КАК МодельПланирования,
		|	РасценкиПоказателейЭффективности.Грейд КАК Грейд,
		|	РасценкиПоказателейЭффективности.ВерсияГрейда КАК ВерсияГрейда,
		|	РасценкиПоказателейЭффективности.Показатель КАК Показатель,
		|	РасценкиПоказателейЭффективности.Расценка КАК Расценка
		|ПОМЕСТИТЬ ВТ_РасценкиПоказателейЭффективностиБезГруппировки
		|ИЗ
		|	РегистрСведений.УБ_РасценкиПоказателейЭффективности.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И Показатель В
		|					(ВЫБРАТЬ
		|						СоставПоказателейМоделейПланирования.ПоказательЭффективности
		|					ИЗ
		|						ВТ_СоставПоказателейМоделейПланирования КАК СоставПоказателейМоделейПланирования)
		|				И Подразделение В
		|					(ВЫБРАТЬ
		|						ИерархияПодразделений.ПодразделениеОрганизации
		|					ИЗ
		|						ВТ_ИерархияПодразделений КАК ИерархияПодразделений)) КАК РасценкиПоказателейЭффективности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИерархияПодразделений КАК ИерархияПодразделений
		|		ПО (ИерархияПодразделений.ПодразделениеОрганизации = РасценкиПоказателейЭффективности.Подразделение)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоставПоказателейМоделейПланирования КАК СоставПоказателейМоделейПланирования
		|		ПО (СоставПоказателейМоделейПланирования.ПоказательЭффективности = РасценкиПоказателейЭффективности.Показатель)
		|			И (СоставПоказателейМоделейПланирования.МодельПланированияЭффективности = РасценкиПоказателейЭффективности.МодельПланирования
		|				ИЛИ РасценкиПоказателейЭффективности.МодельПланирования = ЗНАЧЕНИЕ(Справочник.УБ_МоделиПланированияЭффективности.ПустаяСсылка))
		|			И (СоставПоказателейМоделейПланирования.Грейд = РасценкиПоказателейЭффективности.Грейд
		|				ИЛИ РасценкиПоказателейЭффективности.Грейд = ЗНАЧЕНИЕ(Справочник.УБ_Грейды.ПустаяСсылка))
		|			И (СоставПоказателейМоделейПланирования.ВерсияГрейда = РасценкиПоказателейЭффективности.ВерсияГрейда
		|				ИЛИ РасценкиПоказателейЭффективности.ВерсияГрейда = ЗНАЧЕНИЕ(Справочник.УБ_ВерсииГрейдов.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасценкиПоказателейЭффективности.Организация КАК Организация,
		|	РасценкиПоказателейЭффективности.Показатель КАК Показатель,
		|	МАКСИМУМ(РасценкиПоказателейЭффективности.МодельПланирования) КАК МодельПланирования,
		|	МАКСИМУМ(РасценкиПоказателейЭффективности.Грейд) КАК Грейд,
		|	МАКСИМУМ(РасценкиПоказателейЭффективности.ВерсияГрейда) КАК ВерсияГрейда,
		|	МАКСИМУМ(РасценкиПоказателейЭффективности.УровеньИерархииПодразделения) КАК УровеньИерархииПодразделения
		|ПОМЕСТИТЬ ВТ_ОтборИзмеренийРасценокПоказателей
		|ИЗ
		|	ВТ_РасценкиПоказателейЭффективностиБезГруппировки КАК РасценкиПоказателейЭффективности
		|
		|СГРУППИРОВАТЬ ПО
		|	РасценкиПоказателейЭффективности.Организация,
		|	РасценкиПоказателейЭффективности.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасценкиПоказателейЭффективности.Организация КАК Организация,
		|	РасценкиПоказателейЭффективности.Подразделение КАК Подразделение,
		|	РасценкиПоказателейЭффективности.МодельПланирования КАК МодельПланированияЭффективности,
		|	РасценкиПоказателейЭффективности.Грейд КАК Грейд,
		|	РасценкиПоказателейЭффективности.ВерсияГрейда КАК ВерсияГрейда,
		|	РасценкиПоказателейЭффективности.Показатель КАК ПоказательЭффективности,
		|	РасценкиПоказателейЭффективности.Расценка КАК Расценка
		|ПОМЕСТИТЬ ВТ_РасценкиПоказателейЭффективности
		|ИЗ
		|	ВТ_РасценкиПоказателейЭффективностиБезГруппировки КАК РасценкиПоказателейЭффективности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтборИзмеренийРасценокПоказателей КАК ОтборИзмеренийРасценокПоказателей
		|		ПО РасценкиПоказателейЭффективности.Организация = ОтборИзмеренийРасценокПоказателей.Организация
		|			И РасценкиПоказателейЭффективности.УровеньИерархииПодразделения = ОтборИзмеренийРасценокПоказателей.УровеньИерархииПодразделения
		|			И РасценкиПоказателейЭффективности.МодельПланирования = ОтборИзмеренийРасценокПоказателей.МодельПланирования
		|			И РасценкиПоказателейЭффективности.Грейд = ОтборИзмеренийРасценокПоказателей.Грейд
		|			И РасценкиПоказателейЭффективности.ВерсияГрейда = ОтборИзмеренийРасценокПоказателей.ВерсияГрейда
		|			И РасценкиПоказателейЭффективности.Показатель = ОтборИзмеренийРасценокПоказателей.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_РасценкиПоказателейЭффективностиБезГруппировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ОтборИзмеренийРасценокПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ИерархияПодразделений";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТаблицаПоказателейСотрудника()
	
	ПоказателиСотрудника = Новый ТаблицаЗначений;
	ПоказателиСотрудника.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Сотрудники.Тип));
	ПоказателиСотрудника.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.УБ_Должности"));
	ПоказателиСотрудника.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПоказателиСотрудника.Колонки.Добавить("Подразделение", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Подразделения.Тип));
	ПоказателиСотрудника.Колонки.Добавить("МодельПланированияЭффективности", Новый ОписаниеТипов("СправочникСсылка.УБ_МоделиПланированияЭффективности"));
	ПоказателиСотрудника.Колонки.Добавить("Грейд", Новый ОписаниеТипов("СправочникСсылка.УБ_Грейды"));
	ПоказателиСотрудника.Колонки.Добавить("ВерсияГрейда", Новый ОписаниеТипов("СправочникСсылка.УБ_ВерсииГрейдов"));
	ПоказателиСотрудника.Колонки.Добавить("ВариантРасчетаПремии", Новый ОписаниеТипов("ПеречислениеСсылка.УБ_ВариантыРасчетаПремии"));
	ПоказателиСотрудника.Колонки.Добавить("ПоказательЭффективности", Новый ОписаниеТипов("СправочникСсылка.УБ_ПоказателиЭффективности"));
	ПоказателиСотрудника.Колонки.Добавить("ТипПоказателя", Новый ОписаниеТипов("СправочникСсылка.УБ_ТипыПоказателей"));
	ПоказателиСотрудника.Колонки.Добавить("План", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("КритическоеЗначение", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("МинимальноеЗначениеРезультата", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("МаксимальноеЗначениеРезультата", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("Расценка", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("Эффективность", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("ШкалаПоказателейМодели", Новый ОписаниеТипов("СправочникСсылка.УБ_ШкалыПоказателей"));
	ПоказателиСотрудника.Колонки.Добавить("ШкалаПоказателей", Новый ОписаниеТипов("СправочникСсылка.УБ_ШкалыПоказателей"));
	ПоказателиСотрудника.Колонки.Добавить("УтвержденноеЗначениеРасценка", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("УтвержденноеЗначениеВес", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("УтвержденноеЗначениеПлан", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("УтвержденноеКритическоеЗначение", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("Фиксированный",Новый ОписаниеТипов("Булево"));
	ПоказателиСотрудника.Колонки.Добавить("НегативноеОтклонениеНормыДо", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("ПограничноеОтклонениеНормыОт", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("ПограничноеОтклонениеНормыДо", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("ПозитивноеОтклонениеНормыОт", Новый ОписаниеТипов("Число"));
	ПоказателиСотрудника.Колонки.Добавить("ПериодичностьРасчета",Новый ОписаниеТипов("ПеречислениеСсылка.УБ_ПериодичностьРасчета"));
	ПоказателиСотрудника.Колонки.Добавить("ОграничиватьМинимальноеЗначениеРезультата", Новый ОписаниеТипов("Булево"));
	ПоказателиСотрудника.Колонки.Добавить("ОграничиватьМаксимальноеЗначениеРезультата",  Новый ОписаниеТипов("Булево"));
	ПоказателиСотрудника.Колонки.Добавить("ПредельныйКоэффициент", Новый ОписаниеТипов("Число"));
	
	Возврат ПоказателиСотрудника;
	
КонецФункции

Функция ТаблицаСтандартовСотрудника()
	
	СтандартыСотрудника = Новый ТаблицаЗначений;
	СтандартыСотрудника.Колонки.Добавить("Стандарт", Новый ОписаниеТипов("СправочникСсылка.УБ_Стандарты"));
	СтандартыСотрудника.Колонки.Добавить("ШкалаОценок", Новый ОписаниеТипов("СправочникСсылка.УБ_ШкалыОценок"));
	СтандартыСотрудника.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
	СтандартыСотрудника.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	СтандартыСотрудника.Колонки.Добавить("Оценка", Новый ОписаниеТипов("СправочникСсылка.УБ_ВидыОценок"));
	
	Возврат СтандартыСотрудника;
	
КонецФункции

Процедура УдалитьНеиспользуемыеПоказатели(Объект, ПоказателиСотрудника)
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаНачисление Из Объект.Начисления Цикл
		
		Если СтрокаНачисление.Расценка <> СтрокаНачисление.УтвержденноеЗначениеРасценка
			Или СтрокаНачисление.Вес <> СтрокаНачисление.УтвержденноеЗначениеВес
			Или СтрокаНачисление.План <> СтрокаНачисление.УтвержденноеЗначениеПлан
			Или СтрокаНачисление.КритическоеЗначение <> СтрокаНачисление.УтвержденноеКритическоеЗначение
			Или СтрокаНачисление.Факт <> СтрокаНачисление.РассчитанноеЗначениеФакта
			Или ЗначениеЗаполнено(СтрокаНачисление.Комментарий) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПоказательЭффективности", СтрокаНачисление.ПоказательЭффективности);
		ПараметрыОтбора.Вставить("ТипПоказателя", СтрокаНачисление.ТипПоказателя);
		
		НайденныеСтроки = ПоказателиСотрудника.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаНачисление);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.Начисления.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНеиспользуемыеСтандарты(Объект, СтандартыСотрудника)
	
	УдаляемыеСтрокиСотрудника = Новый Массив;
	УдаляемыеСтрокиРуководителя = Новый Массив;
	
	Для Каждого СтрокаСтандарты Из Объект.СтандартыОценкиСотрудника Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Стандарт", СтрокаСтандарты.Стандарт);
		
		НайденныеСтроки = СтандартыСотрудника.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаляемыеСтрокиСотрудника.Добавить(СтрокаСтандарты);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаСтандарты Из Объект.СтандартыОценкиРуководителя Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Стандарт", СтрокаСтандарты.Стандарт);
		
		НайденныеСтроки = СтандартыСотрудника.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаляемыеСтрокиРуководителя.Добавить(СтрокаСтандарты);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиСотрудника Цикл
		Объект.СтандартыОценкиСотрудника.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиРуководителя Цикл
		Объект.СтандартыОценкиРуководителя.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЗначениеПланаИФактаСбораДанных(СтрокаПоказателя, ТекущийОбъект)

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Организация", ТекущийОбъект.Организация);
	ПараметрыРасчета.Вставить("Подразделение", ТекущийОбъект.Подразделение);
	ПараметрыРасчета.Вставить("Сотрудник", ТекущийОбъект.Сотрудник);
	ПараметрыРасчета.Вставить("ФизическоеЛицо", ТекущийОбъект.Сотрудник.ФизическоеЛицо);
	ПараметрыРасчета.Вставить("НачалоПериода", ТекущийОбъект.НачалоПериода);
	ПараметрыРасчета.Вставить("КонецПериода", КонецДня(ТекущийОбъект.КонецПериода));
	Пересчитать = Ложь;
	Если СтрокаПоказателя.ПоказательЭффективности.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя 
				ИЛИ СтрокаПоказателя.ПоказательЭффективности.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаУстановкиФакта Тогда
		ДанныеПоказателя = УБ_РасчетПоказателейЭффективности.РассчитатьЗначенияПланаПоказателяЭффективности(СтрокаПоказателя.ПоказательЭффективности, ПараметрыРасчета);
		Если ДанныеПоказателя <> Неопределено И ДанныеПоказателя.Количество() Тогда
			СтрокаПоказателя.План = ДанныеПоказателя[0].План;
			СтрокаПоказателя.РассчитанноеЗначениеПлана = ДанныеПоказателя[0].План;
			Пересчитать = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Если СтрокаПоказателя.ПоказательЭффективности.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя 
				ИЛИ СтрокаПоказателя.ПоказательЭффективности.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаУстановкиФакта Тогда
		ДанныеПоказателя = УБ_РасчетПоказателейЭффективности.РассчитатьЗначенияПоказателяЭффективности(СтрокаПоказателя.ПоказательЭффективности, ПараметрыРасчета);
		Если ДанныеПоказателя <> Неопределено И ДанныеПоказателя.Количество() Тогда
			СтрокаПоказателя.Факт = ДанныеПоказателя[0].Факт;
			СтрокаПоказателя.РассчитанноеЗначениеФакта = ДанныеПоказателя[0].Факт;
			Пересчитать = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Если Пересчитать Тогда
		ПараметрыПоказателя = УБ_РасчетПоказателейЭффективности.СтруктураПараметровПоказатея();
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоказателя, СтрокаПоказателя);
		ЗаполнитьЗначенияСвойств(ПараметрыПоказателя, СтрокаПоказателя.ПоказательЭффективности);
		ПараметрыПоказателя.Показатель = СтрокаПоказателя.ПоказательЭффективности;
		ПараметрыПоказателя.Матричный = СтрокаПоказателя.ТипПоказателя.Матричный;
		ПараметрыПоказателя.ПериодРасчета = ТекущийОбъект.НачалоПериода;
		
		//Расчитываются все показатели
		Результат = УБ_РасчетПоказателейЭффективности.ПересчитатьЗначенияПоказателя(ПараметрыПоказателя);
		
		ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Результат);
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область КарточкаРасчетаЭффективности

Функция ТабличныйДокументКарточкиРасчетаЭффективности(РасчетЭффективности) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Макет = ПолучитьМакет("ПФ_MXL_КарточкаРасчетаЭффективности");
	
	Если Не РасчетЭффективности.Проведен Тогда
		ОбластьДокументНеПроведен = Макет.ПолучитьОбласть("ДокументНеПроведен");
		ТабличныйДокумент.Вывести(ОбластьДокументНеПроведен);
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполнения = ДанныеЗаполненияКарточкиРасчетаЭффективности(РасчетЭффективности);
	
	ДанныеШапки = ДанныеЗаполнения["РезультатПоШапке"];
	ДанныеШапки.Следующий();
	ВыборкаИтоговыеНачисления = ДанныеЗаполнения["ВыборкаИтоговыеНачисления"];
	ВыборкаСтандарты = ДанныеЗаполнения["ВыборкаСтандарты"];
	ВыборкаОтсутствия = ДанныеЗаполнения["ВыборкаОтсутствия"];
	ВыборкаНачисления = ДанныеЗаполнения["ВыборкаНачисления"];
	ВыборкаДанныеПоказателейРасчетаЗарплаты = ДанныеЗаполнения["ВыборкаДанныеПоказателейРасчетаЗарплаты"];
	ВыборкаИсторияРасчетаЭффективности = ДанныеЗаполнения["ВыборкаИсторияРасчетаЭффективности"];
	ВыборкаИспользованныеШкалыПоказателей = ДанныеЗаполнения["ВыборкаИспользованныеШкалыПоказателей"];
	
	ТаблицыРасчета = Новый ТабличныйДокумент;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ДанныеШапки);
	
	АдресФотографии = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная") Тогда
		МодульКадровыйУчетРасширенный = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетРасширенный");
		АдресФотографии = МодульКадровыйУчетРасширенный.АдресФотографииФизическогоЛица(ДанныеШапки.Сотрудник.ФизическоеЛицо);
	Иначе 
		
		АдресФотографии  = АдресФотографииСотрудника(ДанныеШапки.Сотрудник);
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресФотографии) Тогда
		
		ФотографияФизическогоЛица = ПолучитьИзВременногоХранилища(АдресФотографии);
		Если ТипЗнч(ФотографияФизическогоЛица) = Тип("Картинка") Тогда
			ОбластьШапка.Рисунки.ФотографияСотрудника.Картинка = ФотографияФизическогоЛица;
		ИначеЕсли ТипЗнч(ФотографияФизическогоЛица) = Тип("ДвоичныеДанные") Тогда
			ОбластьШапка.Рисунки.ФотографияСотрудника.Картинка = Новый Картинка(ФотографияФизическогоЛица);
		КонецЕсли;
		
		ОбластьШапка.Рисунки.ФотографияСотрудника.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		
	Иначе
		ОбластьШапка.Рисунки.Удалить(ОбластьШапка.Рисунки.ФотографияСотрудника);
	КонецЕсли;
	
	ТаблицыРасчета.Вывести(ОбластьШапка);
	
	РегулярныеНачисления = РегламентированныеНачисленияСотрудника(ДанныеШапки.Сотрудник,
		ДанныеШапки.Организация,
		ДанныеШапки.НачалоПериода);
	
	РегулярныеНачисленияИтого = 0;
	
	НачисленияСотрудника = РегулярныеНачисления.Получить(ДанныеШапки.Сотрудник);
	Если НачисленияСотрудника <> Неопределено Тогда
		
		ПерваяСтрока = Истина;
		
		Для Каждого СтрокаНачисление Из НачисленияСотрудника.Начисления Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаНачисление.Размер) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПерваяСтрока Тогда
				ОбластьРегулярныеНачисленияЗаголовок = Макет.ПолучитьОбласть("РегулярныеНачисленияЗаголовок");
				ТаблицыРасчета.Вывести(ОбластьРегулярныеНачисленияЗаголовок);
				ПерваяСтрока = Ложь;
			КонецЕсли;
			
			ОбластьРегулярныеНачисленияСтрока = Макет.ПолучитьОбласть("РегулярныеНачисленияСтрока");
			ОбластьРегулярныеНачисленияСтрока.Параметры.Заполнить(СтрокаНачисление);
			ТаблицыРасчета.Вывести(ОбластьРегулярныеНачисленияСтрока);
			
			РегулярныеНачисленияИтого = РегулярныеНачисленияИтого + СтрокаНачисление.Размер;
			
		КонецЦикла;
		
		Если Не ПерваяСтрока Тогда
			ОбластьРегулярныеНачисленияИтого = Макет.ПолучитьОбласть("РегулярныеНачисленияИтого");
			ОбластьРегулярныеНачисленияИтого.Параметры.Размер = РегулярныеНачисленияИтого;
			ТаблицыРасчета.Вывести(ОбластьРегулярныеНачисленияИтого);
		КонецЕсли;
		
	КонецЕсли;
	
	ИтогоНачисленоЗаПериод = РегулярныеНачисленияИтого;
	
	Если ВыборкаИтоговыеНачисления.Количество() Тогда
		ОбластьПоказателиЭффективностиЗаголовок = Макет.ПолучитьОбласть("ПоказателиЭффективностиЗаголовок");
		ТаблицыРасчета.Вывести(ОбластьПоказателиЭффективностиЗаголовок);
	КонецЕсли;
	
	БазовыеПоказатели = Новый Соответствие;	
	Пока ВыборкаНачисления.Следующий() Цикл
		
		Если ВыборкаНачисления.Матричный Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШапки.ВариантРасчетаПремии = Перечисления.УБ_ВариантыРасчетаПремии.ОтФактическогоЗначения Тогда
			БазовыеПоказатели.Вставить(ВыборкаНачисления.ТипПоказателя, ВыборкаНачисления.Сумма);
		ИначеЕсли ДанныеШапки.ВариантРасчетаПремии = Перечисления.УБ_ВариантыРасчетаПремии.ОтНормативногоЗначения Тогда
			БазовыеПоказатели.Вставить(ВыборкаНачисления.ТипПоказателя, ВыборкаНачисления.Расценка);
		КонецЕсли;
		
	КонецЦикла;
	
	ТипыПоказателейДляРаспределенияКоэффициентов = Новый ТаблицаЗначений;
	ТипыПоказателейДляРаспределенияКоэффициентов.Колонки.Добавить("ТипПоказателя");
	ТипыПоказателейДляРаспределенияКоэффициентов.Колонки.Добавить("КоэффициентРаспределения");
	ТипыПоказателейДляРаспределенияКоэффициентов.Колонки.Добавить("Сумма");
	
	СуммаПремии = 0;
	Если ВыборкаДанныеПоказателейРасчетаЗарплаты.Следующий() Тогда
		СуммаПремии = ВыборкаДанныеПоказателейРасчетаЗарплаты.Сумма;
	КонецЕсли;
	
	Если СуммаПремии <> 0 Тогда
		
		Пока ВыборкаИтоговыеНачисления.Следующий() Цикл	
			Если ВыборкаИтоговыеНачисления.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы Тогда
				НоваяСтрока = ТипыПоказателейДляРаспределенияКоэффициентов.Добавить();
				НоваяСтрока.ТипПоказателя = ВыборкаИтоговыеНачисления.ТипПоказателя;
				НоваяСтрока.КоэффициентРаспределения = ВыборкаИтоговыеНачисления.ИтоговоеЗначение;
			КонецЕсли;
		КонецЦикла;
		
		РезультатРаспределения = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			СуммаПремии, ТипыПоказателейДляРаспределенияКоэффициентов.ВыгрузитьКолонку("КоэффициентРаспределения"));
		
		Если РезультатРаспределения <> Неопределено Тогда
			Для ИндексСтроки = 0 По ТипыПоказателейДляРаспределенияКоэффициентов.Количество() - 1 Цикл
				ТипыПоказателейДляРаспределенияКоэффициентов[ИндексСтроки].Сумма = РезультатРаспределения[ИндексСтроки];
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыборкаИтоговыеНачисления.Сбросить();
	
	Пока ВыборкаИтоговыеНачисления.Следующий() Цикл
		
		Если ВыборкаИтоговыеНачисления.Матричный Тогда
			
			СуммаПоБазовомуПоказателю = 0;
			
			Если ЗначениеЗаполнено(ВыборкаИтоговыеНачисления.БазовыйТипПоказателя) Тогда
				ЗначениеБазовогоПоказателя = БазовыеПоказатели.Получить(ВыборкаИтоговыеНачисления.БазовыйТипПоказателя);
				Если ЗначениеБазовогоПоказателя <> Неопределено Тогда
					СуммаПоБазовомуПоказателю = ЗначениеБазовогоПоказателя;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаПоБазовомуПоказателю = 0 Тогда
				СуммаПоБазовомуПоказателю = РегулярныеНачисленияИтого;
			КонецЕсли;
			
			Если ВыборкаИтоговыеНачисления.БазовыйТипПоказателя.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы Тогда
				СуммаПоБазовомуПоказателю = 0;
			КонецЕсли;
			
			ИтогоПоПоказателю = Окр(СуммаПоБазовомуПоказателю * ВыборкаИтоговыеНачисления.ИтоговоеЗначение / 100, 2);
		Иначе
			ИтогоПоПоказателю = ВыборкаИтоговыеНачисления.ИтоговоеЗначение;
		КонецЕсли;
				
		Если ВыборкаИтоговыеНачисления.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы Тогда
			НайденнаяСтрока = ТипыПоказателейДляРаспределенияКоэффициентов.Найти(
				ВыборкаИтоговыеНачисления.ТипПоказателя, "ТипПоказателя");
			Если НайденнаяСтрока <> Неопределено Тогда
				ИтогоПоПоказателю = НайденнаяСтрока.Сумма;
			Иначе
				ИтогоПоПоказателю = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("ПоказательЭффективности", ВыборкаИтоговыеНачисления.ТипПоказателяПредставление
			+ ?(ЗначениеЗаполнено(ВыборкаИтоговыеНачисления.ЕдиницаИзмерения),
				", " + ВыборкаИтоговыеНачисления.ЕдиницаИзмеренияПредставление,
				""));
		СтруктураЗаполнения.Вставить("Сумма", ИтогоПоПоказателю);
		
		Если ВыборкаИтоговыеНачисления.Матричный Тогда
			СтруктураЗаполнения.Вставить("ПроцентПремии", Формат(ВыборкаИтоговыеНачисления.ИтоговоеЗначение, "ЧДЦ=2; ЧН=-") + ", %");
		КонецЕсли;
		
		ОбластьПоказателиЭффективностиСтрока = Макет.ПолучитьОбласть("ПоказателиЭффективностиСтрока");
		ОбластьПоказателиЭффективностиСтрока.Параметры.Заполнить(СтруктураЗаполнения);
		ТаблицыРасчета.Вывести(ОбластьПоказателиЭффективностиСтрока);
		
		ИтогоНачисленоЗаПериод = ИтогоНачисленоЗаПериод + ИтогоПоПоказателю;
		
	КонецЦикла;
	
	Если ВыборкаСтандарты.Количество() Тогда
		ОбластьСтандартыЗаголовок = Макет.ПолучитьОбласть("СтандартыЗаголовок");
		ТаблицыРасчета.Вывести(ОбластьСтандартыЗаголовок);
	КонецЕсли;
	
	Пока ВыборкаСтандарты.Следующий() Цикл
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Стандарт", ВыборкаСтандарты.Стандарт);
		СтруктураЗаполнения.Вставить("ОценкаСотрудника", ?(ЗначениеЗаполнено(ВыборкаСтандарты.ОценкаСотрудника),
			ВыборкаСтандарты.ОценкаСотрудника, "<...>"));
		СтруктураЗаполнения.Вставить("ОценкаРуководителя", ?(ЗначениеЗаполнено(ВыборкаСтандарты.ОценкаРуководителя),
			ВыборкаСтандарты.ОценкаРуководителя, "<...>"));
		
		ОбластьСтандартыСтрока = Макет.ПолучитьОбласть("СтандартыСтрока");
		ОбластьСтандартыСтрока.Параметры.Заполнить(СтруктураЗаполнения);
		ТаблицыРасчета.Вывести(ОбластьСтандартыСтрока);
		
	КонецЦикла;
	
	ОбластьИтогоЗаПериод = Макет.ПолучитьОбласть("ИтогоЗаПериод");
	ОбластьИтогоЗаПериод.Параметры.ИтогоЗаПериод = ИтогоНачисленоЗаПериод;
	ТаблицыРасчета.Вывести(ОбластьИтогоЗаПериод);
	
	Если ВыборкаОтсутствия.Количество() Тогда
		
		ОбластьОтсутствияЗаголовок = Макет.ПолучитьОбласть("ОтсутствияЗаголовок");
		ТаблицыРасчета.Вывести(ОбластьОтсутствияЗаголовок);
		
		ИтогоКоличествоЧасов = 0;
		
		Пока ВыборкаОтсутствия.Следующий() Цикл
			
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("ПричинаОтсутствия", ВыборкаОтсутствия.ПричинаОтсутствия);
			СтруктураЗаполнения.Вставить("КоличествоЧасов", ВыборкаОтсутствия.КоличествоЧасов);
			Если ВыборкаОтсутствия.ДатаНачала <> ВыборкаОтсутствия.ДатаОкончания Тогда
				СтруктураЗаполнения.Вставить("Период", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 - %2'"),
					Формат(ВыборкаОтсутствия.ДатаНачала, "ДЛФ=D"),
					Формат(ВыборкаОтсутствия.ДатаОкончания, "ДЛФ=D")));
			Иначе
				СтруктураЗаполнения.Вставить("Период", Формат(ВыборкаОтсутствия.ДатаНачала, "ДЛФ=D"));
			КонецЕсли;
			
			ОбластьОтсутствияСтрока = Макет.ПолучитьОбласть("ОтсутствияСтрока");
			ОбластьОтсутствияСтрока.Параметры.Заполнить(СтруктураЗаполнения);
			ТаблицыРасчета.Вывести(ОбластьОтсутствияСтрока);
			
			ИтогоКоличествоЧасов = ИтогоКоличествоЧасов + ВыборкаОтсутствия.КоличествоЧасов;
			
		КонецЦикла;
		
		ОбластьОтсутствияИтого = Макет.ПолучитьОбласть("ОтсутствияИтого");
		ОбластьОтсутствияИтого.Параметры.ИтогоКоличествоЧасов = ИтогоКоличествоЧасов;
		ТаблицыРасчета.Вывести(ОбластьОтсутствияИтого);
		
	КонецЕсли;
	
	ТаблицыРасчета.НачатьАвтогруппировкуСтрок();
	
	Если ВыборкаИспользованныеШкалыПоказателей.Количество() Тогда
		ОбластьШкалыПоказателейЗаголовок = Макет.ПолучитьОбласть("ШкалыПоказателейЗаголовок");
		ТаблицыРасчета.Вывести(ОбластьШкалыПоказателейЗаголовок, 0,, Ложь);
		
		ОбластьШкалыПоказателейШапкаТаблицы = Макет.ПолучитьОбласть("ШкалыПоказателейШапкаТаблицы");
		ТаблицыРасчета.Вывести(ОбластьШкалыПоказателейШапкаТаблицы, 1,, Ложь);
	КонецЕсли;
	
	Пока ВыборкаИспользованныеШкалыПоказателей.Следующий() Цикл
		
		ОбластьШкалыПоказателейСтрока = Макет.ПолучитьОбласть("ШкалыПоказателейСтрока");
		ОбластьШкалыПоказателейСтрока.Параметры.Заполнить(ВыборкаИспользованныеШкалыПоказателей);
		ТаблицыРасчета.Вывести(ОбластьШкалыПоказателейСтрока, 1,, Ложь);
		
		ОбластьШкалыПоказателейРасшифровкаЗаголовок = Макет.ПолучитьОбласть("ШкалыПоказателейРасшифровкаЗаголовок");
		ТаблицыРасчета.Вывести(ОбластьШкалыПоказателейРасшифровкаЗаголовок, 2,, Ложь);
		
		ВыборкаРасшифровкаШкалы = ВыборкаИспользованныеШкалыПоказателей.Выбрать();
		Пока ВыборкаРасшифровкаШкалы.Следующий() Цикл
			
			Если ВыборкаРасшифровкаШкалы.РасчетноеЗначение >= ВыборкаРасшифровкаШкалы.НижняяГраница
				И (ВыборкаРасшифровкаШкалы.РасчетноеЗначение <= ВыборкаРасшифровкаШкалы.ВерхняяГраница
					Или ВыборкаРасшифровкаШкалы.ВерхняяГраница = 0) Тогда
				ОбластьШкалыПоказателейРасшифровкаСтрока = Макет.ПолучитьОбласть("ШкалыПоказателейРасшифровкаСтрокаЖирная");
			Иначе
				ОбластьШкалыПоказателейРасшифровкаСтрока = Макет.ПолучитьОбласть("ШкалыПоказателейРасшифровкаСтрока");
			КонецЕсли;
			
			ОбластьШкалыПоказателейРасшифровкаСтрока.Параметры.Заполнить(ВыборкаРасшифровкаШкалы);
			ТаблицыРасчета.Вывести(ОбластьШкалыПоказателейРасшифровкаСтрока, 2,, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицыРасчета.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьДиаграммы = Новый ТабличныйДокумент;
	
	НомерДиаграммы = 0;
	
	Пока ВыборкаИсторияРасчетаЭффективности.Следующий() Цикл
		
		НомерДиаграммы = НомерДиаграммы + 1;
		
		Если НомерДиаграммы = 1 Тогда
			Цвет = Новый Цвет(88, 139, 164);
			ЦветПревышения = Новый Цвет(68, 119, 144);
		ИначеЕсли НомерДиаграммы = 2 Тогда
			Цвет = Новый Цвет(255, 192, 0);
			ЦветПревышения = Новый Цвет(235, 172, 0);
		Иначе
			Цвет = Новый Цвет(95, 194, 110);
			ЦветПревышения = Новый Цвет(75, 174, 90);
		КонецЕсли;
		
		ОбластьДиаграммаЭффективности = Макет.ПолучитьОбласть("ОбластьДиаграмма");
		ЗаполнитьДиаграмму(ОбластьДиаграммаЭффективности.Рисунки.ДиаграммаЭффективности.Объект,
			100,
			ВыборкаИсторияРасчетаЭффективности.Эффективность,
			Цвет,
			ЦветПревышения,
			Формат(ВыборкаИсторияРасчетаЭффективности.Период, "ДФ=MMMM"));
		
		ОбластьДиаграммы.Присоединить(ОбластьДиаграммаЭффективности);
			
	КонецЦикла;
	
	ОбластьПустаяДиаграмма = Макет.ПолучитьОбласть("ОбластьДиаграмма");
	ОбластьПустаяДиаграмма.Рисунки.Удалить(ОбластьПустаяДиаграмма.Рисунки.ДиаграммаЭффективности);
	Пока НомерДиаграммы < 3 Цикл
		НомерДиаграммы = НомерДиаграммы + 1;
		ОбластьДиаграммы.Присоединить(ОбластьПустаяДиаграмма);
	КонецЦикла;
	
	ЗаполнитьГрафикСтандартов(ОбластьДиаграммы, ВыборкаСтандарты, Макет);
	
	ТабличныйДокумент.Присоединить(ТаблицыРасчета);
	ТабличныйДокумент.Присоединить(ОбластьДиаграммы);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция РегламентированныеНачисленияСотрудника(Сотрудник, Организация, Период) Экспорт
	
		ДанныеСотрудников = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(Сотрудник)
		Или Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		Возврат ДанныеСотрудников;
	КонецЕсли;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Если ЗначениеЗаполнено(Организация) Тогда
		ТаблицаСотрудников.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Сотрудник;
	
	Если ЗначениеЗаполнено(Период) Тогда
		СтрокаСотрудник.Период = КонецМесяца(Период)-86399;
	Иначе
		СтрокаСотрудник.Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтрокаСотрудник.Организация = Организация;
	КонецЕсли;
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенный");
	ДанныеСотрудников = Модуль.ДействующиеНачисленияСотрудников(ТаблицаСотрудников, Неопределено);
	Если ДанныеСотрудников.Количество() = 0 Тогда
		СтрокаСотрудник.Период = НачалоМесяца(Период);
		ДанныеСотрудников = Модуль.ДействующиеНачисленияСотрудников(ТаблицаСотрудников, Неопределено);
	КонецЕсли;
	
	Возврат ДанныеСотрудников;
	
КонецФункции

Функция ДанныеЗаполненияКарточкиРасчетаЭффективности(РасчетЭффективности)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеквизитыДокумента.Ссылка КАК Ссылка,
		|	РеквизитыДокумента.Организация КАК Организация,
		|	РеквизитыДокумента.Подразделение КАК Подразделение,
		|	РеквизитыДокумента.Сотрудник КАК Сотрудник,
		|	РеквизитыДокумента.МодельПланированияЭффективности КАК МодельПланированияЭффективности,
		|	РеквизитыДокумента.Грейд КАК Грейд,
		|	РеквизитыДокумента.НачалоПериода КАК НачалоПериода,
		|	РеквизитыДокумента.КонецПериода КАК КонецПериода,
		|	РеквизитыДокумента.ИтоговаяОценкаПоСтандартам КАК ИтоговаяОценкаПоСтандартам,
		|	РеквизитыДокумента.ВариантРасчетаПремии КАК ВариантРасчетаПремии
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников КАК РеквизитыДокумента
		|ГДЕ
		|	РеквизитыДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИтоговыеНачисления.Ссылка КАК Ссылка,
		|	ТаблицаИтоговыеНачисления.ТипПоказателя КАК ТипПоказателя,
		|	ТаблицаИтоговыеНачисления.ТипПоказателя.Представление КАК ТипПоказателяПредставление,
		|	ЕСТЬNULL(РеквизитыТиповПоказателей.Матричный, ЛОЖЬ) КАК Матричный,
		|	ЕСТЬNULL(РеквизитыТиповПоказателей.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы, ЛОЖЬ) КАК ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РеквизитыТиповПоказателей.Матричный, ЛОЖЬ)
		|			ТОГДА ТаблицаИтоговыеНачисления.ПроцентПремии
		|		ИНАЧЕ ТаблицаИтоговыеНачисления.Сумма
		|	КОНЕЦ КАК ИтоговоеЗначение,
		|	РеквизитыТиповПоказателей.БазовыйТипПоказателя КАК БазовыйТипПоказателя,
		|	РеквизитыТиповПоказателей.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РеквизитыТиповПоказателей.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.ИтоговыеНачисления КАК ТаблицаИтоговыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ТипыПоказателей КАК РеквизитыТиповПоказателей
		|		ПО ТаблицаИтоговыеНачисления.ТипПоказателя = РеквизитыТиповПоказателей.Ссылка
		|ГДЕ
		|	ТаблицаИтоговыеНачисления.Ссылка = &Ссылка
		|	И НЕ РеквизитыТиповПоказателей.НеВыводитьИтоговыеЗначения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОценкиСотрудника.Ссылка КАК Ссылка,
		|	ТаблицаОценкиСотрудника.Стандарт КАК Стандарт,
		|	ТаблицаОценкиСотрудника.Стандарт.Представление КАК СтандартПредставление,
		|	ТаблицаОценкиСотрудника.Оценка КАК ОценкаСотрудника,
		|	ЕСТЬNULL(РеквизитыОценкиСотрудника.Значение, 0) КАК ЗначениеОценкиСотрудника,
		|	ТаблицаОценкиРуководителя.Оценка КАК ОценкаРуководителя,
		|	ЕСТЬNULL(РеквизитыОценкиРуководителя.Значение, 0) КАК ЗначениеОценкиРуководителя
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.СтандартыОценкиСотрудника КАК ТаблицаОценкиСотрудника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ВидыОценок КАК РеквизитыОценкиСотрудника
		|		ПО ТаблицаОценкиСотрудника.Оценка = РеквизитыОценкиСотрудника.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УБ_РасчетЭффективностиСотрудников.СтандартыОценкиРуководителя КАК ТаблицаОценкиРуководителя
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ВидыОценок КАК РеквизитыОценкиРуководителя
		|			ПО ТаблицаОценкиРуководителя.Оценка = РеквизитыОценкиРуководителя.Ссылка
		|		ПО ТаблицаОценкиСотрудника.Ссылка = ТаблицаОценкиРуководителя.Ссылка
		|			И ТаблицаОценкиСотрудника.Стандарт = ТаблицаОценкиРуководителя.Стандарт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_Стандарты КАК РеквизитыСтандартов
		|		ПО ТаблицаОценкиСотрудника.Стандарт = РеквизитыСтандартов.Ссылка
		|ГДЕ
		|	ТаблицаОценкиСотрудника.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтсутствия.Ссылка КАК Ссылка,
		|	ТаблицаОтсутствия.ПричинаОтсутствия КАК ПричинаОтсутствия,
		|	ТаблицаОтсутствия.ДатаНачала КАК ДатаНачала,
		|	ТаблицаОтсутствия.ДатаОкончания КАК ДатаОкончания,
		|	ТаблицаОтсутствия.КоличествоЧасов КАК КоличествоЧасов
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.Отсутствия КАК ТаблицаОтсутствия
		|ГДЕ
		|	ТаблицаОтсутствия.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.ТипПоказателя КАК ТипПоказателя,
		|	ЕСТЬNULL(РеквизитыТиповПоказателей.Матричный, ЛОЖЬ) КАК Матричный,
		|	СУММА(ТаблицаНачисления.Расценка) КАК Расценка,
		|	СУММА(ТаблицаНачисления.Сумма) КАК Сумма
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.Начисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ТипыПоказателей КАК РеквизитыТиповПоказателей
		|		ПО ТаблицаНачисления.ТипПоказателя = РеквизитыТиповПоказателей.Ссылка
		|ГДЕ
		|	ТаблицаНачисления.Ссылка = &Ссылка
		|	И НЕ ТаблицаНачисления.ПоказательЭффективности.НеУчитыватьВРасчетеПерсональнойЭффективности
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНачисления.ТипПоказателя,
		|	ЕСТЬNULL(РеквизитыТиповПоказателей.Матричный, ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоказателейРасчетаЗарплаты.Сотрудник КАК Сотрудник,
		|	СУММА(ДанныеПоказателейРасчетаЗарплаты.Значение) КАК Сумма
		|ИЗ
		|	РегистрНакопления.УБ_ДанныеПоказателейРасчетаЗарплаты КАК ДанныеПоказателейРасчетаЗарплаты
		|ГДЕ
		|	ДанныеПоказателейРасчетаЗарплаты.Сотрудник = &Сотрудник
		|	И ДанныеПоказателейРасчетаЗарплаты.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ДанныеПоказателейРасчетаЗарплаты.РаспределениеПремии
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПоказателейРасчетаЗарплаты.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеИтоговыхНачислений.ПериодМесяц КАК Период,
		|	ДанныеИтоговыхНачислений.ТипПоказателя КАК ТипПоказателя,
		|	ДанныеИтоговыхНачислений.ЭффективностьОборот КАК Эффективность
		|ИЗ
		|	РегистрНакопления.УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудников.Обороты(&НачалоПериодаИсторииРасчета, &КонецПериодаИсторииРасчета, Авто, Сотрудник = &Сотрудник) КАК ДанныеИтоговыхНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ТипыПоказателей КАК РеквизитыТипыПоказателей
		|		ПО ДанныеИтоговыхНачислений.ТипПоказателя = РеквизитыТипыПоказателей.Ссылка
		|ГДЕ
		|	РеквизитыТипыПоказателей.Матричный
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеквизитыРасчетЭффективности.ШкалаПоказателей КАК ШкалаПоказателей
		|ПОМЕСТИТЬ ИспользуемыеШкалыПоказателей
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников КАК РеквизитыРасчетЭффективности
		|ГДЕ
		|	РеквизитыРасчетЭффективности.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЧНачисления.ШкалаПоказателей
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.Начисления КАК ТЧНачисления
		|ГДЕ
		|	ТЧНачисления.Ссылка = &Ссылка
		|	И ТЧНачисления.ШкалаПоказателей <> ЗНАЧЕНИЕ(Справочник.УБ_ШкалыПоказателей.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияШкалыПоказателейСрезПоследних.ШкалаПоказателей КАК ШкалаПоказателей,
		|	ЗначенияШкалы.НижняяГраница КАК НижняяГраница,
		|	ЗначенияШкалы.ВерхняяГраница КАК ВерхняяГраница,
		|	ЗначенияШкалы.Значение КАК Значение
		|ПОМЕСТИТЬ ЗначенияШкалыПоказателей
		|ИЗ
		|	РегистрСведений.УБ_ЗначенияШкалыПоказателей.СрезПоследних(
		|			&ПериодРасчета,
		|			ШкалаПоказателей В
		|				(ВЫБРАТЬ
		|					ИспользуемыеШкалыПоказателей.ШкалаПоказателей КАК ШкалаПоказателей
		|				ИЗ
		|					ИспользуемыеШкалыПоказателей КАК ИспользуемыеШкалыПоказателей)) КАК ЗначенияШкалыПоказателейСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УБ_УстановкаЗначенийШкалыПоказателей.ЗначенияШкалы КАК ЗначенияШкалы
		|		ПО ЗначенияШкалыПоказателейСрезПоследних.УстановкаЗначенийШкалыПоказателей = ЗначенияШкалы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетЭффективностиИтоговыеНачисления.ТипПоказателя КАК ПоказательЭффективности,
		|	РасчетЭффективностиИтоговыеНачисления.ТипПоказателя.Представление КАК ПоказательЭффективностиПредставление,
		|	РасчетЭффективностиИтоговыеНачисления.Ссылка.ШкалаПоказателей КАК ШкалаПоказателей,
		|	РасчетЭффективностиИтоговыеНачисления.Ссылка.ШкалаПоказателей.Представление КАК ШкалаПоказателейПредставление,
		|	РасчетЭффективностиИтоговыеНачисления.Эффективность КАК РасчетноеЗначение,
		|	РасчетЭффективностиИтоговыеНачисления.ПроцентПремии КАК ЗначениеПоШкале,
		|	ЕСТЬNULL(ЗначенияШкалыПоказателей.НижняяГраница, 0) КАК НижняяГраница,
		|	ЕСТЬNULL(ЗначенияШкалыПоказателей.ВерхняяГраница, 0) КАК ВерхняяГраница,
		|	ЕСТЬNULL(ЗначенияШкалыПоказателей.Значение, 0) КАК Значение
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.ИтоговыеНачисления КАК РасчетЭффективностиИтоговыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияШкалыПоказателей КАК ЗначенияШкалыПоказателей
		|		ПО РасчетЭффективностиИтоговыеНачисления.Ссылка.ШкалаПоказателей = ЗначенияШкалыПоказателей.ШкалаПоказателей
		|ГДЕ
		|	РасчетЭффективностиИтоговыеНачисления.Ссылка = &Ссылка
		|	И РасчетЭффективностиИтоговыеНачисления.Эффективность <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетЭффективностиНачисления.ПоказательЭффективности,
		|	РасчетЭффективностиНачисления.ПоказательЭффективности.Представление,
		|	РасчетЭффективностиНачисления.ШкалаПоказателей,
		|	РасчетЭффективностиНачисления.ШкалаПоказателей.Представление,
		|	ВЫБОР
		|		КОГДА РасчетЭффективностиНачисления.КритическоеЗначение <> РасчетЭффективностиНачисления.План
		|			ТОГДА (РасчетЭффективностиНачисления.Факт - РасчетЭффективностиНачисления.КритическоеЗначение) / (РасчетЭффективностиНачисления.План - РасчетЭффективностиНачисления.КритическоеЗначение) * 100
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	РасчетЭффективностиНачисления.ПроцентВыполнения,
		|	ЕСТЬNULL(ЗначенияШкалыПоказателей.НижняяГраница, 0),
		|	ЕСТЬNULL(ЗначенияШкалыПоказателей.ВерхняяГраница, 0),
		|	ЕСТЬNULL(ЗначенияШкалыПоказателей.Значение, 0)
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников.Начисления КАК РасчетЭффективностиНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияШкалыПоказателей КАК ЗначенияШкалыПоказателей
		|		ПО РасчетЭффективностиНачисления.ШкалаПоказателей = ЗначенияШкалыПоказателей.ШкалаПоказателей
		|ГДЕ
		|	РасчетЭффективностиНачисления.Ссылка = &Ссылка
		|	И РасчетЭффективностиНачисления.ШкалаПоказателей <> ЗНАЧЕНИЕ(Справочник.УБ_ШкалыПоказателей.ПустаяСсылка)
		|ИТОГИ
		|	МАКСИМУМ(ШкалаПоказателей),
		|	МАКСИМУМ(ШкалаПоказателейПредставление),
		|	МАКСИМУМ(РасчетноеЗначение),
		|	МАКСИМУМ(ЗначениеПоШкале)
		|ПО
		|	ПоказательЭффективности";
	
	Запрос.УстановитьПараметр("Ссылка", РасчетЭффективности);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(РасчетЭффективности.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(РасчетЭффективности.КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериодаИсторииРасчета", НачалоМесяца(ДобавитьМесяц(РасчетЭффективности.НачалоПериода, -2)));
	Запрос.УстановитьПараметр("КонецПериодаИсторииРасчета", КонецМесяца(РасчетЭффективности.КонецПериода));
	Запрос.УстановитьПараметр("Сотрудник", РасчетЭффективности.Сотрудник);
	Запрос.УстановитьПараметр("ПериодРасчета", КонецДня(РасчетЭффективности.НачалоПериода));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("РезультатПоШапке", РезультатыЗапроса[0].Выбрать());
	ДанныеЗаполнения.Вставить("ВыборкаИтоговыеНачисления", РезультатыЗапроса[1].Выбрать());
	ДанныеЗаполнения.Вставить("ВыборкаСтандарты", РезультатыЗапроса[2].Выбрать());
	ДанныеЗаполнения.Вставить("ВыборкаОтсутствия", РезультатыЗапроса[3].Выбрать());
	ДанныеЗаполнения.Вставить("ВыборкаНачисления", РезультатыЗапроса[4].Выбрать());
	ДанныеЗаполнения.Вставить("ВыборкаДанныеПоказателейРасчетаЗарплаты", РезультатыЗапроса[5].Выбрать());
	ДанныеЗаполнения.Вставить("ВыборкаИсторияРасчетаЭффективности", РезультатыЗапроса[6].Выбрать());
	ДанныеЗаполнения.Вставить("ВыборкаИспользованныеШкалыПоказателей", РезультатыЗапроса[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ЗаполнитьДиаграмму(Диаграмма, Всего, Использовано, Цвет, ЦветПревышения, Имя)
	
	Шрифт = Новый Шрифт(, 8);
	ЖирныйШрифт = Новый Шрифт(, 8, Истина);
	
	Диаграмма.Обновление = Ложь;
	
	Диаграмма.Окантовка = Ложь;
	Диаграмма.ТипДиаграммы = ТипДиаграммы.Кольцевая;
	Диаграмма.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.Нет;
	Диаграмма.ОбластьЗаголовка.Расположение = РасположениеОбластиЗаголовкаДиаграммы.УказываетсяРасположение;
	Диаграмма.ОбластьЗаголовка.ПрозрачныйФон = Истина;
	Диаграмма.ОбластьЗаголовка.Верх = 0.25;
	Диаграмма.ОбластьЗаголовка.Низ = 0.75;
	Диаграмма.ОбластьЗаголовка.Лево = 0.25;
	Диаграмма.ОбластьЗаголовка.Право = 0.75;
	
	Диаграмма.ОбластьЗаголовка.Текст = Имя 
		+ " "
		+ Окр(Использовано / Всего *100)
		+ "%";
	
	Диаграмма.ОбластьЗаголовка.ЦветТекста = Цвет;
	Диаграмма.ОбластьЗаголовка.Шрифт = ЖирныйШрифт;
	
	Диаграмма.Точки.Добавить();
	Диаграмма.Точки[0].Текст = "";
	
	Если Использовано < Всего Тогда
		
		Отставание = Всего - Использовано;
		
		Стр1 = Новый ФорматированнаяСтрока("Выполнено: ", Шрифт);
		Стр2 = Новый ФорматированнаяСтрока("" + Использовано, ЖирныйШрифт);
		Стр3 = Новый ФорматированнаяСтрока(" (" + Использовано + "%)", Шрифт);
		
		Диаграмма.Серии.Добавить("Выполнено");
		Диаграмма.Серии[0].Цвет = Цвет;
		Диаграмма.УстановитьЗначение(0, 0, Использовано,, Новый ФорматированнаяСтрока(Стр1, Стр2, Стр3));
		
		Стр1 = Новый ФорматированнаяСтрока("Отставание: ", Шрифт);
		Стр2 = Новый ФорматированнаяСтрока("" + Отставание, ЖирныйШрифт);
		Стр3 = Новый ФорматированнаяСтрока(" (" + Отставание + "%)", Шрифт);
		
		Диаграмма.Серии.Добавить("Отставание");
		Диаграмма.Серии[1].Цвет = Новый Цвет(200, 200, 200);
		Диаграмма.УстановитьЗначение(0, 1, Отставание,, Новый ФорматированнаяСтрока(Стр1, Стр2, Стр3));
		
	Иначе
		
		Перевыполнено = Использовано - Всего;
		
		Стр1 = Новый ФорматированнаяСтрока("Перевыполнено: ", Шрифт);
		Стр2 = Новый ФорматированнаяСтрока("" + Перевыполнено, ЖирныйШрифт);
		Стр3 = Новый ФорматированнаяСтрока(" (" + Перевыполнено + "%)", Шрифт);
		
		Диаграмма.Серии.Добавить("Перевыполнено");
		Диаграмма.Серии[0].Цвет = ЦветПревышения;
		Диаграмма.УстановитьЗначение(0, 0, Перевыполнено,, Новый ФорматированнаяСтрока(Стр1, Стр2, Стр3));
		
		Стр1 = Новый ФорматированнаяСтрока("Выполнено: ", Шрифт);
		Стр2 = Новый ФорматированнаяСтрока("" + Всего, ЖирныйШрифт);
		Стр3 = Новый ФорматированнаяСтрока(" (" + Всего + "%)", Шрифт);
		
		Диаграмма.Серии.Добавить("Выполнено");
		Диаграмма.Серии[1].Цвет = Цвет;
		Диаграмма.УстановитьЗначение(0, 1, Использовано,, Новый ФорматированнаяСтрока(Стр1, Стр2, Стр3));
		
	КонецЕсли;
	
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьГрафикСтандартов(ТабличныйДокумент, ВыборкаСтандарты, Макет)
	
	Если ВыборкаСтандарты.Количество() < 3 Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаСтандарты.Сбросить();
	
	ОбластьГрафикСтандартов = Макет.ПолучитьОбласть("ОбластьГрафикСтандартов");
	
	Диаграмма = ОбластьГрафикСтандартов.Рисунки.ГрафикСтандартов.Объект;
	
	Диаграмма.Обновление = Ложь;
	
	Диаграмма.ТипДиаграммы = ТипДиаграммы.РадарныйГрафик;
	
	Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
	Интервал.Начало = 0;
	Интервал.Конец = 2.5;
	Интервал.Цвет = Новый Цвет(255, 100, 100);
	
	Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
	Интервал.Начало = 2.5;
	Интервал.Конец = 3.5;
	Интервал.Цвет = Новый Цвет(255, 255, 100);
	
	Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
	Интервал.Начало = 3.5;
	Интервал.Конец = 4.5;
	Интервал.Цвет = Новый Цвет(100, 255, 100);
	
	Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
	Интервал.Начало = 4.5;
	Интервал.Конец = 5.5;
	Интервал.Цвет = Новый Цвет(100, 255, 255);
	
	СерияСотрудник = Диаграмма.Серии.Добавить("Сотрудник");
	СерияРуководитель = Диаграмма.Серии.Добавить("Руководитель");
	
	ТекущийИндекс = 0;
	
	Пока ВыборкаСтандарты.Следующий() Цикл
		
		Диаграмма.Точки.Добавить(ВыборкаСтандарты.СтандартПредставление);
		ТочкаДиаграммы = Диаграмма.Точки[ТекущийИндекс];
		
		Диаграмма.УстановитьЗначение(ТочкаДиаграммы, СерияСотрудник, ВыборкаСтандарты.ЗначениеОценкиСотрудника);
		Диаграмма.УстановитьЗначение(ТочкаДиаграммы, СерияРуководитель, ВыборкаСтандарты.ЗначениеОценкиРуководителя);
		
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЦикла;
	
	Диаграмма.Обновление = Истина;
	
	ТабличныйДокумент.Вывести(ОбластьГрафикСтандартов);
	
КонецПроцедуры

Функция АдресаФотографийСотрудников(Сотрудник) Экспорт
	
	Фотография = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник); 	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_Сотрудники.Фотография КАК Фотография,
		|	УБ_Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.УБ_Сотрудники КАК УБ_Сотрудники
		|ГДЕ
		|	УБ_Сотрудники.Ссылка = &Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Фотография;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Фотография.Вставить(Выборка.Сотрудник, 
				ПоместитьВоВременноеХранилище(Выборка.Фотография.Получить(), Выборка.Сотрудник.УникальныйИдентификатор()));
			КонецЦикла;
			
	Возврат Фотография;
	
КонецФункции            

Функция АдресФотографииСотрудника(Сотрудник) Экспорт
	Фотография = АдресаФотографийСотрудников(Сотрудник);
	Возврат ?(Фотография[Сотрудник] = Неопределено, "", Фотография[Сотрудник]);
КонецФункции

#КонецОбласти

#Область Печать

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли