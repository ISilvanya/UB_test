
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() И НЕ РольДоступна("УБ_ДолжностьHR") Тогда
		УстановитьОграничениеДоступаКСотрудникамДляРасчетаЭффективности();
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
			"ТекущийПользователь",
			ТекущийПользователь);
	КонецЕсли;
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Список.ТекстЗапроса);
	
	Сотрудник = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Сотрудник");
	Подразделение = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение");
	ОтборПодразделениеВГруппе = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение");

	СписокОткрытРуководителем(ТекущийПользователь);
	Элементы.СписокГрупповоеСоздание.Видимость = ОткрытРуководителем ИЛИ РольДоступна("ПолныеПрава");
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьСписокСтатусов();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("Сотрудник", Сотрудник);
	Настройки.Вставить("Подразделение", Подразделение);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Сотрудник = Настройки.Получить("Сотрудник");
	Подразделение = Настройки.Получить("Подразделение");
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Сотрудник = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Сотрудник");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Сотрудник",
		Сотрудник,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Сотрудник));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Подразделение));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	УстановитьОтборыСписка();	
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОграничитьДоступКСотрудникамДляРасчетаЭффективности", Истина);
	Отбор.Вставить("СотрудникуПрисвоенаМодель", Истина);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Сотрудник);
	
	ОткрытьФорму("ОбщаяФорма.УБ_ФормаВыбораСотрудника", ПараметрыФормы, Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборыСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборКонецПериодаПриИзменении(Элемент)
	
	УстановитьОтборыСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если ОтборКонецПериода = Дата("0001.01.01 00:00:00") Тогда
		ОтборКонецПериодаИспользовать = Ложь;
	Иначе
		ОтборКонецПериода = КонецМесяца(ОтборКонецПериода);
		ОтборКонецПериодаИспользовать = Истина;
	КонецЕсли;	
	
	УстановитьОтборыСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеВГруппеПриИзменении(Элемент)
	
	УстановитьОтборыСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура ЗафиксироватьПодразделение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ОтборПодразделениеВГруппе = Результат;	
		
	КонецЕсли	
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьОтборыСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"КонецПериода",
		ОтборКонецПериода,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ОтборКонецПериодаИспользовать);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Подразделение",
		Подразделение,
		?(ИспользоватьОтборПодразделениеВГруппе,ВидСравненияКомпоновкиДанных.ВИерархии,ВидСравненияКомпоновкиДанных.Равно),
		,
		ЗначениеЗаполнено(Подразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СостояниеДокумента",
		3,
		ВидСравненияКомпоновкиДанных.НеРавно,
		,
		ОтборНеУтвержденныеДокументы);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Сотрудник",
		Сотрудник,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Сотрудник));	
	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеДоступаКСотрудникамДляРасчетаЭффективности()
	
	ТекстОграничениеДоступа = 
		"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УБ_ДоступностьРасчетаЭффективностиСотрудниковДляПользователей КАК ДоступностьРасчетаЭффективностиДляПользователей
		|		ПО (ДоступностьРасчетаЭффективностиДляПользователей.Пользователь = &ТекущийПользователь)
		|		И (ДоступностьРасчетаЭффективностиДляПользователей.Организация = РасчетЭффективностиСотрудников.Организация)
		|		И (ДоступностьРасчетаЭффективностиДляПользователей.Подразделение = РасчетЭффективностиСотрудников.Подразделение)
		|		И (ДоступностьРасчетаЭффективностиДляПользователей.ИдентификаторЗаписи В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ДоступностьРасчетаЭффективности.ИдентификаторЗаписи
		|			ИЗ
		|				РегистрСведений.УБ_ДоступностьРасчетаЭффективностиСотрудниковДляПользователей КАК ДоступностьРасчетаЭффективности
		|			ГДЕ
		|				ДоступностьРасчетаЭффективности.Пользователь = &ТекущийПользователь
		|				И ДоступностьРасчетаЭффективности.Подразделение = РасчетЭффективностиСотрудников.Подразделение
		|				И ВЫБОР
		|					КОГДА ДоступностьРасчетаЭффективности.Сотрудник = ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоступностьРасчетаЭффективности.Сотрудник = РасчетЭффективностиСотрудников.Сотрудник
		|				КОНЕЦ
		|				И ДоступностьРасчетаЭффективности.ДатаНачала <= РасчетЭффективностиСотрудников.КонецПериода
		|				И ВЫБОР
		|					КОГДА ДоступностьРасчетаЭффективности.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|					ИНАЧЕ ДоступностьРасчетаЭффективности.ДатаОкончания
		|				КОНЕЦ >= РасчетЭффективностиСотрудников.НачалоПериода
		|			УПОРЯДОЧИТЬ ПО
		|				ДоступностьРасчетаЭффективности.Сотрудник))";
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,
		"// УсловиеОграниченияДоступаКСотрудникам",
		ТекстОграничениеДоступа);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СотрудникАвтоПодборНаСервере(ПараметрыПолученияДанных, ТекущаяДата());
КонецПроцедуры

&НаСервереБезКонтекста
Функция СотрудникАвтоПодборНаСервере(ПараметрыПолученияДанных, ДатаУстановкиМодели)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если ПолучитьФункциональнуюОпцию("УБ_УправлениеТорговлей") Тогда
		СписокСотрудников = Справочники.УБ_Сотрудники.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	Иначе
		СписокСотрудников = Справочники.Сотрудники.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(МоделиПланированияСотрудников.Период) КАК Период,
		|	МоделиПланированияСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_ПериодыНазначенияМоделейСотрудникам
		|ИЗ
		|	РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(&Период, Сотрудник В (&Сотрудники)) КАК
		|		МоделиПланированияСотрудников
		|СГРУППИРОВАТЬ ПО
		|	МоделиПланированияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МоделиПланированияСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(&Период, Сотрудник В (&Сотрудники)) КАК
		|		МоделиПланированияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыНазначенияМоделейСотрудникам КАК ПериодыНазначенияМоделейСотрудникам
		|		ПО МоделиПланированияСотрудников.Период = ПериодыНазначенияМоделейСотрудникам.Период
		|		И МоделиПланированияСотрудников.Сотрудник = ПериодыНазначенияМоделейСотрудникам.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ШтатноеРасписание КАК РеквизитыШтатноеРасписание
		|		ПО МоделиПланированияСотрудников.МодельПланированияЭффективности.ШтатноеРасписание = РеквизитыШтатноеРасписание.Ссылка
		|ГДЕ
		|	НЕ ЕСТЬNULL(РеквизитыШтатноеРасписание.Закрыта, ЛОЖЬ)
		|	ИЛИ &Период < РеквизитыШтатноеРасписание.ДатаЗакрытия";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(ДатаУстановкиМодели), НачалоМесяца(ДатаУстановкиМодели), Неопределено));
	Запрос.УстановитьПараметр("Сотрудники", СписокСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементСотрудник = СписокСотрудников.НайтиПоЗначению(Выборка.Сотрудник);
		Если ЭлементСотрудник <> Неопределено Тогда
			НовыйЭлемент = ДанныеВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементСотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервере
Функция УБ_ИспользоватьСправочникиКАУП() 
	
	Возврат Константы.УБ_ИспользоватьСправочникиКАУП.Получить();
	
КонецФункции	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	н=0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСтатусов()
	
	ОтборСтатусы.Очистить();
	
	ОтборСтатусы.Добавить(0,"Документ не заполнен");
	ОтборСтатусы.Добавить(1,"План утвержден");
	ОтборСтатусы.Добавить(3,"Документ заполнен");
	
КонецПроцедуры	

&НаКлиенте
Процедура СтатусыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	Элементы.ГруппаСписокСтатусов.Показать();
	ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВсплывающиеГруппы()
	
	Если Элементы.ГруппаСписокСтатусов.Скрыта() Тогда
		ОтборСтатусыЗначениеПриИзмененииНаСервере();	
	Иначе	
		ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОтборСтатусыЗначениеПриИзмененииНаСервере()
	
	ОтборСтатус = "";
	СписокСтатусов = Новый СписокЗначений;
	Для каждого Строка из ОтборСтатусы Цикл
		Если Строка.Пометка Тогда
			ОтборСтатус = ОтборСтатус + Строка.Представление + "; ";
			СписокСтатусов.Добавить(Строка.Значение);
		КонецЕсли;	
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СостояниеДокумента",
		СписокСтатусов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(СписокСтатусов));	
	

КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеСоздание(Команда)
	
	ОткрытьФорму("Обработка.УБ_РегистрацияРЭНаМесяц.Форма.Форма");
	
КонецПроцедуры

&НаСервере
Функция СписокОткрытРуководителем(ТекущийПользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РуководителиПодразделений.Пользователь КАК Руководитель
		|ИЗ
		|	РегистрСведений.УБ_НазначенныеРуководителиПодразделений.СрезПоследних(
		|			&Период) КАК РуководителиПодразделений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДелегированныеСотрудники.ЗаместительРуководителя
		|ИЗ
		|	РегистрСведений.УБ_ДелегированныеСотрудникиПодразделения.СрезПоследних(
		|			&Период) КАК ДелегированныеСотрудники";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	//Запрос.УстановитьПараметр("Организация", Объект.Организация);
	//Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	//Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОткрытРуководителем = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Руководитель = ТекущийПользователь Тогда
			ОткрытРуководителем = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОткрытРуководителем;
	
КонецФункции



#КонецОбласти
