
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();
	Иначе 
		ПериодРасчетаМоделиПланирования = ПолучитьПериодРасчетаМоделиПланирования();
		Если НЕ ЗначениеЗаполнено(Объект.ПериодРасчета) Тогда
			Объект.ПериодРасчета = Объект.КонецПериода;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов                
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
		 
	Если ПериодРасчетаМоделиПланирования = Перечисления.УБ_ПериодыРасчетаМоделиПланирования.Произвольный И Не Объект.Ссылка.Пустая() Тогда
		Элементы.НачалоПериода.Видимость = Истина;
		Элементы.КонецПериода.Видимость = Истина;
		Элементы.ВыбратьПериод.Видимость = Истина;
		Элементы.ПериодРасчета.Видимость = Ложь;
	ИначеЕсли Объект.Ссылка.Пустая() И Константы.УБ_ИспользоватьПроизвольныйПериодРасчетаМоделиПланирования.Получить() Тогда
		Элементы.НачалоПериода.Видимость = Истина;
		Элементы.КонецПериода.Видимость = Истина;
		Элементы.ВыбратьПериод.Видимость = Истина;
		Элементы.ПериодРасчета.Видимость = Ложь;	
	КонецЕсли;
	
	ЗаполнитьРуководителейИПредДокумент();
	Если Не ЗначениеЗаполнено(Зам_Руководителя) Тогда
		Элементы.Зам_Руководителя.Видимость = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПредыдущийДокумент) Тогда
		Элементы.ПредыдущийДокумент.Видимость = Истина;
		Элементы.ПредыдущийДокумент.Заголовок = "Пред. документ от " + Строка(Формат(ПредыдущийДокумент.ПериодРасчета,"ДФ=dd.MM.yyyy"));
	КонецЕсли;
	Если ЗначениеЗаполнено(СледующийДокумент) Тогда
		Элементы.СледующийДокумент.Видимость = Истина;
		Элементы.СледующийДокумент.Заголовок = "След. документ от " + Строка(Формат(СледующийДокумент.ПериодРасчета,"ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Элементы.МодельПланированияЭффективности.Гиперссылка = ОткрытРуководителем ИЛИ РольДоступна("ПолныеПрава");
	
	КатегорияВерсияПредставление = Строка(Объект.Грейд) + " " + Строка(Объект.ВерсияГрейда);
		
	СпособРаспределенияПремии = Константы.УБ_СпособРаспределенияПремии.Получить();
	Если СпособРаспределенияПремии = Перечисления.УБ_СпособРаспределенияПремии.Стандартный Или Не ЗначениеЗаполнено(СпособРаспределенияПремии) Тогда
		Элементы.РаспределениеПремииПодразделенияПредельныйКоэффициентРЭ.Видимость = Ложь;
		Элементы.РаспределениеПремииПодразделенияМаксимальнаяСумма.Видимость = Ложь;
	Иначе
		Элементы.РаспределениеПремииПодразделенияПредельныйКоэффициентРЭ.Видимость = Истина;
		Элементы.РаспределениеПремииПодразделенияМаксимальнаяСумма.Видимость = Истина;
	КонецЕсли;	
	
	УстановкаИндикаторовЭффективности();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);
	
	//КНОПКИ ПЛАН ФАКТ
	УстановитьОформлениеКнопокПланФакт();
	Элементы.ГруппаРуководитель.Видимость = (Руководитель <> "");
	Элементы.ГруппаЗамРуководителя.Видимость = (Зам_Руководителя <> "");
	
	//ШИРИНА СТОЛБЦОВ
	УстановитьОптимальнуюШиринуКолонки("Расценка",, ИСТИНА);
	УстановитьОптимальнуюШиринуКолонки("Вес",, ИСТИНА);
	УстановитьОптимальнуюШиринуКолонки("План",, ИСТИНА);
	УстановитьОптимальнуюШиринуКолонки("Факт",, ИСТИНА);
	УстановитьОптимальнуюШиринуКолонки("Сумма",, ИСТИНА);
	УстановитьОптимальнуюШиринуКолонки("ИндикаторГраницЭффективности",,,2);
КонецПроцедуры

&НаСервере
Процедура УстановкаИндикаторовЭффективности()
	ДеревоНачисленийТаблица = РеквизитФормыВЗначение("ДеревоНачислений");
	
	Для каждого Показатель из ДеревоНачисленийТаблица.Строки Цикл
		
		Для каждого Параметр Из Показатель.Строки Цикл
			
			ПараметрПоказатель = Параметр.Показатель;
			
			Если ПараметрПоказатель.НегативноеОтклонениеНормыДо <> Неопределено Тогда
				
				УсловиеПустоты = ((Параметр.План = 0)И(Параметр.Факт = 0));
				
				Если УсловиеПустоты Тогда
					
					Параметр.ИндикаторГраницЭффективности = "";
					
				Иначе
					
					Если ПараметрПоказатель.НегативноеОтклонениеНормыДо >= Параметр.ПроцентВыполнения Тогда
					
						Параметр.ИндикаторГраницЭффективности = "▼";
					
					ИначеЕсли (
						ПараметрПоказатель.ПограничноеОтклонениеНормыОт <= Параметр.ПроцентВыполнения 
						И 
						Параметр.ПроцентВыполнения <= ПараметрПоказатель.ПограничноеОтклонениеНормыДо
						) Тогда	
							Параметр.ИндикаторГраницЭффективности = "▬";
							
					Иначе	
						Параметр.ИндикаторГраницЭффективности = "▲";
					КонецЕсли;
				КонецЕсли;		
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоНачисленийТаблица,"ДеревоНачислений");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИспользуетсяБезокладнаяСистемаПоказателей Тогда
		Если ИмяСобытия = "Запись_РасчетЭффективностиСотрудника"
			И Параметр = Объект.Подразделение Тогда
			ЗаполнитьРасчетЭффективностиТаблицыРаспределенияПремииПодразделения();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ДоступнаСтраницаРаспределенияПремии Тогда
		
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
			И Объект.СуммаКРаспределению <> Объект.РаспределениеПремииПодразделения.Итог("Сумма")+Объект.ОстатокРаспределения Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюПересчитатьСуммуРаспределеннойПремии",
				ЭтотОбъект, ДополнительныеПараметры);
			Если не	СпособРаспределенияПремии = ПредопределенноеЗначение("Перечисление.УБ_СпособРаспределенияПремии.Способ2") Тогда
				Отказ = Истина;
				ТекстВопроса = НСтр("ru = 'Итог премии не равен сумме к распределению. Выполнить перерасчет?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	Объект.ПериодРасчета = КонецМесяца(Объект.ПериодРасчета);
	
	ДокументУжеСуществует = ПроверкаНаличияДокументаРасчетаЭффективности();
	Если ДокументУжеСуществует Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На ""%1"" документ расчета эффективности уже существует! Измените период расчета!'"),
				Объект.ПериодРасчета);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПересчитатьСуммуРаспределеннойПремии(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РаспределитьСуммуПремииМеждуСотрудникамиПодразделения();
	ВнутреннееСохранение = Истина;
	Записать(ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьЗначенияНачисленийВТабличныеЧасти(ТекущийОбъект);
	ЗаполнитьЗначенияОценокСтандартовВТабличныеЧасти(ТекущийОбъект);
	
	Если Не ДоступнаСтраницаРаспределенияПремии Тогда
		ТекущийОбъект.РаспределениеПремииПодразделения.Очистить();
		ТекущийОбъект.ПоказательРасчетнойБазы = Неопределено;
		ТекущийОбъект.СуммаКРаспределению = 0;
	КонецЕсли;
	
	Объект.НачалоПериода = НачалоМесяца(Объект.ПериодРасчета);
	Объект.КонецПериода = КонецМесяца(Объект.ПериодРасчета);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьКарточкуРассчетаЭффективности();
	ЗаполнитьРасчетЭффективностиТаблицыРаспределенияПремииПодразделения();
	НастроитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ИспользуетсяБезокладнаяСистемаПоказателей Тогда
		Оповестить("Запись_РасчетЭффективностиСотрудника", Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.НачалоПериода > Объект.КонецПериода Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Начало периода больше конца периода'"),
			,
			,
			,
			Отказ);
	КонецЕсли;
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			Если СтрокаПоказатель.ОбязательноеЗаполнениеКомментария
				И ЗначениеЗаполнено(СтрокаПоказатель.Факт)
				И Не ЗначениеЗаполнено(СтрокаПоказатель.Комментарий)
				И Не ВнутреннееСохранение Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке показателя ""%1"" не заполнено поле ""Комментарий""'"),
					СтрокаПоказатель.Показатель.Наименование);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ВнутреннееСохранение = Ложь;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодРасчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ВДанномПериодеРасчетВыполнен = ПроверкаНаличияДокументаРасчетаЭффективности();
	Иначе ВДанномПериодеРасчетВыполнен = Ложь;	 
	КонецЕсли;
	
	Если Не ВДанномПериодеРасчетВыполнен Тогда
		Объект.ПериодРасчета = НачалоДня(КонецМесяца(Объект.ПериодРасчета));
		Объект.НачалоПериода = НачалоМесяца(Объект.ПериодРасчета);
		Объект.КонецПериода = КонецМесяца(Объект.ПериодРасчета);
	Иначе 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На ""%1"" документ расчета эффективности уже существует! Измените период расчета!'"),
				Объект.ПериодРасчета);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Объект.ПериодРасчета = ТекущаяДата();
		Объект.ПериодРасчета = НачалоДня(КонецМесяца(Объект.ПериодРасчета));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаКарточкаРасчетаЭффективности
		И (Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность) Тогда
		
		ОчиститьСообщения();
		ВнутреннееСохранение = Истина;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	ИначеЕсли Не ТекущаяСтраница = Элементы.СтраницаКарточкаРасчетаЭффективности И Модифицированность Тогда
		ВнутреннееСохранение = Истина;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		ПриЧтенииСозданииНаСервере();		
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницаНачисления Тогда
		СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВнутреннееСохранение = Истина;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	УстановитьДоступностьКомандыОтменитьИсправления(Элементы.ДеревоНачисленийОтменитьИсправления,
		ДеревоНачислений,
		Объект.ПланУтвержден,
		ЭтоРасчетТекущегоПользователя,
		ЭтоПолноправныйПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииСервер();
	УстановитьДоступностьКомандыОтменитьИсправления(Элементы.ДеревоНачисленийОтменитьИсправления,
		ДеревоНачислений,
		Объект.ПланУтвержден,
		ЭтоРасчетТекущегоПользователя,
		ЭтоПолноправныйПользователь);
		
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	СотрудникПриИзмененииСервер();
	УстановитьДоступностьКомандыОтменитьИсправления(Элементы.ДеревоНачисленийОтменитьИсправления,
		ДеревоНачислений,
		Объект.ПланУтвержден,
		ЭтоРасчетТекущегоПользователя,
		ЭтоПолноправныйПользователь);
		
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииСервер();
	УстановитьДоступностьКомандыОтменитьИсправления(Элементы.ДеревоНачисленийОтменитьИсправления,
		ДеревоНачислений,
		Объект.ПланУтвержден,
		ЭтоРасчетТекущегоПользователя,
		ЭтоПолноправныйПользователь);
		
	СотрудникЗаполнено = ЗначениеЗаполнено(Объект.Сотрудник);
		
	Если СотрудникЗаполнено Тогда
		Элементы.ГруппаСтраницы.Доступность = Истина;
		Элементы.ГруппаСтраницы.Видимость = Истина;
	Иначе
		Элементы.ГруппаСтраницы.Доступность = Ложь;
		Элементы.ГруппаСтраницы.Видимость = Ложь;
		Объект.Организация = Неопределено;
		Объект.Подразделение = Неопределено;
	КонецЕсли;
	
	Если СотрудникЗаполнено Тогда
		ВДанномПериодеРасчетВыполнен = ПроверкаНаличияДокументаРасчетаЭффективности();
	Иначе ВДанномПериодеРасчетВыполнен = Ложь;	 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПериодРасчета) Тогда
		Если Не ВДанномПериодеРасчетВыполнен Тогда 
			Объект.НачалоПериода = НачалоМесяца(Объект.ПериодРасчета);
			Объект.КонецПериода = КонецМесяца(Объект.ПериодРасчета);
		Иначе 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'На ""%1"" документ расчета эффективности уже существует! Измените период расчета!'"),
					Объект.ПериодРасчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Объект.ПериодРасчета = ТекущаяДата();
		КонецЕсли;      
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);

КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОграничитьДоступКСотрудникамДляРасчетаЭффективности", Истина);
	Отбор.Вставить("СотрудникуПрисвоенаМодель", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Сотрудник);
	
	УБ_КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элемент,
		Объект.Организация,
		Объект.Подразделение,
		Объект.НачалоПериода,
		Объект.КонецПериода,
		Ложь,
		,
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СотрудникАвтоПодборНаСервере(ПараметрыПолученияДанных, Объект.НачалоПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательРасчетнойБазыПриИзменении(Элемент)
	
	ПоказательНайден = Ложь;
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		Если ПоказательНайден Тогда
			Прервать;
		КонецЕсли;
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			Если СтрокаПоказатель.Показатель = Объект.ПоказательРасчетнойБазы Тогда
				ПоказательНайден = Истина;
				Объект.СуммаКРаспределению = СтрокаПоказатель.Сумма;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ПоказательНайден Тогда
		Объект.СуммаКРаспределению = 0;
	КонецЕсли;
	
	Элементы.СуммаКРаспределению.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ПоказательРасчетнойБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНачислений

&НаКлиенте
Процедура ДеревоНачисленийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьДоступностьКомандыОтменитьИсправления(Элементы.ДеревоНачисленийОтменитьИсправления,
		ДеревоНачислений,
		Объект.ПланУтвержден,
		ЭтоРасчетТекущегоПользователя,
		ЭтоПолноправныйПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийПослеУдаления(Элемент)
	
	ПересчитатьИтоговыеПоказателиНачислений();
	ПересчитатьСлужебныеРеквизитыПорядкаСтрокДереваНачислений();
	ЗаполнитьСписокВыбораПоказателейРасчетнойБазы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийРасценкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТаблицаПроверкиЗацикливаться.Очистить();
	
	ПересчитатьЗначенияПоказателя(ТекущиеДанные.ПолучитьИдентификатор());
	ПересчитатьИтоговыеЗначенияПоказателей(ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор());
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);
	
	УстановитьОптимальнуюШиринуКолонки("Расценка", ТекущиеДанные.Расценка);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийВесПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПроверкиЗацикливаться.Очистить();
	
	ПересчитатьЗначенияПоказателя(ТекущиеДанные.ПолучитьИдентификатор());
	ПересчитатьИтоговыеЗначенияПоказателей(ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор());
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);
	
	УстановитьОптимальнуюШиринуКолонки("Вес", ТекущиеДанные.Вес);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийКритическоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьЗначенияПоказателя(ТекущиеДанные.ПолучитьИдентификатор());
	ПересчитатьИтоговыеЗначенияПоказателей(ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор());
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Начисления Цикл
		Если СтрокаТЧ.ПоказательЭффективности = ТекущиеДанные.Показатель Тогда
			НомерСтрокиТЧ = ТекущиеДанные.ПорядокСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПроверкиЗацикливаться.Очистить();
	
	ПересчитатьЗначенияПоказателя(ТекущиеДанные.ПолучитьИдентификатор());
	ПересчитатьИтоговыеЗначенияПоказателей(ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор());
	
	//СкорректироватьУказательЭффективности(ТекущиеДанные.Показатель, ТекущиеДанные.ТипПоказателя, ТекущиеДанные.ИндексКартинкиГраницЭффективности, ТекущиеДанные.ИндикаторГраницЭффективности, НомерСтрокиТЧ);
	УстановкаИндикаторовЭффективности();
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);
	
	УстановитьОптимальнуюШиринуКолонки("План", ТекущиеДанные.План);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Начисления Цикл
		Если СтрокаТЧ.ПоказательЭффективности = ТекущиеДанные.Показатель Тогда
			НомерСтрокиТЧ = ТекущиеДанные.ПорядокСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПроверкиЗацикливаться.Очистить();
	
	ПересчитатьЗначенияПоказателя(ТекущиеДанные.ПолучитьИдентификатор());
	ПересчитатьИтоговыеЗначенияПоказателей(ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор());
	
	//СкорректироватьУказательЭффективности(ТекущиеДанные.Показатель, ТекущиеДанные.ТипПоказателя, ТекущиеДанные.ИндексКартинкиГраницЭффективности, ТекущиеДанные.ИндикаторГраницЭффективности, НомерСтрокиТЧ);
	УстановкаИндикаторовЭффективности();
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);
	
	УстановитьОптимальнуюШиринуКолонки("Факт", ТекущиеДанные.Факт);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоНачисленийКомментарийПослеВводаСтроки", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВводСтроки(ОписаниеОповещения, ТекущиеДанные.Комментарий, НСтр("ru = 'Комментарий'"),, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийКомментарийПослеВводаСтроки(ВведенноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВведенноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоказателя = ДеревоНачислений.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если СтрокаПоказателя <> Неопределено Тогда
		СтрокаПоказателя.Комментарий = ВведенноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтсутствия

&НаКлиенте
Процедура ОтсутствияДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отсутствия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КалендарныеГрафики") Тогда
		ТекущиеДанные.КоличествоЧасов = РассчитатьКоличествоЧасовОтсутствия(ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаОкончания);
	Иначе
		КоличествоДнейОтсутствия = (ТекущиеДанные.ДатаОкончания - ТекущиеДанные.ДатаНачала) / (60 * 60 * 24) + 1;
		ТекущиеДанные.КоличествоЧасов = КоличествоДнейОтсутствия * 8;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсутствияДатаОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отсутствия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КалендарныеГрафики") Тогда
		ТекущиеДанные.КоличествоЧасов = РассчитатьКоличествоЧасовОтсутствия(ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаОкончания);
	Иначе
		КоличествоДнейОтсутствия = (ТекущиеДанные.ДатаОкончания - ТекущиеДанные.ДатаНачала) / (60 * 60 * 24) + 1;
		ТекущиеДанные.КоличествоЧасов = КоличествоДнейОтсутствия * 8;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьКоличествоЧасовОтсутствия(Знач ДатаНачала, Знач ДатаОкончания)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КалендарныеГрафики")
		Или Не ЗначениеЗаполнено(ДатаНачала)
		Или Не ЗначениеЗаполнено(ДатаОкончания)
		Или ДатаОкончания < ДатаНачала Тогда
		Возврат 0;
	КонецЕсли;
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("КалендарныеГрафики");
	ПроизводственныйКалендарь = Модуль.ОсновнойПроизводственныйКалендарь();
	Если Не ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		Возврат 0;
	КонецЕсли;
	
	ГодДанныхПроизводственногоКалендаря = Год(ДатаНачала);
	ДанныеПроизводственногоКалендаря = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(
		ПроизводственныйКалендарь,
		ГодДанныхПроизводственногоКалендаря);
	
	КоличествоЧасовОтсутствия = 0;
	Пока ДатаНачала <= ДатаОкончания Цикл
		
		Если ГодДанныхПроизводственногоКалендаря <> Год(ДатаНачала) Тогда
			ГодДанныхПроизводственногоКалендаря = Год(ДатаНачала);
			ДанныеПроизводственногоКалендаря = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(
				ПроизводственныйКалендарь,
				ГодДанныхПроизводственногоКалендаря);
		КонецЕсли;
		
		ДанныеПроизводственногоКалендаряЗаДень = ДанныеПроизводственногоКалендаря.Найти(НачалоДня(ДатаНачала), "Дата");
		Если ДанныеПроизводственногоКалендаряЗаДень = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВидДня = ДанныеПроизводственногоКалендаряЗаДень.ВидДня;
		КоличествоЧасовОтсутствия = КоличествоЧасовОтсутствия + КоличествоРабочихЧасовВДень(ВидДня);
		
		ДатаНачала = КонецДня(ДатаНачала) + 1;
		
	КонецЦикла;
	
	Возврат КоличествоЧасовОтсутствия;
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоРабочихЧасовВДень(ВидДня)
	
	Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
		Возврат 8;
	ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
		Возврат 7;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеПремииПодразделения

&НаКлиенте
Процедура РаспределениеПремииПодразделенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "РаспределениеПремииПодразделенияРасчетЭффективностиСотрудника" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.РаспределениеПремииПодразделения.ТекущиеДанные;
		ПоказатьЗначение(,ТекущиеДанные.РасчетЭффективностиСотрудника);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПремииПодразделенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.Сотрудник = ЗначениеРеквизитаПоУмолчанию("Сотрудник");
	КонецЕсли;
	
	Если Копирование Тогда
		ТекущиеДанные.КоэффициентРаспределения = 0;
		ТекущиеДанные.Сумма = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПремииПодразделенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаспределениеПремииПодразделенияОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПремииПодразделенияСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаспределениеПремииПодразделения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		ТекущиеДанные.КоэффициентРаспределения = 0;
		ТекущиеДанные.Сумма = 0;
		Возврат;
	КонецЕсли;
	
	РаспределениеПремииПодразделенияСотрудникПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПремииПодразделенияСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	ТекущиеДанные = Элементы.РаспределениеПремииПодразделения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
	УБ_КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элемент,
		Объект.Организация,
		Объект.Подразделение,
		Объект.НачалоПериода,
		Объект.КонецПериода,
		Ложь,
		,
		ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
	
	Если Объект.ПланУтвержден Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'План утвержден. Редактирование документа запрещено'"));
		Возврат;
	КонецЕсли;
	
	СохранятьИсправления = Ложь;
	
	Если Объект.Начисления.Количество()
		Или Объект.СтандартыОценкиРуководителя.Количество()
		Или Объект.СтандартыОценкиСотрудника.Количество() Тогда
		
		ТекстВопроса = НСтр("ru = 'Таблицы документа будут очищены. Продолжить?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьНачисленияПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьНачисленияЗавершение();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументСохранивДанные(Команда)
	
	Если Объект.ПланУтвержден Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'План утвержден. Редактирование документа запрещено'"));
		Возврат;
	КонецЕсли;
	
	СохранятьИсправления = Истина;
	ЗаполнитьНачисленияЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказательЭффективности(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Перед добавлением показателя необходимо добавить тип показателя'"));
		Возврат;
	КонецЕсли;
	
	ГруппировкаРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ГруппировкаРодитель = Неопределено Тогда
		ГруппировкаТипПоказателя = ТекущиеДанные;
	Иначе
		ГруппировкаТипПоказателя = ГруппировкаРодитель;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ГруппировкаТипПоказателя", ГруппировкаТипПоказателя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПоказательЭффективностиОбработкаВыбора", ЭтотОбъект, ДополнительныеПараметры);
	
	Отбор = Новый Структура("ТипПоказателя", ГруппировкаТипПоказателя.Показатель);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИспользоватьОтборДляВыбранныхТипов",Истина);
	СтруктураОтбора.Вставить("СписокТипов",СписокТипов());
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДополнительныеПараметры", СтруктураОтбора);
	
	//ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.УБ_ПоказателиЭффективности.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТипПоказателя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьТипПоказателяОбработкаВыбора", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("Справочник.УБ_ТипыПоказателей.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланУтвержден(Команда)
	
	Если Объект.ФактУтвержден Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Факт утвержден. Редактирование документа запрещено'"));
		Возврат;
	КонецЕсли;
	
	УстановитьОформлениеКнопокПланФакт();
	
	Объект.ПланУтвержден = Не Объект.ПланУтвержден;
	
	УстановитьОформлениеКнопокПланФакт();
	
	ПланФактУтвержденНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеКнопокПланФакт()
	Цвета = УБ_ПользовательскийИнтерфейсСервер.ПолучитьЦветаСтиля("РЭ");
	
	//Сброс параметров до по умолчанию
	Кнопки = Новый Структура("План,Факт", Элементы.ПланУтвержден, Элементы.ФактУтвержден);
	Для каждого Кнопка Из Кнопки Цикл
		Кнопка.Значение.Пометка = Ложь;
		Кнопка.Значение.ЦветТекста = Цвета.Текст;
		Кнопка.Значение.ЦветФона = Цвета.НеВыбрано;
	КонецЦикла;
	
	//Установка параметров
	Элементы.ПланУтвержден.Пометка = Объект.ПланУтвержден;
	Элементы.ФактУтвержден.Пометка = Объект.ФактУтвержден;
	
	Если Объект.ФактУтвержден Тогда
		Элементы.ФактУтвержден.ЦветТекста = Цвета.Фон;
		Элементы.ФактУтвержден.ЦветФона = Цвета.Заполнен;
		
		Элементы.ПланУтвержден.ЦветФона = Цвета.Фон;
		Элементы.ПланУтвержден.ЦветТекста = Цвета.Заполнен;
	ИначеЕсли Объект.ПланУтвержден Тогда
		Элементы.ПланУтвержден.ЦветТекста = Цвета.Текст;
		Элементы.ПланУтвержден.ЦветФона = Цвета.ПланУтвержден;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФактУтвержден(Команда)
	
	Если Не Объект.ПланУтвержден Тогда
		Объект.ПланУтвержден = Истина;
		Элементы.ПланУтвержден.Пометка = Истина;
	КонецЕсли;
	
	Объект.ФактУтвержден = Не Объект.ФактУтвержден;
	
	Элементы.ФактУтвержден.Пометка = Объект.ФактУтвержден;
	
	УстановитьОформлениеКнопокПланФакт();
	
	ПланФактУтвержденНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправления(Команда)
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			
			БылиИсправления = Ложь;
			
			Если ЗначениеЗаполнено(СтрокаПоказатель.УтвержденноеЗначениеРасценка) Тогда
				СтрокаПоказатель.Расценка = СтрокаПоказатель.УтвержденноеЗначениеРасценка;
				БылиИсправления = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаПоказатель.УтвержденноеЗначениеВес) Тогда
				СтрокаПоказатель.Вес = СтрокаПоказатель.УтвержденноеЗначениеВес;
				БылиИсправления = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаПоказатель.УтвержденноеЗначениеПлан) Тогда
				СтрокаПоказатель.План = СтрокаПоказатель.УтвержденноеЗначениеПлан;
				БылиИсправления = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаПоказатель.УтвержденноеКритическоеЗначение) Тогда
				СтрокаПоказатель.КритическоеЗначение = СтрокаПоказатель.УтвержденноеКритическоеЗначение;
				БылиИсправления = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаПоказатель.РассчитанноеЗначениеФакта) Тогда
				СтрокаПоказатель.Факт = СтрокаПоказатель.РассчитанноеЗначениеФакта;
				БылиИсправления = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПоказатель.РассчитанноеЗначениеПлана) Тогда
				СтрокаПоказатель.Факт = СтрокаПоказатель.РассчитанноеЗначениеПлана;
				БылиИсправления = Истина;
			КонецЕсли;
			
			Если БылиИсправления Тогда
				ПересчитатьЗначенияПоказателя(СтрокаПоказатель.ПолучитьИдентификатор());
				ПересчитатьИтоговыеЗначенияПоказателей(СтрокаПоказатель.ПолучитьРодителя().ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ДеревоНачисленийОтменитьИсправления.Доступность = Ложь; 
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФакт(Команда)
	
	Если Объект.ФактУтвержден Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Факт утвержден. Редактирование документа запрещено'"));
		Возврат;
	КонецЕсли;
	
	Если ЕстьИсправленияРассчитанногоФакта() Тогда
		ТекстСообщения = НСтр("ru = 'Сохранить исправления рассчитанного факта?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьФактПослеЗакрытияВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЗаполнитьФактНаСервере();
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлан(Команда)
	
	Если Объект.ПланУтвержден Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'План утвержден. Редактирование данных плана запрещено'"));
		Возврат;
	КонецЕсли;
	
	Если ЕстьИсправленияРассчитанногоПлана() Тогда
		ТекстСообщения = НСтр("ru = 'Сохранить исправления рассчитанного плана?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПланПослеЗакрытияВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЗаполнитьПланНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеКолонки(Команда)
	
	ПоказыватьВсеКолонки = Не ПоказыватьВсеКолонки;
	Элементы.ДеревоНачисленийПоказатьВсеКолонки.Пометка = Не Элементы.ДеревоНачисленийПоказатьВсеКолонки.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ДиалогВыбораПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = Новый СтандартныйПериод(Объект.НачалоПериода, Объект.КонецПериода);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ДиалогВыбораПериода.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НачалоПериода = Период.ДатаНачала;
	Объект.КонецПериода = Период.ДатаОкончания;
	
	СотрудникПриИзмененииСервер();
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСотрудниковДляРаспределенияПремии(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Организация не заполнена",, "Организация", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Подразделение не заполнено",, "Подразделение", "Объект");
		Возврат;
	КонецЕсли;
	
	УБ_КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.РаспределениеПремииПодразделения,
		Объект.Организация,
		Объект.Подразделение,
		Объект.НачалоПериода,
		Объект.КонецПериода,
		Истина,
		АдресСпискаПодобранныхСотрудников(Объект.РаспределениеПремииПодразделения));
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПремииСотрудниковПодразделения(Команда)
	
	//ШОО++
	ДополнитьСвободнымиПозициямиМодели();
	//ШОО--
	ОбновитьКоэффициентыРаспределенияСотрудников();
	РаспределитьСуммуПремииМеждуСотрудникамиПодразделения();
	
КонецПроцедуры

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
    РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере 
Функция ПроверкаНаличияДокументаРасчетаЭффективности()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК ДокументСозданРанее
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников КАК УБ_РасчетЭффективностиСотрудников
		|ГДЕ
		|	УБ_РасчетЭффективностиСотрудников.ПериодРасчета = &ПериодРасчета
		|	И УБ_РасчетЭффективностиСотрудников.Сотрудник = &Сотрудник
		|	И УБ_РасчетЭффективностиСотрудников.МодельПланированияЭффективности = &МодельПланирования
		|	И УБ_РасчетЭффективностиСотрудников.Подразделение = &Подразделение
		|	И УБ_РасчетЭффективностиСотрудников.Грейд = &Грейд
		|	И УБ_РасчетЭффективностиСотрудников.Ссылка <> &Документ";
	
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(КонецМесяца(Объект.ПериодРасчета)));
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("Грейд", Объект.Грейд);
	Запрос.УстановитьПараметр("МодельПланирования", Объект.МодельПланированияЭффективности);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	//Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ДокументСозданРанее;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеИндикаторов(ПодчиненныеОформлениюЭлементы = null, Индикатор, Цвет)
	ПодчиненныеОформлениюЭлементы.Вставить("Индикатор", "ДеревоНачислений.ИндикаторГраницЭффективности");
	
	Для каждого Элемент Из ПодчиненныеОформлениюЭлементы Цикл
		ОформляемыйЭлемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ОформляемыйЭлемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(Элемент.Значение,".",""));
		
		ОтборЭлемента = ОформляемыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ИндикаторГраницЭффективности");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Индикатор;
		
		ОформляемыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Цвет);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//Оформление цвета индикатора
	ПодчиненныеОформлениюЭлементы = Новый Структура();
	ПодчиненныеОформлениюЭлементы.Вставить("ПроцентВыполнения","ДеревоНачислений.ПроцентВыполнения"); 
	
	//Зеленый
		УстановитьУсловноеОформлениеИндикаторов(ПодчиненныеОформлениюЭлементы, "▲", Новый Цвет(0, 128, 0));
		
	//Красный
		УстановитьУсловноеОформлениеИндикаторов(ПодчиненныеОформлениюЭлементы, "▼", Новый Цвет(128, 0, 0));
		
	//Желтый
		УстановитьУсловноеОформлениеИндикаторов(ПодчиненныеОформлениюЭлементы, "▬", Новый Цвет(255, 204, 0));
	
	//Видимость групп ГруппаРуководитель и ГруппаЗамРуководителя
	ОформляемыйЭлемент = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ОформляемыйЭлемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГруппаРуководитель);
	
	ОтборЭлемента = ОформляемыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Руководитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	ОформляемыйЭлемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачислений.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ПорядокСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 255, 255));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачислений.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ПорядокСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(250, 250, 250));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачислений.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ИзмененноеЗначениеРеквизитаФон);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийКритическоеЗначение.Имя);
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийМинимальноеЗначениеРезультата.Имя);
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийМаксимальноеЗначениеРезультата.Имя);
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УровеньГруппировки");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = 1;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2; ЧН=0,00");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийМинимальноеЗначениеРезультата.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ОграничиватьМинимальноеЗначениеРезультата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не ограничено>'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийМаксимальноеЗначениеРезультата.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ОграничиватьМаксимальноеЗначениеРезультата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не ограничено>'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийКомментарий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.Комментарий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДеревоНачислений.ПодсказкаПоЗаполнениюКомментария"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНевыбраннойКартинки);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийКомментарий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.Комментарий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ОбязательноеЗаполнениеКомментария");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.Факт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийРасценка.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	//ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ИспользоватьШкалуПоказателей");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.Матричный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина; 
	
	ГруппаОтбораИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПолноправныйПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРасчетТекущегоПользователя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланУтвержден");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийВес.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.Матричный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ГруппаОтбораИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПолноправныйПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРасчетТекущегоПользователя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланУтвержден");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ТипРасчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ТипыРасчета.Обратный;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2; ЧН=0,00");
	//Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧН=0");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийПлан.Имя);
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланУтвержден");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ГруппаОтбораИ = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПолноправныйПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ВариантРасчетаЗначенияПлана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.Вручную;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРасчетТекущегоПользователя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ВариантРасчетаЗначенияПлана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.Вручную;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ПорядокСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240, 255, 240));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ВариантРасчетаЗначенияПлана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.Вручную;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ПорядокСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(235, 250, 235));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийФакт.Имя);
	
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ТипРасчета");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ТипыРасчета.Обратный;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2; ЧН=0,00");
	//Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧН=0");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийФакт.Имя);
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФактУтвержден");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ГруппаОтбораИ = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПолноправныйПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ВариантРасчетаЗначенияФакта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.Вручную;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРасчетТекущегоПользователя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийФакт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ВариантРасчетаЗначенияФакта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.Вручную;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ПорядокСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240, 255, 240));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийФакт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ВариантРасчетаЗначенияФакта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.Вручную;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ПорядокСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(235, 250, 235));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийРасценка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.Расценка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УтвержденноеЗначениеРасценка");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийВес.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.Вес");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УтвержденноеЗначениеВес");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УтвержденноеЗначениеПлан");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.План");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УтвержденноеЗначениеПлан");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийКритическоеЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.КритическоеЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.УтвержденноеКритическоеЗначение");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийФакт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ВариантРасчетаЗначенияФакта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.Факт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.РассчитанноеЗначениеФакта");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийКритическоеЗначение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийГруппаГраницы.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийМинимальноеЗначениеРезультата.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийМаксимальноеЗначениеРезультата.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоказыватьВсеКолонки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийКритическоеЗначение.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбораИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПолноправныйПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРасчетТекущегоПользователя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланУтвержден");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.НеВыводитьИтоговыеЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийВес.Имя);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийПроцентПремии.Имя);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНачисленийСумма.Имя);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	///ШОО++
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеПремииПодразделенияСотрудник.Имя);
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РаспределениеПремииПодразделения.Сотрудник");
	ОтборЭлемента.ВидСравнения =  ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = УБ_ОбщегоНазначенияПовтИсп.МассивПустыхСсылокОпределяемогоТипа("УБ_Сотрудники");
	
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеПремииПодразделенияСотрудник.Имя);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Позиция вакантна>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт (,,,Истина));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	//ТАА++ //Блокировка полей с формулами
	//ФормулыПоказателейДляЯчеекДерево = РеквизитФормыВЗначение("ФормулыПоказателейДляЯчеек");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ТипРасчета");
	ОтборЭлемента.ВидСравнения =  ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ТипыРасчета.Обратный;
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоНачисленийПлан");
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2;ЧН=");
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.ТипРасчета");
	//ОтборЭлемента.ВидСравнения =  ВидСравненияКомпоновкиДанных.НеРавно;
	//ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_ТипыРасчета.Обратный;
	//ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоНачисленийПлан");
	//Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2;ЧН=0");
	//Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2;ЧН=0");
	
	Для Каждого СтрокаПоказатель Из СписокПоказателей Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Показатель",СтрокаПоказатель.Значение);
		Найденные = ФормулыПоказателейДляЯчеек.НайтиСтроки(Отбор);
		Если Найденные.Количество() > 0 Тогда
			Элемент = УсловноеОформление.Элементы.Добавить();
						
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНачислений.Показатель");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = СтрокаПоказатель.Значение;
			
			Для каждого СтрокаЯчейка Из Найденные Цикл 
			
				ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоНачислений"+СтрокаЯчейка.Ячейка);
					
			КонецЦикла;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);	
		КонецЕсли;
	КонецЦикла;
	
	
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Элементы.ГруппаСтраницы.Доступность = Ложь;
		Элементы.ГруппаСтраницы.Видимость = Ложь;
	КонецЕсли;
	
	Если Не Пользователи.ТекущийПользователь().ФизическоеЛицо = Объект.Сотрудник.ФизическоеЛицо Тогда		
		Элементы.СтраницаКарточкаРасчетаЭффективности.Видимость = Не РольДоступна("УБ_ДолжностьHR");          	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОптимальнуюШиринуКолонки(ИмяКолонки, Значение = 0, Авто = ИСТИНА, ФиксированноеЗначение = Неопределено)
	//МШК - максимальная ширина колонки
	//_______________________________________________________________________________________________
	//Описание алгоритма:
	//	* Обходим рекурсивно дерево, ищем самое длинное значение, записывая его в реквизит
	//	* Ставим максимальную длину в ширину столбца
	//	* Done
	//
	//	PS^ Авто - Истина - обход всего дерева (столец как увеличится так и уменьшится) 
	//
	//	  	Авто -  Ложь  - отталкиваемся от текущего значения и реквизита (не работает на уменьшение)
	//		(требуется Значение)
	//  
	//	Фиксированное значение - устновить колонке фиксированную ширину;
	//_______________________________________________________________________________________________
	
	МШКРеквизит = "МаксимальнаяШиринаКолонки"+ИмяКолонки;
	
	Если ФиксированноеЗначение <> Неопределено Тогда
		
		Авто = Ложь;
		Элементы["ДеревоНачислений"+ИмяКолонки].Ширина = ФиксированноеЗначение;
		возврат;
		
	КонецЕсли;
	
	Если Авто Тогда
		Ширина = ПолучитьОптимальнуюШиринуКолонкиАвто(ИмяКолонки);
		ЭтаФорма[МШКРеквизит] = Ширина;
		Элементы["ДеревоНачислений"+ИмяКолонки].Ширина = Ширина;
		возврат;
	КонецЕсли;
	
	Длина = СтрДлина(Значение);
	Если Длина > ЭтаФорма[МШКРеквизит] Тогда
		ЭтаФорма[МШКРеквизит] = Длина;
	КонецЕсли;
	
	Элементы["ДеревоНачислений"+ИмяКолонки].Ширина = ЭтаФорма[МШКРеквизит];	
КонецПроцедуры

&НаСервере
Функция ПолучитьОптимальнуюШиринуКолонкиАвто(ИмяКолонки)
	//Меньше этого значения ширина не будет. Свойства поля не повлияют!
	ШиринаПоУмолчанию = 7;
	
	ДеревоЗнач = РеквизитФормыВЗначение("ДеревоНачислений");
	МаксимальнаяШирина = ОбходДереваВглубь(ИмяКолонки, ДеревоЗнач);
	
	возврат ?(ШиринаПоУмолчанию > МаксимальнаяШирина, ШиринаПоУмолчанию, МаксимальнаяШирина);
КонецФункции

&НаСервере
Функция ОбходДереваВглубь(ИмяКолонки, ТекущееДерево)
	МаксимальнаяШирина = 0;
	Для каждого СтрТекущегоДерева Из ТекущееДерево.Строки Цикл
		
		КолонкаДлина = СтрДлина(СтрТекущегоДерева[ИмяКолонки]);
		МаксимальнаяШирина = ?(КолонкаДлина > МаксимальнаяШирина, КолонкаДлина, МаксимальнаяШирина);
		
		Если СтрТекущегоДерева.Строки.Количество() > 0 Тогда
			КолонкаДлина = ОбходДереваВглубь(ИмяКолонки,СтрТекущегоДерева);
			МаксимальнаяШирина = ?(КолонкаДлина > МаксимальнаяШирина, КолонкаДлина, МаксимальнаяШирина);	
		КонецЕсли;
		
	КонецЦикла;
	
	возврат МаксимальнаяШирина;
КонецФункции

&НаСервере
Функция ПолучитьРасценкуФиксированногоПоказателя(Показатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Расценка КАК Расценка
	               |ИЗ
	               |	РегистрСведений.УБ_РасценкиПоказателейЭффективности.СрезПоследних(&Период, ) КАК УБ_РасценкиПоказателейЭффективностиСрезПоследних
	               |ГДЕ
	               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Подразделение = &Подразделение
	               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.МодельПланирования = &МодельПланирования
	               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Показатель = &Показатель
	               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Организация = &Организация";
	Запрос.УстановитьПараметр("Период",КонецМесяца(Объект.ПериодРасчета));
	Запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	Запрос.УстановитьПараметр("МодельПланирования",Объект.МодельПланированияЭффективности);
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Расценка;
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Расценка КАК Расценка
		               |ИЗ
		               |	РегистрСведений.УБ_РасценкиПоказателейЭффективности.СрезПоследних(&Период, ) КАК УБ_РасценкиПоказателейЭффективностиСрезПоследних
		               |ГДЕ
		               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Подразделение = &Подразделение
		               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Показатель = &Показатель
		               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Организация = &Организация";
		Запрос.УстановитьПараметр("Период",КонецМесяца(Объект.ПериодРасчета));
		Запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
		//Запрос.УстановитьПараметр("МодельПланирования",Объект.МодельПланированияЭффективности);
		Запрос.УстановитьПараметр("Показатель",Показатель);
		Запрос.УстановитьПараметр("Организация",Объект.Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Расценка;
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Расценка КАК Расценка
			               |ИЗ
			               |	РегистрСведений.УБ_РасценкиПоказателейЭффективности.СрезПоследних(&Период, ) КАК УБ_РасценкиПоказателейЭффективностиСрезПоследних
			               |ГДЕ
			               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.МодельПланирования = &МодельПланирования
			               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Показатель = &Показатель
			               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Организация = &Организация";
			Запрос.УстановитьПараметр("Период",КонецМесяца(Объект.ПериодРасчета));
			//Запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
			Запрос.УстановитьПараметр("МодельПланирования",Объект.МодельПланированияЭффективности);
			Запрос.УстановитьПараметр("Показатель",Показатель);
			Запрос.УстановитьПараметр("Организация",Объект.Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Расценка;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Расценка КАК Расценка
				               |ИЗ
				               |	РегистрСведений.УБ_РасценкиПоказателейЭффективности.СрезПоследних(&Период, ) КАК УБ_РасценкиПоказателейЭффективностиСрезПоследних
				               |ГДЕ
				               |	УБ_РасценкиПоказателейЭффективностиСрезПоследних.Показатель = &Показатель
				               |	И УБ_РасценкиПоказателейЭффективностиСрезПоследних.Организация = &Организация";
				Запрос.УстановитьПараметр("Период",КонецМесяца(Объект.ПериодРасчета));
				//Запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
				//Запрос.УстановитьПараметр("МодельПланирования",Объект.МодельПланированияЭффективности);
				Запрос.УстановитьПараметр("Показатель",Показатель);
				Запрос.УстановитьПараметр("Организация",Объект.Организация);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Возврат Выборка.Расценка;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПериодРасчетаМоделиПланирования()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ВерсииГрейдовСрезПоследних.ПериодРасчетаМоделиПланирования КАК ПериодРасчетаМоделиПланирования
		|ИЗ
		|	РегистрСведений.УБ_ВерсииГрейдов.СрезПоследних(
		|			,
		|			Грейд = &Грейд
		|				И ВерсияГрейда = &ВерсияГрейда) КАК УБ_ВерсииГрейдовСрезПоследних";
	
	
	Запрос.УстановитьПараметр("Грейд", Объект.Грейд); 
	Запрос.УстановитьПараметр("ВерсияГрейда", Объект.ВерсияГрейда);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	
	ПериодРасчетаМоделиПланирования = Выборка.ПериодРасчетаМоделиПланирования;
	
	Возврат ПериодРасчетаМоделиПланирования;
	
КонецФункции

//РАССМОТРЕТЬ
// 0 - белый (пусто)
// 4 - красный (▼)
// 8 - желтый  (▬)
// 9 - зеленый (▲)
// Если символ, то убрать запятую
// Если картинка, проблема с разрешением
//НЕАКТУАЛЬНАЯ ПРОЦЕДУРА
&НаСервере
Процедура СкорректироватьУказательЭффективности(ПоказательЭффективности, ТипПоказателя, ИндексКартинки = 0, Индикатор, НомерСтрокиТЧ)
	
	ДеревоНачисленийТаблица = РеквизитФормыВЗначение("ДеревоНачислений");
	
	Для каждого СтрокаТипа из ДеревоНачисленийТаблица.Строки Цикл
		Если СтрокаТипа.Показатель = ТипПоказателя Тогда
			Для каждого СтрокаПоказателя из СтрокаТипа.Строки Цикл
				Если СтрокаПоказателя.Показатель = ПоказательЭффективности Тогда	
	
					Если ПоказательЭффективности.НегативноеОтклонениеНормыДо <> Неопределено Тогда 
						Если СтрокаПоказателя.ПроцентВыполнения = 0 Тогда
							//Картинки
							//ИндексКартинки = 0;
							ИндикаторГраницЭффективности = "";
							//СтрокаПоказателя.ИндексКартинкиГраницЭффективности = 0;
							СтрокаПоказателя.ИндикаторГраницЭффективности = "";
							
						Иначе
							Если ПоказательЭффективности.НегативноеОтклонениеНормыДо >= СтрокаПоказателя.ПроцентВыполнения Тогда
							
								//ИндексКартинки = 4;
								ИндикаторГраницЭффективности = "▼";
								//СтрокаПоказателя.ИндексКартинкиГраницЭффективности = 4;
								СтрокаПоказателя.ИндикаторГраницЭффективности = "▼";
							
							ИначеЕсли ПоказательЭффективности.ПограничноеОтклонениеНормыОт <= СтрокаПоказателя.ПроцентВыполнения
								И СтрокаПоказателя.ПроцентВыполнения <= ПоказательЭффективности.ПограничноеОтклонениеНормыДо Тогда
								
								//ИндексКартинки = 8; 	
								ИндикаторГраницЭффективности = "▬";
								//СтрокаПоказателя.ИндексКартинкиГраницЭффективности = 8;
								СтрокаПоказателя.ИндикаторГраницЭффективности = "▬";
							
							Иначе		
								//ИндексКартинки = 9;	
								ИндикаторГраницЭффективности = "▲";
								//СтрокаПоказателя.ИндексКартинкиГраницЭффективности = 9;	
								СтрокаПоказателя.ИндикаторГраницЭффективности = "▲";
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ДеревоНачисленийТаблица,"ДеревоНачислений");
	
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	СписокСвязанныхРеквизитов = "Подразделение, Сотрудник";
	УБ_ОбщегоНазначения.УстановитьТипЗначенияСвязанныхРеквизитовПоУмолчанию(Объект, СписокСвязанныхРеквизитов);
	
	ПодразделениеПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.МодельПланированияЭффективности)
		И Объект.МодельПланированияЭффективности.ШтатноеРасписание.Подразделение <> Объект.Подразделение Тогда
		
		Объект.МодельПланированияЭффективности = Справочники.УБ_МоделиПланированияЭффективности.ПустаяСсылка();
		Объект.Грейд = Справочники.УБ_Грейды.ПустаяСсылка();
		Объект.ВерсияГрейда = Справочники.УБ_ВерсииГрейдов.ПустаяСсылка();
		КатегорияВерсияПредставление = Строка(Объект.Грейд) + " " + Строка(Объект.ВерсияГрейда);
		
	КонецЕсли;
	
	СотрудникПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииСервер()
	
	Если Объект.Сотрудник = Неопределено Тогда
		Объект.Сотрудник = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Сотрудник");
	КонецЕсли;
	
	Объект.МодельПланированияЭффективности = Справочники.УБ_МоделиПланированияЭффективности.ПустаяСсылка();
	Объект.Грейд = Справочники.УБ_Грейды.ПустаяСсылка();
	Объект.ВерсияГрейда = Справочники.УБ_ВерсииГрейдов.ПустаяСсылка();
	КатегорияВерсияПредставление = Строка(Объект.Грейд) + " " + Строка(Объект.ВерсияГрейда);
	
	ОчиститьСтраницыДокумента();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЭтоРасчетТекущегоПользователя = (ТекущийПользователь.ФизическоеЛицо = Объект.Сотрудник.ФизическоеЛицо);
	ОткрытРуководителем = ДокументОткрытРуководителем(ТекущийПользователь);
	
	ДатаНачала = ?(ЗначениеЗаполнено(Объект.НачалоПериода), НачалоДня(Объект.НачалоПериода), НачалоДня(ТекущаяДата()));
	
	КадровыеДанные = УБ_КадровыйУчет.КадровыеДанныеСотрудников(Объект.Сотрудник, ДатаНачала);
	Если КадровыеДанные.Количество() Тогда
		ТекущиеКадровыеДанные = КадровыеДанные[0];
		Объект.Организация = ТекущиеКадровыеДанные.Организация;
		Объект.Должность = ТекущиеКадровыеДанные.Должность;
		Объект.Подразделение = ТекущиеКадровыеДанные.Подразделение;
		Объект.МодельПланированияЭффективности = ТекущиеКадровыеДанные.МодельПланированияЭффективности;
		Объект.Грейд = ТекущиеКадровыеДанные.Грейд;
		КатегорияВерсияПредставление = Строка(Объект.Грейд) + " " + Строка(Объект.ВерсияГрейда); 
	КонецЕсли;
	
	ДоступнаСтраницаРаспределенияПремии = ДоступностьСтраницыРаспределенияПремии();
	
	НастроитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СотрудникАвтоПодборНаСервере(ПараметрыПолученияДанных, ДатаУстановкиМодели)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если ПолучитьФункциональнуюОпцию("УБ_УправлениеТорговлей") Тогда
		СписокСотрудников = Справочники.УБ_Сотрудники.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	Иначе
		СписокСотрудников = Справочники.Сотрудники.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(МоделиПланированияСотрудников.Период) КАК Период,
		|	МоделиПланированияСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_ПериодыНазначенияМоделейСотрудникам
		|ИЗ
		|	РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(&Период, Сотрудник В (&Сотрудники)) КАК
		|		МоделиПланированияСотрудников
		|СГРУППИРОВАТЬ ПО
		|	МоделиПланированияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МоделиПланированияСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.УБ_МоделиПланированияСотрудников.СрезПоследних(&Период, Сотрудник В (&Сотрудники)) КАК
		|		МоделиПланированияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыНазначенияМоделейСотрудникам КАК ПериодыНазначенияМоделейСотрудникам
		|		ПО МоделиПланированияСотрудников.Период = ПериодыНазначенияМоделейСотрудникам.Период
		|		И МоделиПланированияСотрудников.Сотрудник = ПериодыНазначенияМоделейСотрудникам.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ШтатноеРасписание КАК РеквизитыШтатноеРасписание
		|		ПО МоделиПланированияСотрудников.МодельПланированияЭффективности.ШтатноеРасписание = РеквизитыШтатноеРасписание.Ссылка
		|ГДЕ
		|	НЕ ЕСТЬNULL(РеквизитыШтатноеРасписание.Закрыта, ЛОЖЬ)
		|	ИЛИ &Период < РеквизитыШтатноеРасписание.ДатаЗакрытия";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(ДатаУстановкиМодели), ДатаУстановкиМодели, Неопределено));
	Запрос.УстановитьПараметр("Сотрудники", СписокСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементСотрудник = СписокСотрудников.НайтиПоЗначению(Выборка.Сотрудник);
		Если ЭлементСотрудник <> Неопределено Тогда
			НовыйЭлемент = ДанныеВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементСотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокумента

&НаКлиенте
Процедура ЗаполнитьНачисленияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНачисленияЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачисленияЗавершение()
	
	ДлительнаяОперация = ЗаполнитьНачисленияНаСервере();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииОперацииЗаполненияНачислений", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания); 
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНачисленияНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение документа ""Расчет эффективности сотрудников""'");
	
	Если СохранятьИсправления Тогда
		ЗаполнитьЗначенияНачисленийВТабличныеЧасти(Объект);
		ЗаполнитьЗначенияОценокСтандартовВТабличныеЧасти(Объект);
	Иначе
		Объект.Начисления.Очистить();
		Объект.ИтоговыеНачисления.Очистить();
		Объект.СтандартыОценкиСотрудника.Очистить();
		Объект.СтандартыОценкиРуководителя.Очистить();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Подразделение", Объект.Подразделение);
	СтруктураПараметров.Вставить("Сотрудники", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник));
	СтруктураПараметров.Вставить("МесяцНачисления", Объект.НачалоПериода);

	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.УБ_РасчетЭффективностиСотрудников.ПодготовитьДанныеНачислений",
		СтруктураПараметров,
		ПараметрыВыполнения);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	АдресХранилища = ДлительнаяОперация.АдресРезультата;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииОперацииЗаполненияНачислений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Заполнение документа ""Расчет эффективности сотрудников""'"),
			"Ошибка", Результат.ПодробноеПредставлениеОшибки,, Истина);
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Результат.Вставить("СохранятьИсправления", СохранятьИсправления);
	Результат.Вставить("ТекстОповещения");
	Результат.Вставить("ПояснениеОповещения");
	Результат.Вставить("ЕстьДанныеДляЗаполнения", Ложь);
	
	ПриЗавершенииОперацииЗаполненияНачисленийНаСервере(Результат);
	
	ИдентификаторЗадания = "";
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	ПоказатьОповещениеПользователя(
		Результат.ТекстОповещения,
		,
		Результат.ПояснениеОповещения,
		БиблиотекаКартинок.Информация32);
	
	УстановитьДоступностьКомандыОтменитьИсправления(Элементы.ДеревоНачисленийОтменитьИсправления,
			ДеревоНачислений,
			Объект.ПланУтвержден,
			ЭтоРасчетТекущегоПользователя,
			ЭтоПолноправныйПользователь);
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтотОбъект, "ДеревоНачислений",, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииОперацииЗаполненияНачисленийНаСервере(Результат)
	
	ПараметрыРЭ = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Руководитель = ПараметрыРЭ.Руководитель;
	
	Документы.УБ_РасчетЭффективностиСотрудников.ЗаполнениеПослеВыполненияДлительнойОперации(Объект, Результат);
	
	Начисления = Объект.Начисления.Выгрузить();
	ИтоговыеНачисления = Объект.ИтоговыеНачисления.Выгрузить();
	ЗаполнитьДеревоНачислений(Начисления, ИтоговыеНачисления);
	ЗаполнитьЗависимостьПоказателейВФормулахРасчета();
	ЗаполнитьФактНаСервере(Не СохранятьИсправления);
	Если СохранятьИсправления Тогда
		ПересчитатьИтоговыеПоказателиНачислений();
	КонецЕсли;
	
	ЗаполнитьЗакладкуСтандартов();
	ПересчитатьИтоговуюОценкуПоСтандартам();
	ЗаполнитьЗначениеФактаПоказателяСтандартов();
	ЗаполнитьСписокВыбораПоказателейРасчетнойБазы();
	
	НастроитьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимостьПоказателейВФормулахРасчета(ПоказательЭффективности = Неопределено)
	
	Если ПоказательЭффективности = Неопределено Тогда
		ЗависимостьПоказателейВФормулахРасчета.Очистить();
		МассивЦелевыхПоказателей = Объект.Начисления.Выгрузить().ВыгрузитьКолонку("ПоказательЭффективности");
	Иначе
		МассивЦелевыхПоказателей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПоказательЭффективности);
		
		ПараметрыОтбора = Новый Структура("ЦелевойПоказатель", ПоказательЭффективности);
		НайденныеСтроки = ЗависимостьПоказателейВФормулахРасчета.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗависимостьПоказателейВФормулахРасчета.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ПоказательФормула = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ФормулыПоказателейЭффективности.ПоказательЭффективности КАК ПоказательЭффективности,
		|	ВЫРАЗИТЬ(УБ_ФормулыПоказателейЭффективности.ФормулаРасчета КАК СТРОКА(1000)) КАК ФормулаРасчета,
		|	УБ_ФормулыПоказателейЭффективности.Ячейка КАК Ячейка
		|ИЗ
		|	РегистрСведений.УБ_ФормулыПоказателейЭффективности КАК УБ_ФормулыПоказателейЭффективности
		|ГДЕ
		|	УБ_ФормулыПоказателейЭффективности.Грейд = &Грейд
		|	И УБ_ФормулыПоказателейЭффективности.МодельПланирования = &МодельПланирования
		|	И УБ_ФормулыПоказателейЭффективности.ВерсияГрейда = &ВерсияГрейда";
	
	Запрос.УстановитьПараметр("МодельПланирования", Объект.МодельПланированияЭффективности);
	Запрос.УстановитьПараметр("Грейд", Объект.Грейд);
	Запрос.УстановитьПараметр("ВерсияГрейда", объект.ВерсияГрейда);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	//ФормулыПоказателейДляЯчеекДерево = РеквизитФормыВЗначение("ФормулыПоказателейДляЯчеек");
	ФормулыПоказателейДляЯчеек.Очистить();
	
	Для каждого Строка из Выборка.Строки Цикл
		ПоказательФормула.Вставить(Строка.ПоказательЭффективности, Строка.ФормулаРасчета);
		Если СписокПоказателей.НайтиПоЗначению(Строка.ПоказательЭффективности) = Неопределено ТОгда
			НовыйПоказатель = СписокПоказателей.Добавить(Строка.ПоказательЭффективности);
		КонецЕсли;	
		НоваяСтрока = ФормулыПоказателейДляЯчеек.Добавить();
		//НоваяСтрока.Показатель = Строка.ПоказательЭффективности;
		//НоваяСтрока = НоваяСтрока.Строки.Добавить();
		НоваяСтрока.Показатель = Строка.ПоказательЭффективности;
		НоваяСтрока.Формула = Строка.ФормулаРасчета;
		НоваяСтрока.Ячейка = Строка.Ячейка;
		
		ПараметрыВыполненияФормулы = УБ_РасчетПоказателейЭффективности.ПараметрыВыполненияФормулы(Строка.ФормулаРасчета);
		
		Если ПараметрыВыполненияФормулы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказателиФормулы = ПараметрыВыполненияФормулы.ПоказателиФормулы;
		
		Для Каждого ПоказательРасчета Из ПоказателиФормулы Цикл
			НоваяСтрока = ЗависимостьПоказателейВФормулахРасчета.Добавить();
			НоваяСтрока.ЦелевойПоказатель = Строка.ПоказательЭффективности;
			НоваяСтрока.ПоказательРасчета = ПоказательРасчета;
		КонецЦикла;
		
	КонецЦикла;
	//ЗначениеВРеквизитФормы(ФормулыПоказателейДляЯчеекДерево,"ФормулыПоказателейДляЯчеек");
	
	УстановитьУсловноеОформление();
	
	//Для Каждого ЦелевойПоказатель Из МассивЦелевыхПоказателей Цикл
	//			
	//	//Если Не ЦелевойПоказатель.ИспользоватьФормулу Тогда
	//	//	Продолжить;
	//	//КонецЕсли;
	//	
	//	
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СписокТипов()
	
    СписокТипов = Новый Массив;
	Дерево = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого Тип из Дерево Цикл
		СписокТипов.Добавить(Тип.Показатель);
	КонецЦикла;	
	
	Возврат СписокТипов;
	
КонецФункции	

#КонецОбласти

#Область ДеревоНачислений

&НаСервере
Процедура ЗаполнитьДеревоНачислений(Начисления, ИтоговыеНачисления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИтоговыеНачисления.ТипПоказателя КАК ТипПоказателя,
		|	ТаблицаИтоговыеНачисления.Вес КАК Вес,
		|	ТаблицаИтоговыеНачисления.Эффективность КАК Эффективность,
		|	ТаблицаИтоговыеНачисления.ПроцентПремии КАК ПроцентПремии,
		|	ТаблицаИтоговыеНачисления.Сумма КАК Сумма,
		|	ТаблицаИтоговыеНачисления.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ИтоговыеНачисления
		|ИЗ
		|	&ТаблицаИтоговыеНачисления КАК ТаблицаИтоговыеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.ТипПоказателя КАК ТипПоказателя,
		|	ТаблицаНачисления.ПоказательЭффективности КАК ПоказательЭффективности,
		|	ТаблицаНачисления.Расценка КАК Расценка,
		|	ТаблицаНачисления.Вес КАК Вес,
		|	ТаблицаНачисления.План КАК План,
		|	ТаблицаНачисления.КритическоеЗначение КАК КритическоеЗначение,
		|	ТаблицаНачисления.МинимальноеЗначениеРезультата КАК МинимальноеЗначениеРезультата,
		|	ТаблицаНачисления.МаксимальноеЗначениеРезультата КАК МаксимальноеЗначениеРезультата,
		|	ТаблицаНачисления.Факт КАК Факт,
		|	ТаблицаНачисления.ИндексКартинкиГраницЭффективности КАК ИндексКартинкиГраницЭффективности,
		|	ТаблицаНачисления.ПроцентВыполнения КАК ПроцентВыполнения,
		|	ТаблицаНачисления.Эффективность КАК Эффективность,
		|	ТаблицаНачисления.Сумма КАК Сумма,
		|	ТаблицаНачисления.ШкалаПоказателей КАК ШкалаПоказателей,
		|	ТаблицаНачисления.Комментарий КАК Комментарий,
		|	ТаблицаНачисления.УтвержденноеЗначениеРасценка КАК УтвержденноеЗначениеРасценка,
		|	ТаблицаНачисления.УтвержденноеЗначениеВес КАК УтвержденноеЗначениеВес,
		|	ТаблицаНачисления.УтвержденноеЗначениеПлан КАК УтвержденноеЗначениеПлан,
		|	ТаблицаНачисления.УтвержденноеКритическоеЗначение КАК УтвержденноеКритическоеЗначение,
		|	ТаблицаНачисления.РассчитанноеЗначениеФакта КАК РассчитанноеЗначениеФакта,
		|	ТаблицаНачисления.РассчитанноеЗначениеПлана КАК РассчитанноеЗначениеПлана,
		|	ТаблицаНачисления.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_Начисления
		|ИЗ
		|	&ТаблицаНачисления КАК ТаблицаНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеНачисления.ТипПоказателя КАК ТипПоказателя,
		|	ИтоговыеНачисления.Вес КАК Вес,
		|	ИтоговыеНачисления.Эффективность КАК Эффективность,
		|	ИтоговыеНачисления.ПроцентПремии КАК ПроцентПремии,
		|	ИтоговыеНачисления.Сумма КАК Сумма,
		|	РеквизитыТипыПоказателей.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РеквизитыТипыПоказателей.БазовыйТипПоказателя КАК БазовыйТипПоказателя,
		|	РеквизитыТипыПоказателей.Матричный КАК Матричный,
		|	РеквизитыТипыПоказателей.НеВыводитьИтоговыеЗначения КАК НеВыводитьИтоговыеЗначения,
		|	0 КАК УровеньГруппировки,
		|	ИтоговыеНачисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ_ИтоговыеНачисления КАК ИтоговыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ТипыПоказателей КАК РеквизитыТипыПоказателей
		|		ПО ИтоговыеНачисления.ТипПоказателя = РеквизитыТипыПоказателей.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	ТипПоказателя ТОЛЬКО ИЕРАРХИЯ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ТипПоказателя КАК ТипПоказателя,
		|	Начисления.ПоказательЭффективности КАК ПоказательЭффективности,
		|	Начисления.Расценка КАК Расценка,
		|	Начисления.Вес КАК Вес,
		|	Начисления.План КАК План,
		|	Начисления.КритическоеЗначение КАК КритическоеЗначение,
		|	Начисления.МинимальноеЗначениеРезультата КАК МинимальноеЗначениеРезультата,
		|	Начисления.МаксимальноеЗначениеРезультата КАК МаксимальноеЗначениеРезультата,
		|	Начисления.Факт КАК Факт,
		|	Начисления.ПроцентВыполнения КАК ПроцентВыполнения,
		|	Начисления.Эффективность КАК Эффективность,
		|	Начисления.Сумма КАК Сумма,
		|	Начисления.ШкалаПоказателей КАК ШкалаПоказателей,
		|	Начисления.Комментарий КАК Комментарий,
		|	Начисления.УтвержденноеЗначениеРасценка КАК УтвержденноеЗначениеРасценка,
		|	Начисления.УтвержденноеЗначениеВес КАК УтвержденноеЗначениеВес,
		|	Начисления.УтвержденноеЗначениеПлан КАК УтвержденноеЗначениеПлан,
		|	Начисления.УтвержденноеКритическоеЗначение КАК УтвержденноеКритическоеЗначение,
		|	Начисления.РассчитанноеЗначениеФакта КАК РассчитанноеЗначениеФакта,
		|	Начисления.РассчитанноеЗначениеПлана КАК РассчитанноеЗначениеПлана,
		|	РеквизитыПоказателиЭффективности.ТипРасчета КАК ТипРасчета,
		|	РеквизитыПоказателиЭффективности.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(РеквизитыПоказателиЭффективности.ОбязательноеЗаполнениеКомментария, ЛОЖЬ) КАК ОбязательноеЗаполнениеКомментария,
		|	ЕСТЬNULL(РеквизитыПоказателиЭффективности.ПодсказкаПоЗаполнениюКомментария, """") КАК ПодсказкаПоЗаполнениюКомментария,
		|	ЕСТЬNULL(РеквизитыПоказателиЭффективности.ВариантРасчетаЗначенияПлана, ЗНАЧЕНИЕ(Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.Вручную)) КАК ВариантРасчетаЗначенияПлана,
		|	ЕСТЬNULL(РеквизитыПоказателиЭффективности.ВариантРасчетаЗначенияФакта, ЗНАЧЕНИЕ(Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.Вручную)) КАК ВариантРасчетаЗначенияФакта,
		|	ЕСТЬNULL(РеквизитыПоказателиЭффективности.ОграничиватьМинимальноеЗначениеРезультата, ЛОЖЬ) КАК ОграничиватьМинимальноеЗначениеРезультата,
		|	ЕСТЬNULL(РеквизитыПоказателиЭффективности.ОграничиватьМаксимальноеЗначениеРезультата, ЛОЖЬ) КАК ОграничиватьМаксимальноеЗначениеРезультата,
		|	ЕСТЬNULL(РеквизитыПоказателиЭффективности.ВидРасценки, ЗНАЧЕНИЕ(Перечисление.УБ_ВидыРасценокПоказателей.Сумма)) КАК ВидРасценки,
		|	ЕСТЬNULL(РеквизитыПоказателиЭффективности.РассчитыватьРезультатОтФакта, ЛОЖЬ) КАК РассчитыватьРезультатОтФакта,
		|	1 КАК УровеньГруппировки,
		|	Начисления.ИндексКартинкиГраницЭффективности КАК ИндексКартинкиГраницЭффективности,
		|	Начисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ_Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ПоказателиЭффективности КАК РеквизитыПоказателиЭффективности
		|		ПО Начисления.ПоказательЭффективности = РеквизитыПоказателиЭффективности.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	ТипПоказателя,
		|	ПоказательЭффективности ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ТаблицаИтоговыеНачисления", ИтоговыеНачисления);
	Запрос.УстановитьПараметр("ТаблицаНачисления", Начисления);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоНачислений");
	ДеревоОбъект.Строки.Очистить();
	
	ВыборкаИтоговыеНачисления = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ВыборкаНачисления = РезультатыЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РазвернутьВыборкуИтоговыеНачисления(ВыборкаИтоговыеНачисления, ВыборкаНачисления, ДеревоОбъект);
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоНачислений");
	
	ПересчитатьИтоговыеПоказателиНачислений();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазвернутьВыборкуИтоговыеНачисления(ВыборкаИтоговыеНачисления, ВыборкаНачисления, ДеревоНачислений)
	
	Пока ВыборкаИтоговыеНачисления.Следующий() Цикл
		
		Если ВыборкаИтоговыеНачисления.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ДочерняяВыборка = ВыборкаИтоговыеНачисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,
				ВыборкаИтоговыеНачисления.Группировка());
			РазвернутьВыборкуИтоговыеНачисления(ДочерняяВыборка, ВыборкаНачисления, ДеревоНачислений);
		ИначеЕсли ВыборкаИтоговыеНачисления.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			ДочерняяВыборка = ВыборкаИтоговыеНачисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			РазвернутьВыборкуИтоговыеНачисления(ДочерняяВыборка, ВыборкаНачисления, ДеревоНачислений);
		Иначе
			
			СтрокаТипПоказателя = ДеревоНачислений.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТипПоказателя, ВыборкаИтоговыеНачисления);
			СтрокаТипПоказателя.Показатель = ВыборкаИтоговыеНачисления.ТипПоказателя;
			
			ВыборкаНачисления.Сбросить();
			
			СтруктураПоиска = Новый Структура("ТипПоказателя", ВыборкаИтоговыеНачисления.ТипПоказателя);
			Если Не ВыборкаНачисления.НайтиСледующий(СтруктураПоиска) Тогда
				Продолжить;
			КонецЕсли;
			
			ПорядокСтроки = 0;
			
			ВыборкаПоИерархииНачислений = ВыборкаНачисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			РазвернутьВыборкуНачисления(ВыборкаПоИерархииНачислений, ВыборкаИтоговыеНачисления, СтрокаТипПоказателя, ПорядокСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазвернутьВыборкуНачисления(ВыборкаНачисления, СтрокаИтоговыеНачисления, ДеревоНачислений, ПорядокСтроки)
	
	Пока ВыборкаНачисления.Следующий() Цикл
		
		Если ВыборкаНачисления.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ДочерняяВыборка = ВыборкаНачисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,
				ВыборкаНачисления.Группировка());
			РазвернутьВыборкуНачисления(ДочерняяВыборка, СтрокаИтоговыеНачисления, ДеревоНачислений, ПорядокСтроки);
		ИначеЕсли ВыборкаНачисления.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			ДочерняяВыборка = ВыборкаНачисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			РазвернутьВыборкуНачисления(ДочерняяВыборка, СтрокаИтоговыеНачисления, ДеревоНачислений, ПорядокСтроки);
		Иначе
			
			СтрокаПоказательЭффективности = ДеревоНачислений.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоказательЭффективности, ВыборкаНачисления);
			СтрокаПоказательЭффективности.Показатель = ВыборкаНачисления.ПоказательЭффективности;
			СтрокаПоказательЭффективности.БазовыйТипПоказателя = СтрокаИтоговыеНачисления.БазовыйТипПоказателя;
			СтрокаПоказательЭффективности.Матричный = СтрокаИтоговыеНачисления.Матричный;
			СтрокаПоказательЭффективности.ПорядокСтроки = ПорядокСтроки % 2;
			
			ПорядокСтроки = ПорядокСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыСтрокиДерева(ИдентификаторСтроки)
	
	ТекущиеДанные = ДеревоНачислений.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Матричный = Неопределено;
	БазовыйТипПоказателя = Неопределено;
	
	Если ТекущиеДанные.УровеньГруппировки = 0 Тогда
		
		Матричный = ТекущиеДанные.Показатель.Матричный;
		БазовыйТипПоказателя = ТекущиеДанные.Показатель.БазовыйТипПоказателя;
		
	Иначе
		
		СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если СтрокаРодитель <> Неопределено Тогда
			Матричный = СтрокаРодитель.Показатель.Матричный;
			БазовыйТипПоказателя = СтрокаРодитель.Показатель.БазовыйТипПоказателя;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущиеДанные.Показатель);
	ТекущиеДанные.Матричный = Матричный;
	ТекущиеДанные.БазовыйТипПоказателя = БазовыйТипПоказателя;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказательЭффективностиОбработкаВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Неопределено;
	ПоказательУжеДобавлен = Ложь;
	
	ГруппировкаТипПоказателя = ДополнительныеПараметры.ГруппировкаТипПоказателя;
	СтрокиДерева = ГруппировкаТипПоказателя.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Показатель = РезультатВыбора Тогда
			ПоказательУжеДобавлен = Истина;
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоказательУжеДобавлен Тогда
		Элементы.ДеревоНачислений.ТекущаяСтрока = ИдентификаторСтроки;
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = СтрокиДерева.Добавить();
	НоваяСтрока.Показатель = РезультатВыбора;
	НоваяСтрока.ТипПоказателя = ГруппировкаТипПоказателя.Показатель;
	НоваяСтрока.УровеньГруппировки = 1;
	
	Элементы.ДеревоНачислений.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтотОбъект,
		"ДеревоНачислений",
		ГруппировкаТипПоказателя.ПолучитьИдентификатор(),
		Истина);
	
	ЗаполнитьСлужебныеРеквизитыСтрокиДерева(НоваяСтрока.ПолучитьИдентификатор());
	ЗаполнитьЗависимостьПоказателейВФормулахРасчета(РезультатВыбора);
	ПересчитатьЗначенияПоказателя(НоваяСтрока.ПолучитьИдентификатор());
	
	Если НоваяСтрока.Расценка = 0 Тогда 
		РасценкаФиксированногоПоказателя = ПолучитьРасценкуФиксированногоПоказателя(РезультатВыбора);
		Если РасценкаФиксированногоПоказателя <> 0 Тогда
			НоваяСтрока.Расценка = РасценкаФиксированногоПоказателя;
			НоваяСтрока.УтвержденноеЗначениеРасценка = РасценкаФиксированногоПоказателя;
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьИтоговыеЗначенияПоказателей(НоваяСтрока.ПолучитьРодителя().ПолучитьИдентификатор());
	ПересчитатьСлужебныеРеквизитыПорядкаСтрокДереваНачислений();
	ЗаполнитьСписокВыбораПоказателейРасчетнойБазы();
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоНачислений",,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТипПоказателяОбработкаВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Неопределено;
	ТипПоказателяУжеДобавлен = Ложь;
	
	СтрокиДерева = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Показатель = РезультатВыбора Тогда
			ТипПоказателяУжеДобавлен = Истина;
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипПоказателяУжеДобавлен Тогда
		Элементы.ДеревоНачислений.ТекущаяСтрока = ИдентификаторСтроки;
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = СтрокиДерева.Добавить();
	НоваяСтрока.Показатель = РезультатВыбора;
	НоваяСтрока.ТипПоказателя = РезультатВыбора;
	НоваяСтрока.УровеньГруппировки = 0;
	
	Элементы.ДеревоНачислений.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗаполнитьСлужебныеРеквизитыСтрокиДерева(НоваяСтрока.ПолучитьИдентификатор());
	ПересчитатьСлужебныеРеквизитыПорядкаСтрокДереваНачислений();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЗначенияПоказателя(ИдентификаторСтроки)

	//Результат = УБ_РасчетПоказателейЭффективности.ПересчитатьЗначенияПоказателя(ПараметрыПоказателя);
	//
	//ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	
	//Проверка зацикливания Начало
	
	ТекущиеДанные = ДеревоНачислений.НайтиПоИдентификатору(ИдентификаторСтроки);
	Отбор = Новый Структура("ТипПоказателя, Показатель", ТекущиеДанные.ТипПоказателя, ТекущиеДанные.Показатель);
	НайденныеЗацикливания = ТаблицаПроверкиЗацикливаться.НайтиСтроки(Отбор);
	Если НайденныеЗацикливания.Количество()>5 Тогда
		Возврат;
	Иначе
		НоваяЗаписьЦикла = ТаблицаПроверкиЗацикливаться.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаписьЦикла, Отбор);
	КонецЕсли;
	
	//Проверка зацикливания Конец
	
	//Высчитываются формулы для Плана и Факта
	ЯчейкиРасчета = Новый СписокЗначений;
	ЯчейкиРасчета.Добавить("План");
	ЯчейкиРасчета.Добавить("Факт");
	
	РассчитатьРезультатПоказателяПоФормуле(ИдентификаторСтроки,ЯчейкиРасчета);
	ПересчитатьРезультатЗависимыхПоказателейПоФормуле(ИдентификаторСтроки);	
	
	ТекущиеДанные = ДеревоНачислений.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПараметрыПоказателя = УБ_РасчетПоказателейЭффективности.СтруктураПараметровПоказатея();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПоказателя, ТекущиеДанные);
	ПараметрыПоказателя.ПериодРасчета = Объект.НачалоПериода;
	
	//Расчитываются все показатели
	Результат = УБ_РасчетПоказателейЭффективности.ПересчитатьЗначенияПоказателя(ПараметрыПоказателя);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	//Высчитываются формулы для Суммы и Эффективности
	ЯчейкиРасчета = Новый СписокЗначений;
	ЯчейкиРасчета.Добавить("Сумма");
	ЯчейкиРасчета.Добавить("Эффективность");
	
	РассчитатьРезультатПоказателяПоФормуле(ИдентификаторСтроки,ЯчейкиРасчета);
	ПересчитатьРезультатЗависимыхПоказателейПоФормуле(ИдентификаторСтроки);
	
	ЗаполнитьИндексКартинкиЭффективности(ТекущиеДанные);	
	
	Если ДоступнаСтраницаРаспределенияПремии Тогда
		Если Объект.ПоказательРасчетнойБазы = ТекущиеДанные.Показатель Тогда
			Объект.СуммаКРаспределению = ТекущиеДанные.Сумма;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРезультатЗависимыхПоказателейПоФормуле(ИдентификаторСтроки)
	
	ТекущиеДанные = ДеревоНачислений.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ЦелевыеПоказатели = Новый Массив;
	
	ПараметрыОтбора = Новый Структура("ПоказательРасчета", ТекущиеДанные.Показатель);
	НайденныеСтроки = ЗависимостьПоказателейВФормулахРасчета.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ЦелевыеПоказатели.Найти(НайденнаяСтрока.ЦелевойПоказатель) = Неопределено Тогда
			ЦелевыеПоказатели.Добавить(НайденнаяСтрока.ЦелевойПоказатель);
		КонецЕсли;
	КонецЦикла;
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			Если ЦелевыеПоказатели.Найти(СтрокаПоказатель.Показатель) <> Неопределено Тогда
				ПересчитатьЗначенияПоказателя(СтрокаПоказатель.ПолучитьИдентификатор());
				ПересчитатьИтоговыеЗначенияПоказателей(СтрокаПоказатель.ПолучитьРодителя().ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРезультатПоказателяПоФормуле(ИдентификаторСтроки,ЯчейкиРасчета)
	
	ТекущиеДанные = ДеревоНачислений.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Не ТекущиеДанные.Показатель.ИспользоватьФормулу Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = ИсходныеДанныеПоказателяДляРасчетаПоФормуле(ТекущиеДанные.Показатель);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Показатель",ТекущиеДанные.Показатель);
	//ФормулыПоказателейДляЯчеекДерево = РеквизитФормыВЗначение("ФормулыПоказателейДляЯчеек");
	ФормулыПоказателя = ФормулыПоказателейДляЯчеек.НайтиСтроки(Отбор);
	Если ФормулыПоказателя.Количество() = 0 Тогда 
		УБ_РасчетПоказателейЭффективности.РассчитатьРезультатПоказателяПоФормуле(ТекущиеДанные.Показатель,
			ТекущиеДанные, ИсходныеДанные, Объект.Грейд, Объект.ВерсияГрейда,ЯчейкиРасчета);
	Иначе
		Для каждого Строка Из ФормулыПоказателя Цикл
			УБ_РасчетПоказателейЭффективности.РассчитатьРезультатПоказателяПоФормуле(ТекущиеДанные.Показатель,
				ТекущиеДанные, ИсходныеДанные, Объект.Грейд, Объект.ВерсияГрейда,ЯчейкиРасчета,Строка.Ячейка);
		КонецЦикла;
	КонецЕсли;	
		
	
КонецПроцедуры

&НаСервере
Функция ИсходныеДанныеПоказателяДляРасчетаПоФормуле(ЦелевойПоказатель)
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("ТекущийПоказатель", ЗначенияКолонокРасчетаПоказателя(ЦелевойПоказатель));
	
	ПараметрыОтбора = Новый Структура("ЦелевойПоказатель", ЦелевойПоказатель);
	НайденныеСтроки = ЗависимостьПоказателейВФормулахРасчета.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ИсходныеДанные.Вставить(НайденнаяСтрока.ПоказательРасчета.Идентификатор,
			ЗначенияКолонокРасчетаПоказателя(НайденнаяСтрока.ПоказательРасчета));
	КонецЦикла;
	
	Возврат ИсходныеДанные;
	
КонецФункции

&НаСервере
Функция ЗначенияКолонокРасчетаПоказателя(ПоказательЭффективности)
	
	ЗначенияКолонокПоказателя = Новый Структура(УБ_РасчетПоказателейЭффективности.КолонкиРасчетаЭффективностиДляФормулы());
	
	ПоказательНайден = Ложь;
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		Если ТипЗнч(ПоказательЭффективности) = Тип("СправочникСсылка.УБ_ТипыПоказателей") Тогда
			Если СтрокаТипПоказателя.Показатель <> ПоказательЭффективности Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЗначенияКолонокПоказателя, СтрокаТипПоказателя);
			ПоказательНайден = Истина;	
		Иначе	
			ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
			Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
				Если СтрокаПоказатель.Показатель <> ПоказательЭффективности Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ЗначенияКолонокПоказателя, СтрокаПоказатель);
				ПоказательНайден = Истина;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		Если ПоказательНайден Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначенияКолонокПоказателя;
	
КонецФункции

&НаСервере
Процедура ПересчитатьИтоговыеЗначенияПоказателей(ИдентификаторГруппировки)
	
	ТекущиеДанные = ДеревоНачислений.НайтиПоИдентификатору(ИдентификаторГруппировки);
	
	ПараметрыМатериальнойМотивации = УБ_РасчетПоказателейЭффективности.ПропорцииМатериальнойМотивацииСотрудника(Объект.Сотрудник, Объект.НачалоПериода);
	
	ЯчейкиРасчета = Новый СписокЗначений;
	ЯчейкиРасчета.Добавить("ПроцентПремии");
	
	УБ_РасчетПоказателейЭффективности.ПересчитатьИтоговыеЗначенияПоказателей(ТекущиеДанные, ДеревоНачислений, Объект.МодельПланированияЭффективности, Объект.Грейд, Объект.ВерсияГрейда, Объект.НачалоПериода, Объект.ВариантРасчетаПремии, ПараметрыМатериальнойМотивации,ЯчейкиРасчета);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтоговыеПоказателиНачислений()
	                                                       
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			ПересчитатьЗначенияПоказателя(СтрокаПоказатель.ПолучитьИдентификатор());
		КонецЦикла;
		
		ПересчитатьИтоговыеЗначенияПоказателей(СтрокаТипПоказателя.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСлужебныеРеквизитыПорядкаСтрокДереваНачислений()
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ПорядокСтроки = 0;
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			СтрокаПоказатель.ПорядокСтроки = ПорядокСтроки % 2;
			ПорядокСтроки = ПорядокСтроки + 1;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексКартинкиЭффективности(ТекущиеДанные)
	
	СписокГраницЭффективности = СформироватьСписокГраницЭффективности(ТекущиеДанные);
	
	
	Если ТекущиеДанные.ПроцентВыполнения <= СписокГраницЭффективности.НегативноеОтклонениеНормыДо И НЕ ТекущиеДанные.План = 0 Тогда
		//ТекущиеДанные.ИндексКартинкиГраницЭффективности = 4;
		ТекущиеДанные.ИндикаторГраницЭффективности = "▼";
	ИначеЕсли ТекущиеДанные.ПроцентВыполнения >= СписокГраницЭффективности.ПозитивноеОтклонениеНормыОт И НЕ ТекущиеДанные.План = 0 Тогда
		//ТекущиеДанные.ИндексКартинкиГраницЭффективности = 9;
		ТекущиеДанные.ИндикаторГраницЭффективности = "▲";
	ИначеЕсли ТекущиеДанные.ПроцентВыполнения >= СписокГраницЭффективности.ПограничноеОтклонениеНормыОт 
		И ТекущиеДанные.ПроцентВыполнения <= СписокГраницЭффективности.ПограничноеОтклонениеНормыДо И НЕ ТекущиеДанные.План = 0 Тогда
		//ТекущиеДанные.ИндексКартинкиГраницЭффективности = 8;
		ТекущиеДанные.ИндикаторГраницЭффективности = "▬";
	Иначе 
		//ТекущиеДанные.ИндексКартинкиГраницЭффективности = 0;
		ТекущиеДанные.ИндикаторГраницЭффективности = " ";
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция СформироватьСписокГраницЭффективности(СтрокаНачислений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.НегативноеОтклонениеНормыДо КАК НегативноеОтклонениеНормыДо,
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.ПограничноеОтклонениеНормыОт КАК ПограничноеОтклонениеНормыОт,
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.ПограничноеОтклонениеНормыДо КАК ПограничноеОтклонениеНормыДо,
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.ПозитивноеОтклонениеНормыОт КАК ПозитивноеОтклонениеНормыОт
	               |ИЗ
	               |	РегистрСведений.УБ_СоставПоказателейМоделейПланирования.СрезПоследних КАК УБ_СоставПоказателейМоделейПланированияСрезПоследних
	               |ГДЕ
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.ПоказательЭффективности = &ПоказательЭффективности
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.ТипПоказателя = &ТипПоказателя
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.Грейд = &Грейд
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.ВерсияГрейда = &ВерсияГрейда
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.МодельПланированияЭффективности = &МодельПланированияЭффективности";
	Запрос.УстановитьПараметр("ПоказательЭффективности",СтрокаНачислений.Показатель);
	Запрос.УстановитьПараметр("ТипПоказателя",СтрокаНачислений.ТипПоказателя);
	Запрос.УстановитьПараметр("Грейд",Объект.Грейд);
	Запрос.УстановитьПараметр("ВерсияГрейда",Объект.ВерсияГрейда);
	Запрос.УстановитьПараметр("МодельПланированияЭффективности",Объект.МодельПланированияЭффективности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокГраницЭффективности = Новый Структура;
	Если Выборка.Следующий() Тогда
		СписокГраницЭффективности.Вставить("НегативноеОтклонениеНормыДо",Выборка.НегативноеОтклонениеНормыДо);
		СписокГраницЭффективности.Вставить("ПограничноеОтклонениеНормыОт",Выборка.ПограничноеОтклонениеНормыОт);
		СписокГраницЭффективности.Вставить("ПограничноеОтклонениеНормыДо",Выборка.ПограничноеОтклонениеНормыДо);
		СписокГраницЭффективности.Вставить("ПозитивноеОтклонениеНормыОт",Выборка.ПозитивноеОтклонениеНормыОт);
	Иначе		
		СписокГраницЭффективности.Вставить("НегативноеОтклонениеНормыДо",33.33);
		СписокГраницЭффективности.Вставить("ПограничноеОтклонениеНормыОт",33.34);
		СписокГраницЭффективности.Вставить("ПограничноеОтклонениеНормыДо",66.66);
		СписокГраницЭффективности.Вставить("ПозитивноеОтклонениеНормыОт",66.67);
	КонецЕсли;	
	
	Возврат СписокГраницЭффективности;
	
КонецФункции	

#КонецОбласти

#Область РаспределениеПремииПодразделения

&НаСервере
Функция ДоступностьСтраницыРаспределенияПремии()
	
	Если Не ИспользуетсяБезокладнаяСистемаПоказателей Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РуководителиПодразделений.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.УБ_ДоступностьРасчетаЭффективностиСотрудниковДляПользователей КАК РуководителиПодразделений
		|ГДЕ
		|	РуководителиПодразделений.Организация = &Организация
		|	И РуководителиПодразделений.Подразделение = &Подразделение
		|	И РуководителиПодразделений.Пользователь.ФизическоеЛицо = &ФизическоеЛицо
		|	И РуководителиПодразделений.Сотрудник = ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка)
		|	И (&Период МЕЖДУ РуководителиПодразделений.ДатаНачала И РуководителиПодразделений.ДатаОкончания)";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.Сотрудник.ФизическоеЛицо);
	Запрос.УстановитьПараметр("Период", Объект.НачалоПериода);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

&НаСервере
Процедура РаспределениеПремииПодразделенияОбработкаВыбораНаСервере(ВыбранныеСотрудники)
	
	Если ТипЗнч(ВыбранныеСотрудники) = Тип("Массив") Тогда
		СписокСотрудников = ВыбранныеСотрудники;
	Иначе
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныеСотрудники);
	КонецЕсли;
	
	ДобавляемыеСотрудники = Новый Массив;
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		
		ПараметрыОтбора = Новый Структура("Сотрудник", Сотрудник);
		НайденныеСтроки = Объект.РаспределениеПремииПодразделения.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеСотрудники.Добавить(Сотрудник);
		
	КонецЦикла;
	
	ДанныеРасчетаЭффективностиСотрудников = ДанныеРасчетаЭффективностиСотрудников(ДобавляемыеСотрудники);
	
	Для Каждого ДобавляемыйСотрудник Из ДобавляемыеСотрудники Цикл
		
		НоваяСтрока = Объект.РаспределениеПремииПодразделения.Добавить();
		НоваяСтрока.Сотрудник = ДобавляемыйСотрудник;
		
		ДанныеСотрудника = ДанныеРасчетаЭффективностиСотрудников.Найти(ДобавляемыйСотрудник, "Сотрудник");
		Если ДанныеСотрудника <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСотрудника);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьРасчетЭффективностиТаблицыРаспределенияПремииПодразделения(ДобавляемыеСотрудники);
	
КонецПроцедуры

&НаСервере
Процедура РаспределениеПремииПодразделенияСотрудникПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.РаспределениеПремииПодразделения.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПараметрыОтобра = Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник);
	НайденныеСтроки = Объект.РаспределениеПремииПодразделения.НайтиСтроки(ПараметрыОтобра);
	Если НайденныеСтроки.Количество() = 1 Тогда
		ДанныеРасчетаЭффективности = ДанныеРасчетаЭффективностиСотрудников(ТекущиеДанные.Сотрудник);
		Если ДанныеРасчетаЭффективности.Количество() Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеРасчетаЭффективности[0]);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРасчетЭффективностиТаблицыРаспределенияПремииПодразделения(ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоэффициентыРаспределенияСотрудников()
	
	МассивСотрудников = Новый Массив;
	
	Для Каждого СтрокаСотрудника Из Объект.РаспределениеПремииПодразделения Цикл
		
		//ШОО
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСотрудников.Найти(СтрокаСотрудника.Сотрудник) = Неопределено Тогда
			МассивСотрудников.Добавить(СтрокаСотрудника.Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеРасчетаЭффективности = ДанныеРасчетаЭффективностиСотрудников(МассивСотрудников);
	
	Для Каждого СтрокаСотрудника Из Объект.РаспределениеПремииПодразделения Цикл
		//ШОО
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСотрудника = ДанныеРасчетаЭффективности.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
		Если ДанныеСотрудника <> Неопределено Тогда
			СтрокаСотрудника.КоэффициентРаспределения = ДанныеСотрудника.КоэффициентРаспределения;
			СтрокаСотрудника.Сумма = 0;
			ДанныеРасчетаЭффективности.Удалить(ДанныеСотрудника);
		Иначе
			СтрокаСотрудника.КоэффициентРаспределения = 0;
			СтрокаСотрудника.Сумма = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРасчетаЭффективностиСотрудников(Знач Сотрудники)
	
	Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		МассивСотрудников = Сотрудники;
	КонецЕсли;
	
	ДанныеТекущегоСотрудника = Новый ТаблицаЗначений;
	ДанныеТекущегоСотрудника.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Сотрудники.Тип));
	ДанныеТекущегоСотрудника.Колонки.Добавить("КоэффициентРаспределения", Новый ОписаниеТипов("Число"));
	
	Если МассивСотрудников.Найти(Объект.Сотрудник) <> Неопределено Тогда
		
		СуммаПоказателей = 0;
		
		ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
		Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
			Если Не СтрокаТипПоказателя.Показатель.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы Тогда
				Продолжить;
			КонецЕсли;
			СуммаПоказателей = СуммаПоказателей + СтрокаТипПоказателя.Сумма;
		КонецЦикла;
		
		Если СуммаПоказателей <> 0 Тогда
			НоваяСтрока = ДанныеТекущегоСотрудника.Добавить();
			НоваяСтрока.Сотрудник = Объект.Сотрудник;
			НоваяСтрока.КоэффициентРаспределения = СуммаПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеТекущегоСотрудника.Сотрудник КАК Сотрудник,
		|	ДанныеТекущегоСотрудника.КоэффициентРаспределения КАК КоэффициентРаспределения
		|ПОМЕСТИТЬ ВТ_ДанныеТекущегоСотрудника
		|ИЗ
		|	&ДанныеТекущегоСотрудника КАК ДанныеТекущегоСотрудника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТекущегоСотрудника.Сотрудник КАК Сотрудник,
		|	ДанныеТекущегоСотрудника.КоэффициентРаспределения КАК КоэффициентРаспределения
		|ИЗ
		|	ВТ_ДанныеТекущегоСотрудника КАК ДанныеТекущегоСотрудника
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КоэффициентыРаспределения.Сотрудник,
		|	КоэффициентыРаспределения.ЗначениеКоэффициентаОборот
		|ИЗ
		|	РегистрНакопления.УБ_КоэффициентыРаспределенияБезокладнойСистемыПоказателей.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Авто,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение
		|				И Сотрудник В (&МассивСотрудников)
		|				И Сотрудник <> &ТекущийСотрудник) КАК КоэффициентыРаспределения";
	
	Запрос.УстановитьПараметр("ДанныеТекущегоСотрудника", ДанныеТекущегоСотрудника);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ТекущийСотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура ДополнитьСвободнымиПозициямиМодели()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Сотрудники.Модель КАК Справочник.УБ_МоделиПланированияЭффективности) КАК Модель,
	|	Сотрудники.Сотрудник КАК ЗанятоПозиций,
	|	Сотрудники.КоэффициентРаспределения КАК КоэффициентРаспределения,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.РасчетЭффективностиСотрудника КАК РасчетЭффективностиСотрудника,
	|	Сотрудники.СостояниеРасчетаЭффективности КАК СостояниеРасчетаЭффективности,
	|	Сотрудники.ПредельныйКоэффициентРЭ КАК ПредельныйКоэффициентРЭ
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	&Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.Сотрудник В (&МассивПустыхСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сотрудники.Модель КАК Модель,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Сотрудники.ЗанятоПозиций) КАК ЗанятоПозиций,
	|	МАКСИМУМ(ВТ_Сотрудники.Модель.ШтатноеРасписание.КоличествоСтавок) КАК МодельШтатноеРасписаниеКоличествоСтавок,
	|	МАКСИМУМ(ВТ_Сотрудники.Модель.ДоляУчастияВРаспределении * ВТ_Сотрудники.Модель.ЕжемесячноеПлановоеЗначениеБаллов) КАК ДоляУчастияВРаспределении
	|ПОМЕСТИТЬ ВТ_Модели
	|ИЗ
	|	ВТ_Сотрудники КАК ВТ_Сотрудники
	|ГДЕ
	|	ВТ_Сотрудники.Модель.УчитыватьВакантныеПозиции = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Сотрудники.Модель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сотрудники.Модель КАК Модель,
	|	1 КАК НеЗанятоПозиций,
	|	ВТ_Сотрудники.КоэффициентРаспределения КАК КоэффициентРаспределения,
	|	1 КАК ЗанятоПозиций,
	|	ВТ_Сотрудники.Сотрудник КАК Сотрудник,
	|	ВТ_Сотрудники.РасчетЭффективностиСотрудника КАК РасчетЭффективностиСотрудника,
	|	ВТ_Сотрудники.СостояниеРасчетаЭффективности КАК СостояниеРасчетаЭффективности,
	|	ВТ_Сотрудники.ПредельныйКоэффициентРЭ КАК ПредельныйКоэффициентРЭ
	|ИЗ
	|	ВТ_Сотрудники КАК ВТ_Сотрудники
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Модели.Модель,
	|	ВТ_Модели.МодельШтатноеРасписаниеКоличествоСтавок - ВТ_Модели.ЗанятоПозиций,
	|	ВТ_Модели.ДоляУчастияВРаспределении,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТ_Модели КАК ВТ_Модели";
	Запрос.УстановитьПараметр("Сотрудники", Объект.РаспределениеПремииПодразделения.Выгрузить());
	
	ПустыеЗначения = УБ_ОбщегоНазначенияПовтИсп.МассивПустыхСсылокОпределяемогоТипа("УБ_Сотрудники");
	Запрос.УстановитьПараметр("МассивПустыхСсылок", ПустыеЗначения);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Объект.РаспределениеПремииПодразделения.Очистить();
	Пока Выборка.Следующий() Цикл
		Для Сч = 1 По Выборка.НеЗанятоПозиций Цикл
			НовСтр = ОБъект.РаспределениеПремииПодразделения.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
			Если Не ЗначениеЗаполнено(НовСтр.Сотрудник) Тогда
				НовСтр.КоэффициентРаспределения = 0.01*НовСтр.КоэффициентРаспределения;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуПремииМеждуСотрудникамиПодразделения()
	
	
	Если СпособРаспределенияПремии = ПредопределенноеЗначение("Перечисление.УБ_СпособРаспределенияПремии.Стандартный") Тогда
		РаспределитьСуммуПремииПоСтандарту();
	ИначеЕсли СпособРаспределенияПремии = ПредопределенноеЗначение("Перечисление.УБ_СпособРаспределенияПремии.Способ1") Тогда 
		РаспределитьСуммуПремииПо1Способу();
	ИначеЕсли СпособРаспределенияПремии = ПредопределенноеЗначение("Перечисление.УБ_СпособРаспределенияПремии.Способ2") Тогда
		РаспределитьСуммуПремииПо2Способу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуПремииПоСтандарту()
	
	Если Объект.СуммаКРаспределению = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сумма к распределению должна быть больше нуля'"));
		Возврат;
	КонецЕсли;
	
	Коэффициенты = Новый Массив;
	Для Каждого СтрокаСотрудника Из Объект.РаспределениеПремииПодразделения Цикл
		Коэффициенты.Добавить(СтрокаСотрудника.КоэффициентРаспределения);
	КонецЦикла;
	
	Результат = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
		Объект.СуммаКРаспределению,
		Коэффициенты);
	
	Если Результат <> Неопределено Тогда
		Для Индекс = 0 По Результат.Количество() - 1 Цикл
			СтрокаСотрудника = Объект.РаспределениеПремииПодразделения[Индекс];
			СтрокаСотрудника.Сумма = Результат[Индекс];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура РаспределитьСуммуПремииПо1Способу()
	
	Если Объект.СуммаКРаспределению = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сумма к распределению должна быть больше нуля'"));
		Возврат;
	КонецЕсли;
	
	РассчитатьПо1Способу();
		
	
КонецПроцедуры	

&НаСервере
Функция РассчитатьПо1Способу()
	
	РассчитанныеДанные = Новый Структура;
	РассчитанныеДанные.Вставить("ТаблицаРасчета",Объект.РаспределениеПремииПодразделения.Выгрузить());
	РассчитанныеДанные.Вставить("СуммаРаспределения",Объект.СуммаКРаспределению);
	РассчитанныеДанные.Вставить("СуммаОстаток",0);
	РассчитанныеДанные.Вставить("СписокДляРаспределения",Объект.РаспределениеПремииПодразделения.Выгрузить());
	
	Адрес = ПоместитьВоВременноеХранилище(РассчитанныеДанные,УникальныйИдентификатор); 
	
	Результат = УБ_РасчетыБезокладнойСистемыКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентамСПредельнымКоэффициентом(Адрес);
	
	РассчитанныеДанные = ПолучитьИзВременногоХранилища(Результат);
	
	Объект.ОстатокРаспределения = РассчитанныеДанные.СуммаОстаток;
	Объект.РаспределениеПремииПодразделения.Очистить();
	Объект.РаспределениеПремииПодразделения.Загрузить(РассчитанныеДанные.ТаблицаРасчета);
	
КонецФункции	

&НаКлиенте
Процедура РаспределитьСуммуПремииПо2Способу()
	
	Если Объект.СуммаКРаспределению = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сумма к распределению должна быть больше нуля'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.РаспределениеПремииПодразделения.Итог("ПредельныйКоэффициентРЭ")>1 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Коэффициент распределения в сумме не должен превышать 1'"));
		Возврат;
	КонецЕсли;
	
	РассчитатьПо2Способу();	
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПо2Способу()
	
	РассчитанныеДанные = Новый Структура;
	РассчитанныеДанные.Вставить("ТаблицаРасчета",Объект.РаспределениеПремииПодразделения.Выгрузить());
	РассчитанныеДанные.Вставить("СуммаРаспределения",Объект.СуммаКРаспределению);
	РассчитанныеДанные.Вставить("СуммаОстаток",Объект.ОстатокРаспределения);
	
	Адрес = ПоместитьВоВременноеХранилище(РассчитанныеДанные,УникальныйИдентификатор); 
	
	Результат = УБ_РасчетыБезокладнойСистемыКлиентСервер.РассчитатьСуммуОтМаксимумаСПредельнымКоэффициентом(Адрес);
	
	РассчитанныеДанные = ПолучитьИзВременногоХранилища(Результат);
	
	Объект.ОстатокРаспределения = РассчитанныеДанные.СуммаОстаток;
	Объект.РаспределениеПремииПодразделения.Очистить();
	Объект.РаспределениеПремииПодразделения.Загрузить(РассчитанныеДанные.ТаблицаРасчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоказателейРасчетнойБазы()
	
	Если Не ДоступнаСтраницаРаспределенияПремии Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПоказательРасчетнойБазы.СписокВыбора.Очистить();
	
	ПоказателиЭффективности = Новый Массив;
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			ПоказателиЭффективности.Добавить(СтрокаПоказатель.Показатель);
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ПоказательРасчетнойБазы.СписокВыбора.ЗагрузитьЗначения(ПоказателиЭффективности);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетЭффективностиТаблицыРаспределенияПремииПодразделения(Знач СписокСотрудников = Неопределено)
	
	Если СписокСотрудников = Неопределено Тогда
		СписокСотрудников = Объект.РаспределениеПремииПодразделения.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	ИначеЕсли ТипЗнч(СписокСотрудников) <> Тип("Массив") Тогда
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокСотрудников);
	КонецЕсли;
	
	ДанныеТекущегоСотрудника = Новый ТаблицаЗначений;
	ДанныеТекущегоСотрудника.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.УБ_Сотрудники.Тип));
	ДанныеТекущегоСотрудника.Колонки.Добавить("РасчетЭффективностиСотрудника", Новый ОписаниеТипов("ДокументСсылка.УБ_РасчетЭффективностиСотрудников"));
	ДанныеТекущегоСотрудника.Колонки.Добавить("СостояниеРасчетаЭффективности", Новый ОписаниеТипов("Число"));
	
	Если СписокСотрудников.Найти(Объект.Сотрудник) <> Неопределено Тогда
		НоваяСтрока = ДанныеТекущегоСотрудника.Добавить();
		НоваяСтрока.Сотрудник = Объект.Сотрудник;
		НоваяСтрока.РасчетЭффективностиСотрудника = Объект.Ссылка;
		Если Не Объект.Проведен Тогда
			НоваяСтрока.СостояниеРасчетаЭффективности = 2;
		ИначеЕсли Объект.ФактУтвержден Тогда
			НоваяСтрока.СостояниеРасчетаЭффективности = 3;
		ИначеЕсли Объект.ПланУтвержден Тогда
			НоваяСтрока.СостояниеРасчетаЭффективности = 1;
		Иначе
			НоваяСтрока.СостояниеРасчетаЭффективности = 0;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеТекущегоСотрудника.Сотрудник КАК Сотрудник,
		|	ДанныеТекущегоСотрудника.РасчетЭффективностиСотрудника КАК РасчетЭффективностиСотрудника,
		|	ДанныеТекущегоСотрудника.СостояниеРасчетаЭффективности КАК СостояниеРасчетаЭффективности
		|ПОМЕСТИТЬ ВТ_ДанныеТекущегоСотрудника
		|ИЗ
		|	&ДанныеТекущегоСотрудника КАК ДанныеТекущегоСотрудника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТекущегоСотрудника.Сотрудник КАК Сотрудник,
		|	ДанныеТекущегоСотрудника.РасчетЭффективностиСотрудника КАК РасчетЭффективностиСотрудника,
		|	ДанныеТекущегоСотрудника.СостояниеРасчетаЭффективности КАК СостояниеРасчетаЭффективности
		|ИЗ
		|	ВТ_ДанныеТекущегоСотрудника КАК ДанныеТекущегоСотрудника
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостоянияРасчетаЭффективности.Сотрудник,
		|	СостоянияРасчетаЭффективности.РасчетЭффективностиСотрудника,
		|	ВЫБОР
		|		КОГДА СостоянияРасчетаЭффективности.Состояние = ЗНАЧЕНИЕ(Перечисление.УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.ФактУтвержден)
		|			ТОГДА 3
		|		КОГДА СостоянияРасчетаЭффективности.Состояние = ЗНАЧЕНИЕ(Перечисление.УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.ПланУтвержден)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.УБ_СостоянияДокументовРасчетаЭффективностиСотрудников КАК СостоянияРасчетаЭффективности
		|ГДЕ
		|	СостоянияРасчетаЭффективности.Организация = &Организация
		|	И СостоянияРасчетаЭффективности.Подразделение = &Подразделение
		|	И СостоянияРасчетаЭффективности.Сотрудник В (&СписокСотрудников)
		|	И СостоянияРасчетаЭффективности.Сотрудник <> &ТекущийСотрудник
		|	И СостоянияРасчетаЭффективности.НачалоПериода <= &КонецПериода
		|	И СостоянияРасчетаЭффективности.КонецПериода >= &НачалоПериода";
	
	Запрос.УстановитьПараметр("ДанныеТекущегоСотрудника", ДанныеТекущегоСотрудника);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.УстановитьПараметр("ТекущийСотрудник", Объект.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Сотрудник", Выборка.Сотрудник);
		НайденныеСтроки = Объект.РаспределениеПремииПодразделения.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка);
			НайденнаяСтрока.Модель = НайденнаяСтрока.РасчетЭффективностиСотрудника.МодельПланированияЭффективности;
			Если Не ЗначениеЗаполнено(НайденнаяСтрока.ПредельныйКоэффициентРЭ) Тогда
				НайденнаяСтрока.ПредельныйКоэффициентРЭ = НайденнаяСтрока.РасчетЭффективностиСотрудника.ПредельныйКоэффициент;
			КонецЕсли;
			НайденнаяСтрока.МаксимальнаяСумма = Объект.СуммаКРаспределению*НайденнаяСтрока.ПредельныйКоэффициентРЭ;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Стандарты

&НаСервере
Процедура ЗаполнитьЗакладкуСтандартов()
	
	ЗаполнитьТаблицуОписаниеДобавленныхРеквизитов();
	ДобавитьРеквизитыЗаполненияСтандартов();
	ЗаполнитьЗначенияДобавленныхРеквизитовСтандартов();
	ДобавитьЭлементыЗаполненияСтандартов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОписаниеДобавленныхРеквизитов()
	
	Для Каждого СтрокаОписаниеРеквизитов Из Стандарты_ОписаниеДобавленныхРеквизитов Цикл
		СтрокаОписаниеРеквизитов.УдалитьСтандарт = Истина;
		СтрокаОписаниеРеквизитов.ДобавитьРеквизиты = Ложь;
		СтрокаОписаниеРеквизитов.ДобавитьЭлементы = Ложь;
		СтрокаОписаниеРеквизитов.ОбновитьШкалуОценки = Ложь;
	КонецЦикла;
	
	СписокСтандартов = Объект.СтандартыОценкиСотрудника.Выгрузить(, "Стандарт").ВыгрузитьКолонку("Стандарт");
	ВыборкаОписаниеСтандартов = ПолучитьОписаниеСтандартовСотрудника(СписокСтандартов);
	
	СписокШкалОценок = Объект.СтандартыОценкиСотрудника.Выгрузить(, "ШкалаОценок").ВыгрузитьКолонку("ШкалаОценок");
	ВыборкаШкалаОценок = ПолучитьОписаниеОценокПоШкалам(СписокШкалОценок);
	
	Для Каждого СтрокаСтандарты Из Объект.СтандартыОценкиСотрудника Цикл
		
		РеквизитыСтандарта = Новый Структура("Наименование, Описание, РеквизитДопУпорядочивания");
		
		СтруктураПоиска = Новый Структура("Ссылка", СтрокаСтандарты.Стандарт);
		ВыборкаОписаниеСтандартов.Сбросить();
		Если ВыборкаОписаниеСтандартов.НайтиСледующий(СтруктураПоиска) Тогда
			ЗаполнитьЗначенияСвойств(РеквизитыСтандарта, ВыборкаОписаниеСтандартов);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ШкалаОценок", СтрокаСтандарты.ШкалаОценок);
		ВыборкаШкалаОценок.Сбросить();
		Если ВыборкаШкалаОценок.НайтиСледующий(СтруктураПоиска) Тогда
			ВыборкаВидыОценок = ВыборкаШкалаОценок.Выбрать();
		Иначе
			ВыборкаВидыОценок = Неопределено;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Стандарт", СтрокаСтандарты.Стандарт);
		
		НайденныеСтроки = Стандарты_ОписаниеДобавленныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() Тогда
			Для Каждого СтрокаДобавленныеРеквизиты Из НайденныеСтроки Цикл
				
				ЗаполнитьЗначенияСвойств(СтрокаДобавленныеРеквизиты, СтрокаСтандарты, "ШкалаОценок, Вес");
				СтрокаДобавленныеРеквизиты.ПредставлениеСтандарта = РеквизитыСтандарта.Наименование;
				СтрокаДобавленныеРеквизиты.ОписаниеСтандарта = РеквизитыСтандарта.Описание;
				СтрокаДобавленныеРеквизиты.РеквизитДопУпорядочивания = РеквизитыСтандарта.РеквизитДопУпорядочивания;
				СтрокаДобавленныеРеквизиты.УдалитьСтандарт = Ложь;
				СтрокаДобавленныеРеквизиты.ОбновитьШкалуОценки = Истина;
				
				Если ВыборкаВидыОценок <> Неопределено Тогда
					
					СтрокаДобавленныеРеквизиты.ПредставленияОценок.Очистить();
					СтрокаДобавленныеРеквизиты.ОписанияОценок.Очистить();
					
					Пока ВыборкаВидыОценок.Следующий() Цикл
						СтрокаДобавленныеРеквизиты.ПредставленияОценок.Добавить(ВыборкаВидыОценок.Ссылка, ВыборкаВидыОценок.Наименование);
						СтрокаДобавленныеРеквизиты.ОписанияОценок.Добавить(ВыборкаВидыОценок.Ссылка, ВыборкаВидыОценок.Описание);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			
			НоваяСтрока = Стандарты_ОписаниеДобавленныхРеквизитов.Добавить();
			НоваяСтрока.Стандарт = СтрокаСтандарты.Стандарт;
			НоваяСтрока.ШкалаОценок = СтрокаСтандарты.ШкалаОценок;
			НоваяСтрока.Вес = СтрокаСтандарты.Вес;
			НоваяСтрока.ИдентификаторСтроки = СтрЗаменить(ВРег(Строка(СтрокаСтандарты.Стандарт.УникальныйИдентификатор())), "-", "x");
			НоваяСтрока.ПредставлениеСтандарта = РеквизитыСтандарта.Наименование;
			НоваяСтрока.ОписаниеСтандарта = РеквизитыСтандарта.Описание;
			НоваяСтрока.РеквизитДопУпорядочивания = РеквизитыСтандарта.РеквизитДопУпорядочивания;
			НоваяСтрока.УдалитьСтандарт = Ложь;
			НоваяСтрока.ДобавитьРеквизиты = Истина;
			НоваяСтрока.ДобавитьЭлементы = Истина;
			НоваяСтрока.ОбновитьШкалуОценки = Ложь;
			
			Если ВыборкаВидыОценок <> Неопределено Тогда
				
				Пока ВыборкаВидыОценок.Следующий() Цикл
					НоваяСтрока.ПредставленияОценок.Добавить(ВыборкаВидыОценок.Ссылка, ВыборкаВидыОценок.Наименование);
					НоваяСтрока.ОписанияОценок.Добавить(ВыборкаВидыОценок.Ссылка, ВыборкаВидыОценок.Описание);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Стандарты_ОписаниеДобавленныхРеквизитов.Сортировать("РеквизитДопУпорядочивания");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтандартовСотрудника(СписокСтандартов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеквизитыСтандарты.Ссылка КАК Ссылка,
		|	РеквизитыСтандарты.Наименование КАК Наименование,
		|	РеквизитыСтандарты.Описание КАК Описание,
		|	РеквизитыСтандарты.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		|ИЗ
		|	Справочник.УБ_Стандарты КАК РеквизитыСтандарты
		|ГДЕ
		|	РеквизитыСтандарты.Ссылка В(&СписокСтандартов)";
	
	Запрос.УстановитьПараметр("СписокСтандартов", СписокСтандартов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеОценокПоШкалам(СписокШкалОценок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеквизитыВидыОценок.Владелец КАК ШкалаОценок,
		|	РеквизитыВидыОценок.Ссылка КАК Ссылка,
		|	РеквизитыВидыОценок.Наименование КАК Наименование,
		|	РеквизитыВидыОценок.Значение КАК Значение,
		|	РеквизитыВидыОценок.Описание КАК Описание,
		|	РеквизитыВидыОценок.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		|ИЗ
		|	Справочник.УБ_ВидыОценок КАК РеквизитыВидыОценок
		|ГДЕ
		|	РеквизитыВидыОценок.Владелец В(&СписокШкалОценок)
		|	И НЕ РеквизитыВидыОценок.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШкалаОценок,
		|	РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	ШкалаОценок";
	
	Запрос.УстановитьПараметр("СписокШкалОценок", СписокШкалОценок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаШкалаОценок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаШкалаОценок;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыЗаполненияСтандартов()
	
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	СтрокиУдаляемыхРеквизитов = Новый Массив;
	
	МетаданныеСтандарты = Метаданные.Документы.УБ_РасчетЭффективностиСотрудников.ТабличныеЧасти.СтандартыОценкиСотрудника;
	
	Для Каждого СтрокаОписаниеРеквизитов Из Стандарты_ОписаниеДобавленныхРеквизитов Цикл
		
		Если СтрокаОписаниеРеквизитов.УдалитьСтандарт Тогда
			
			УдаляемыеРеквизиты.Добавить(СтрокаОписаниеРеквизитов.ИмяРеквизитаСтандарта);
			УдаляемыеРеквизиты.Добавить(СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаСотрудника);
			УдаляемыеРеквизиты.Добавить(СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаРуководителя);
			УдаляемыеРеквизиты.Добавить(СтрокаОписаниеРеквизитов.ИмяРеквизитаКомментарийСотрудника);
			УдаляемыеРеквизиты.Добавить(СтрокаОписаниеРеквизитов.ИмяРеквизитаКомментарийРуководителя);
			
			УдалитьЭлементыГруппыСтандарта(СтрокаОписаниеРеквизитов.ИдентификаторСтроки);
			
			СтрокиУдаляемыхРеквизитов.Добавить(СтрокаОписаниеРеквизитов);
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаОписаниеРеквизитов.ДобавитьРеквизиты Тогда
			
			СтрокаОписаниеРеквизитов.ДобавитьРеквизиты = Ложь;
			
			ИдентификаторСтроки = СтрокаОписаниеРеквизитов.ИдентификаторСтроки;
			
			ИменаДобавленныхРеквизитов = Новый Структура;
			ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаСтандарта",
				"Стандарт_" + ИдентификаторСтроки);
			ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаОценкаСотрудника",
				"ОценкаСотрудника_" + ИдентификаторСтроки);
			ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаОценкаРуководителя",
				"ОценкаРуководителя_" + ИдентификаторСтроки);
			ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаКомментарийСотрудника",
				"КомментарийСотрудника_" + ИдентификаторСтроки);
			ИменаДобавленныхРеквизитов.Вставить("ИмяРеквизитаКомментарийРуководителя",
				"КомментарийРуководителя_" + ИдентификаторСтроки);
			
			ЗаполнитьЗначенияСвойств(СтрокаОписаниеРеквизитов, ИменаДобавленныхРеквизитов);
			
			РеквизитСтандарт = Новый РеквизитФормы(
				ИменаДобавленныхРеквизитов.ИмяРеквизитаСтандарта,
				МетаданныеСтандарты.Реквизиты.Стандарт.Тип,
				,
				НСтр("ru = 'Стандарт'"),
				Истина);
			
			РеквизитОценкаСотрудника = Новый РеквизитФормы(
				ИменаДобавленныхРеквизитов.ИмяРеквизитаОценкаСотрудника,
				МетаданныеСтандарты.Реквизиты.Оценка.Тип,
				,
				НСтр("ru = 'Оценка сотрудника'"),
				Истина);
			
			РеквизитОценкаРуководителя = Новый РеквизитФормы(
				ИменаДобавленныхРеквизитов.ИмяРеквизитаОценкаРуководителя,
				МетаданныеСтандарты.Реквизиты.Оценка.Тип,
				,
				НСтр("ru = 'Оценка руководителя'"),
				Истина);
			
			РеквизитКомментарийСотрудника = Новый РеквизитФормы(
				ИменаДобавленныхРеквизитов.ИмяРеквизитаКомментарийСотрудника,
				МетаданныеСтандарты.Реквизиты.Комментарий.Тип,
				,
				НСтр("ru = 'Комментарий сотрудника'"),
				Истина);
			
			РеквизитКомментарийРуководителя = Новый РеквизитФормы(
				ИменаДобавленныхРеквизитов.ИмяРеквизитаКомментарийРуководителя,
				МетаданныеСтандарты.Реквизиты.Комментарий.Тип,
				,
				НСтр("ru = 'Комментарий руководителя'"),
				Истина);
			
			ДобавляемыеРеквизиты.Добавить(РеквизитСтандарт);
			ДобавляемыеРеквизиты.Добавить(РеквизитОценкаСотрудника);
			ДобавляемыеРеквизиты.Добавить(РеквизитОценкаРуководителя);
			ДобавляемыеРеквизиты.Добавить(РеквизитКомментарийСотрудника);
			ДобавляемыеРеквизиты.Добавить(РеквизитКомментарийРуководителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из СтрокиУдаляемыхРеквизитов Цикл
		Стандарты_ОписаниеДобавленныхРеквизитов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияДобавленныхРеквизитовСтандартов()
	
	Для Каждого СтрокаОписаниеРеквизитов Из Стандарты_ОписаниеДобавленныхРеквизитов Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Стандарт", СтрокаОписаниеРеквизитов.Стандарт);
		
		НайденныеСтроки = Объект.СтандартыОценкиСотрудника.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() Тогда
			ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаСтандарта] = НайденныеСтроки[0].Стандарт;
			ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаСотрудника] = НайденныеСтроки[0].Оценка;
			ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаКомментарийСотрудника] = НайденныеСтроки[0].Комментарий;
		КонецЕсли;
		
		НайденныеСтроки = Объект.СтандартыОценкиРуководителя.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() Тогда
			ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаРуководителя] = НайденныеСтроки[0].Оценка;
			ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаКомментарийРуководителя] = НайденныеСтроки[0].Комментарий;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыЗаполненияСтандартов()
	
	Элементы.ДекорацияПустаяСтраницаСтандартов.Видимость = (Стандарты_ОписаниеДобавленныхРеквизитов.Количество() = 0);
	
	ПервыйВСписке = Истина;
	
	Для Каждого СтрокаОписаниеРеквизитов Из Стандарты_ОписаниеДобавленныхРеквизитов Цикл
		
		ИдентификаторСтроки = СтрокаОписаниеРеквизитов.ИдентификаторСтроки;
		
		ГруппаСвернута = Не ПервыйВСписке;
		
		ДекорацияОткрыть = Элементы.Найти("ДекорацияОткрыть_" + ИдентификаторСтроки);
		Если  ДекорацияОткрыть <> Неопределено Тогда
			ГруппаСвернута = ДекорацияОткрыть.Видимость;
		КонецЕсли;
		
		Если Не ГруппаСвернута Тогда
			ЗаголовокГруппыСтандарта = СтрокаОписаниеРеквизитов.ПредставлениеСтандарта;
		Иначе
			ОценкаСотрудника = ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаСотрудника];
			ОценкаРуководителя = ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаРуководителя];
			
			ПредставлениеОценкиСотрудника = ПредставлениеОценкиСтандарта(ОценкаСотрудника,
				СтрокаОписаниеРеквизитов.ПредставленияОценок);
			ПредставлениеОценкиРуководителя = ПредставлениеОценкиСтандарта(ОценкаРуководителя,
				СтрокаОписаниеРеквизитов.ПредставленияОценок);
			
			ЗаголовокГруппыСтандарта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2 / %3",
				СтрокаОписаниеРеквизитов.ПредставлениеСтандарта,
				ПредставлениеОценкиСотрудника,
				ПредставлениеОценкиРуководителя);
		КонецЕсли;
		
		Если СтрокаОписаниеРеквизитов.ОбновитьШкалуОценки Тогда
			
			СтрокаОписаниеРеквизитов.ОбновитьШкалуОценки = Ложь;
			
			ЭлементОценкаСотрудника = Элементы.Найти("ОценкаСотрудника_" + ИдентификаторСтроки);
			Если ЭлементОценкаСотрудника <> Неопределено Тогда
				ЗаполнитьСписокВыбораОценкиСтандарта(ЭлементОценкаСотрудника, СтрокаОписаниеРеквизитов, "Сотрудник");
			КонецЕсли;
			
			ЭлементОценкаРуководителя = Элементы.Найти("ОценкаРуководителя_" + ИдентификаторСтроки);
			Если ЭлементОценкаРуководителя <> Неопределено Тогда
				ЗаполнитьСписокВыбораОценкиСтандарта(ЭлементОценкаРуководителя, СтрокаОписаниеРеквизитов, "Руководитель");
			КонецЕсли;
			
			ДекорацияЗаголовок = Элементы.Найти("ДекорацияЗаголовок_" + ИдентификаторСтроки);
			Если ДекорацияЗаголовок <> Неопределено Тогда
				ДекорацияЗаголовок.Заголовок = ЗаголовокГруппыСтандарта;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаОписаниеРеквизитов.ДобавитьЭлементы Тогда
			
			СтрокаОписаниеРеквизитов.ДобавитьЭлементы = Ложь;
			
			ГруппаЗаголовокСтандарта = Элементы.Добавить("ГруппаЗаголовокСтандарта_" + ИдентификаторСтроки,
				Тип("ГруппаФормы"),
				Элементы.СтраницаСтандарты);
			ГруппаЗаголовокСтандарта.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заголовок %1'"),
				СтрокаОписаниеРеквизитов.ПредставлениеСтандарта);
			ГруппаЗаголовокСтандарта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЗаголовокСтандарта.РазрешитьИзменениеСостава = Ложь;
			ГруппаЗаголовокСтандарта.Поведение = ПоведениеОбычнойГруппы.Обычное;
			ГруппаЗаголовокСтандарта.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаЗаголовокСтандарта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЗаголовокСтандарта.ОтображатьЗаголовок = Ложь;
			
			ДекорацияОткрыть = Элементы.Добавить("ДекорацияОткрыть_" + ИдентификаторСтроки,
				Тип("ДекорацияФормы"),
				ГруппаЗаголовокСтандарта);
			ДекорацияОткрыть.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Открыть %1'"),
				СтрокаОписаниеРеквизитов.ПредставлениеСтандарта);
			ДекорацияОткрыть.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияОткрыть.Видимость = ГруппаСвернута;
			ДекорацияОткрыть.Картинка = БиблиотекаКартинок.УБ_СтрелкаВправоЗеленая;
			ДекорацияОткрыть.Гиперссылка = Истина;
			ДекорацияОткрыть.Масштабировать = Ложь;
			ДекорацияОткрыть.УстановитьДействие("Нажатие", "Подключаемый_ДекорацияОткрытьНажатие");
			
			ДекорацияЗакрыть = Элементы.Добавить("ДекорацияЗакрыть_" + ИдентификаторСтроки,
				Тип("ДекорацияФормы"),
				ГруппаЗаголовокСтандарта);
			ДекорацияЗакрыть.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Закрыть %1'"),
				СтрокаОписаниеРеквизитов.ПредставлениеСтандарта);
			ДекорацияЗакрыть.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияЗакрыть.Видимость = Не ГруппаСвернута;
			ДекорацияЗакрыть.Картинка = БиблиотекаКартинок.УБ_СтрелкаВнизЗеленая;
			ДекорацияЗакрыть.Гиперссылка = Истина;
			ДекорацияЗакрыть.Масштабировать = Ложь;
			ДекорацияЗакрыть.УстановитьДействие("Нажатие", "Подключаемый_ДекорацияЗакрытьНажатие");
			
			ДекорацияЗаголовок = Элементы.Добавить("ДекорацияЗаголовок_" + ИдентификаторСтроки,
				Тип("ДекорацияФормы"),
				ГруппаЗаголовокСтандарта);
			ДекорацияЗаголовок.Заголовок = ЗаголовокГруппыСтандарта;
			ДекорацияЗаголовок.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияЗаголовок.ЦветТекста = ЦветаСтиля.ЦветРазделаПанелиФункций;
			ДекорацияЗаголовок.Шрифт = Новый Шрифт(, 12);
			ДекорацияЗаголовок.Ширина = 95;
			ДекорацияЗаголовок.УстановитьДействие("Нажатие", "Подключаемый_ДекорацияЗаголовокНажатие");
			
			СворачиваемаяГруппаСтандарта = Элементы.Добавить("СворачиваемаяГруппаСтандарта_" + ИдентификаторСтроки,
				Тип("ГруппаФормы"),
				Элементы.СтраницаСтандарты);
			СворачиваемаяГруппаСтандарта.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сворачиваемая группа %1'"),
				СтрокаОписаниеРеквизитов.ПредставлениеСтандарта);
			СворачиваемаяГруппаСтандарта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			СворачиваемаяГруппаСтандарта.Видимость = Не ГруппаСвернута;
			СворачиваемаяГруппаСтандарта.Отображение = ОтображениеОбычнойГруппы.Нет;
			СворачиваемаяГруппаСтандарта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			СворачиваемаяГруппаСтандарта.ОтображатьЗаголовок = Ложь;
			
			ОписаниеСтандарта = Элементы.Добавить("ОписаниеСтандарта_" + ИдентификаторСтроки,
				Тип("ДекорацияФормы"),
				СворачиваемаяГруппаСтандарта);
			ОписаниеСтандарта.Заголовок = СтрокаОписаниеРеквизитов.ОписаниеСтандарта;
			ОписаниеСтандарта.Вид = ВидДекорацииФормы.Надпись;
			ОписаниеСтандарта.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
			ОписаниеСтандарта.Ширина = 80;
			
			ГруппаОценкиСтандарта = Элементы.Добавить("ГруппаОценкиСтандарта_" + ИдентификаторСтроки,
				Тип("ГруппаФормы"),
				СворачиваемаяГруппаСтандарта);
			ГруппаОценкиСтандарта.Заголовок = НСтр("ru = 'Оценки стандарта'");
			ГруппаОценкиСтандарта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОценкиСтандарта.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОценкиСтандарта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаОценкиСтандарта.ОтображатьЗаголовок = Ложь;
			
			ГруппаОценкаСотрудника = Элементы.Добавить("ГруппаОценкаСотрудника_" + ИдентификаторСтроки,
				Тип("ГруппаФормы"),
				ГруппаОценкиСтандарта);
			ГруппаОценкаСотрудника.Заголовок = НСтр("ru = 'Оценка сотрудника'");
			ГруппаОценкаСотрудника.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОценкаСотрудника.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОценкаСотрудника.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаОценкаСотрудника.ОтображатьЗаголовок = Ложь;
			ГруппаОценкаСотрудника.Ширина = 41;
			
			ЭлементОценкаСотрудника = Элементы.Добавить("ОценкаСотрудника_" + ИдентификаторСтроки,
				Тип("ПолеФормы"),
				ГруппаОценкаСотрудника);
			ЭлементОценкаСотрудника.Заголовок = НСтр("ru = 'Оценка сотрудника'");
			ЭлементОценкаСотрудника.Вид = ВидПоляФормы.ПолеПереключателя;
			ЭлементОценкаСотрудника.ПутьКДанным = СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаСотрудника;
			ЭлементОценкаСотрудника.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			ЭлементОценкаСотрудника.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			ЭлементОценкаСотрудника.УстановитьДействие("ПриИзменении", "Подключаемый_ОценкаСтандартаПриИзменении");
			
			ЗаполнитьСписокВыбораОценкиСтандарта(ЭлементОценкаСотрудника, СтрокаОписаниеРеквизитов, "Сотрудник");
			
			ГруппаОценкаРуководителя = Элементы.Добавить("ГруппаОценкаРуководителя_" + ИдентификаторСтроки,
				Тип("ГруппаФормы"),
				ГруппаОценкиСтандарта);
			ГруппаОценкаРуководителя.Заголовок = НСтр("ru = 'Оценка руководителя'");
			ГруппаОценкаРуководителя.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОценкаРуководителя.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОценкаРуководителя.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаОценкаРуководителя.ОтображатьЗаголовок = Ложь;
			ГруппаОценкаРуководителя.Ширина = 41;
			
			ЭлементОценкаРуководителя = Элементы.Добавить("ОценкаРуководителя_" + ИдентификаторСтроки,
				Тип("ПолеФормы"),
				ГруппаОценкаРуководителя);
			ЭлементОценкаРуководителя.Заголовок = НСтр("ru = 'Оценка руководителя'");
			ЭлементОценкаРуководителя.Вид = ВидПоляФормы.ПолеПереключателя;
			ЭлементОценкаРуководителя.ПутьКДанным = СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаРуководителя;
			ЭлементОценкаРуководителя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			ЭлементОценкаРуководителя.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			ЭлементОценкаРуководителя.УстановитьДействие("ПриИзменении", "Подключаемый_ОценкаСтандартаПриИзменении");
			
			ЗаполнитьСписокВыбораОценкиСтандарта(ЭлементОценкаРуководителя, СтрокаОписаниеРеквизитов, "Руководитель");
			
			ГруппаКомментарииКОценке = Элементы.Добавить("ГруппаКомментарииКОценке_" + ИдентификаторСтроки,
				Тип("ГруппаФормы"),
				СворачиваемаяГруппаСтандарта);
			ГруппаКомментарииКОценке.Заголовок = НСтр("ru = 'Комментарии к оценке'");
			ГруппаКомментарииКОценке.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаКомментарииКОценке.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаКомментарииКОценке.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаКомментарииКОценке.ОтображатьЗаголовок = Ложь;
			
			ЭлементКомментарийСотрудника = Элементы.Добавить("КомментарийСотрудника_" + ИдентификаторСтроки,
				Тип("ПолеФормы"),
				ГруппаКомментарииКОценке);
			ЭлементКомментарийСотрудника.Заголовок = НСтр("ru = 'Комментарий сотрудника'");
			ЭлементКомментарийСотрудника.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементКомментарийСотрудника.ПутьКДанным = СтрокаОписаниеРеквизитов.ИмяРеквизитаКомментарийСотрудника;
			ЭлементКомментарийСотрудника.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементКомментарийСотрудника.МногострочныйРежим = Истина;
			ЭлементКомментарийСотрудника.КнопкаВыбора = Истина;
			ЭлементКомментарийСотрудника.ПодсказкаВвода = НСтр("ru = 'Опишите свои достижения и планы по развитию'");
			ЭлементКомментарийСотрудника.Ширина = 30;
			ЭлементКомментарийСотрудника.АвтоМаксимальнаяВысота = Ложь;
			ЭлементКомментарийСотрудника.МаксимальнаяВысота = 5;
			ЭлементКомментарийСотрудника.УстановитьДействие("НачалоВыбора", "Подключаемый_КомментарийНачалоВыбора");
			
			ЭлементКомментарийРуководителя = Элементы.Добавить("КомментарийРуководителя_" + ИдентификаторСтроки,
				Тип("ПолеФормы"),
				ГруппаКомментарииКОценке);
			ЭлементКомментарийРуководителя.Заголовок = НСтр("ru = 'Комментарий руководителя'");
			ЭлементКомментарийРуководителя.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементКомментарийРуководителя.ПутьКДанным = СтрокаОписаниеРеквизитов.ИмяРеквизитаКомментарийРуководителя;
			ЭлементКомментарийРуководителя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементКомментарийРуководителя.МногострочныйРежим = Истина;
			ЭлементКомментарийРуководителя.КнопкаВыбора = Истина;
			ЭлементКомментарийРуководителя.ПодсказкаВвода = НСтр("ru = 'Оставьте комментарий о работе сотрудника'");
			ЭлементКомментарийРуководителя.Ширина = 30;
			ЭлементКомментарийРуководителя.АвтоМаксимальнаяВысота = Ложь;
			ЭлементКомментарийРуководителя.МаксимальнаяВысота = 5;
			ЭлементКомментарийРуководителя.УстановитьДействие("НачалоВыбора", "Подключаемый_КомментарийНачалоВыбора");
			
		КонецЕсли;
		
		ПервыйВСписке = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыГруппыСтандарта(ИдентификаторСтроки)
	
	УдалитьЭлементФормы("ГруппаЗаголовокСтандарта_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ДекорацияОткрыть_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ДекорацияЗакрыть_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ДекорацияЗаголовок_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("СворачиваемаяГруппаСтандарта_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ОписаниеСтандарта_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ГруппаОценкиСтандарта_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ГруппаОценкаСотрудника_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ОценкаСотрудника_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ГруппаОценкаРуководителя_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ОценкаРуководителя_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ГруппаКомментарииКОценке_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("КомментарийСотрудника_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("КомментарийРуководителя_" + ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементФормы(ИмяЭлемента)
	
	ЭлементФормы = Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		Элементы.Удалить(ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСтрокиСтандарта(ИмяЭлемента)
	
	ПозицияРазделителя = СтрНайти(ИмяЭлемента, "_");
	Если ПозицияРазделителя = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторСтроки = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - ПозицияРазделителя);
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНеЗаполненнойОценкиСтандарта()
	
	Возврат НСтр("ru = '<...>'");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораОценкиСтандарта(ЭлементОценка, ОписаниеРеквизита, СотрудникРуководитель)
	
	ЭлементОценка.СписокВыбора.Очистить();
	
	Для Каждого ЭлементСписка Из ОписаниеРеквизита.ПредставленияОценок Цикл
		ЭлементОценка.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	ОписанияОценок = ОписаниеРеквизита.ОписанияОценок;
	
	Если СотрудникРуководитель = "Сотрудник" Тогда
		ЗначениеОценки = ЭтотОбъект[ОписаниеРеквизита.ИмяРеквизитаОценкаСотрудника];
	ИначеЕсли СотрудникРуководитель = "Руководитель" Тогда
		ЗначениеОценки = ЭтотОбъект[ОписаниеРеквизита.ИмяРеквизитаОценкаРуководителя];
	Иначе
		ЗначениеОценки = Неопределено;
	КонецЕсли;
	
	ЭлементСписка = ОписанияОценок.НайтиПоЗначению(ЗначениеОценки);
	Если ЭлементСписка <> Неопределено Тогда
		ОписаниеОценки = ЭлементСписка.Представление;
	Иначе
		ОписаниеОценки = "";
	КонецЕсли;
	
	ЭлементОценкаРасширеннаяПодсказка = Элементы[ЭлементОценка.Имя + "РасширеннаяПодсказка"];
	ЭлементОценкаРасширеннаяПодсказка.Заголовок = ?(ПустаяСтрока(ОписаниеОценки),
		ПредставлениеНеЗаполненнойОценкиСтандарта(), ОписаниеОценки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияОткрытьНажатие(Элемент)
	СвернутьРазвернутьГруппуСтандарта(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияЗакрытьНажатие(Элемент)
	СвернутьРазвернутьГруппуСтандарта(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияЗаголовокНажатие(Элемент)
	СвернутьРазвернутьГруппуСтандарта(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОценкаСтандартаПриИзменении(Элемент)
	
	Элементы[Элемент.Имя + "РасширеннаяПодсказка"].Заголовок = ОписаниеОценкиСтандарта(Элемент.Имя);
	ОценкаСтандартаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		Элемент.Имя,
		НСтр("ru = 'Комментарий к оценке'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьГруппуСтандарта(Знач ИмяЭлемента)
	
	ИдентификаторСтрокиСтандарта = ИмяЭлемента;
	ИдентификаторСтрокиСтандарта = СтрЗаменить(ИдентификаторСтрокиСтандарта, "ДекорацияОткрыть_", "");
	ИдентификаторСтрокиСтандарта = СтрЗаменить(ИдентификаторСтрокиСтандарта, "ДекорацияЗакрыть_", "");
	ИдентификаторСтрокиСтандарта = СтрЗаменить(ИдентификаторСтрокиСтандарта, "ДекорацияЗаголовок_", "");
	
	СвернутьГруппыПрочихСтандартов();
	ИзменитьСвернутостьГруппыСтандарта(ИдентификаторСтрокиСтандарта);
	
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы", 0.0001, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьГруппыПрочихСтандартов()
	
	Для Каждого СтрокаОписаниеРеквизитов Из Стандарты_ОписаниеДобавленныхРеквизитов Цикл
		Если СтрокаОписаниеРеквизитов.ИдентификаторСтроки = ИдентификаторСтрокиСтандарта Тогда
			Продолжить;
		КонецЕсли;
		ИзменитьСвернутостьГруппыСтандарта(СтрокаОписаниеРеквизитов.ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСвернутостьГруппыСтандарта(ИдентификаторСтроки, Свернуть = Неопределено)
	
	Элементы["СворачиваемаяГруппаСтандарта_" + ИдентификаторСтроки].Видимость = ?(Свернуть = Неопределено,
		Не Элементы["СворачиваемаяГруппаСтандарта_" + ИдентификаторСтроки].Видимость,
		Не Свернуть);
	Элементы["ДекорацияОткрыть_" + ИдентификаторСтроки].Видимость = ?(Свернуть = Неопределено,
		Не Элементы["ДекорацияОткрыть_" + ИдентификаторСтроки].Видимость,
		Свернуть);
	Элементы["ДекорацияЗакрыть_" + ИдентификаторСтроки].Видимость = ?(Свернуть = Неопределено,
		Не Элементы["ДекорацияЗакрыть_" + ИдентификаторСтроки].Видимость,
		Не Свернуть);
		
	УстановитьЗаголовокГруппыСтандарта(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	
	Если Элементы["ДекорацияОткрыть_" + ИдентификаторСтрокиСтандарта].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть_" + ИдентификаторСтрокиСтандарта];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть_" + ИдентификаторСтрокиСтандарта];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОценкаСтандартаПриИзмененииНаСервере()
	
	ПересчитатьИтоговуюОценкуПоСтандартам();
	ЗаполнитьЗначениеФактаПоказателяСтандартов();
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОценкиСтандарта(ИмяЭлемента)
	
	ИдентификаторСтроки = ИдентификаторСтрокиСтандарта(ИмяЭлемента);
	
	ЭтоОценкаСотрудника = СтрНайти(ИмяЭлемента, "ОценкаСотрудника_") > 0;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	НайденныеСтроки = Стандарты_ОписаниеДобавленныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() Тогда
		
		Если ЭтоОценкаСотрудника Тогда
			ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизитаОценкаСотрудника;
		Иначе
			ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизитаОценкаРуководителя;
		КонецЕсли;
		
		ЭлементСписка = НайденныеСтроки[0].ОписанияОценок.НайтиПоЗначению(ЭтотОбъект[ИмяРеквизита]);
		Если ЭлементСписка <> Неопределено Тогда
			Возврат ЭлементСписка.Представление;
		Иначе
			Возврат ПредставлениеНеЗаполненнойОценкиСтандарта();
		КонецЕсли;
		
	Иначе
		Возврат ПредставлениеНеЗаполненнойОценкиСтандарта();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовокГруппыСтандарта(ИдентификаторСтроки)
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	НайденныеСтроки = Стандарты_ОписаниеДобавленныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() Тогда
		
		СтрокаОписаниеРеквизитов = НайденныеСтроки[0];
		
		Если Элементы["ДекорацияОткрыть_" + ИдентификаторСтроки].Видимость Тогда
			
			ОценкаСотрудника = ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаСотрудника];
			ОценкаРуководителя = ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаРуководителя];
			
			ПредставлениеОценкиСотрудника = ПредставлениеОценкиСтандарта(ОценкаСотрудника,
				СтрокаОписаниеРеквизитов.ПредставленияОценок);
			ПредставлениеОценкиРуководителя = ПредставлениеОценкиСтандарта(ОценкаРуководителя,
				СтрокаОписаниеРеквизитов.ПредставленияОценок);
			
			ЗаголовокГруппыСтандарта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2 / %3",
				СтрокаОписаниеРеквизитов.ПредставлениеСтандарта,
				ПредставлениеОценкиСотрудника,
				ПредставлениеОценкиРуководителя);
		Иначе
			ЗаголовокГруппыСтандарта = СтрокаОписаниеРеквизитов.ПредставлениеСтандарта;
		КонецЕсли;
		
		Элементы["ДекорацияЗаголовок_" + ИдентификаторСтроки].Заголовок = ЗаголовокГруппыСтандарта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеОценкиСтандарта(ЗначениеОценки, ПредставленияОценок)
	
	Если ЗначениеЗаполнено(ЗначениеОценки) Тогда
		ЭлементСписка = ПредставленияОценок.НайтиПоЗначению(ЗначениеОценки);
		Если ЭлементСписка <> Неопределено Тогда
			ПредставлениеОценки = ЭлементСписка.Представление;
		Иначе
			ПредставлениеОценки = ПредставлениеНеЗаполненнойОценкиСтандарта();
		КонецЕсли;
	Иначе
		ПредставлениеОценки = ПредставлениеНеЗаполненнойОценкиСтандарта();
	КонецЕсли;
	
	Возврат ПредставлениеОценки;
	
КонецФункции

&НаСервере
Процедура ПересчитатьИтоговуюОценкуПоСтандартам()
	
	СуммаЗначенийОценокСУчетомВеса = 0;
	СуммаВесовСтандартов = 0;
	
	Для Каждого СтрокаОписаниеРеквизитов Из Стандарты_ОписаниеДобавленныхРеквизитов Цикл
		
		ЗначениеОценки = ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаРуководителя].Значение;
		ВесСтандарта = СтрокаОписаниеРеквизитов.Вес;
		
		СуммаЗначенийОценокСУчетомВеса = СуммаЗначенийОценокСУчетомВеса + ЗначениеОценки * ВесСтандарта;
		СуммаВесовСтандартов = СуммаВесовСтандартов + ВесСтандарта;
		
	КонецЦикла;
	
	Объект.ИтоговаяОценкаПоСтандартам = ?(СуммаВесовСтандартов <> 0, СуммаЗначенийОценокСУчетомВеса / СуммаВесовСтандартов, 0);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеФактаПоказателяСтандартов()
	
	ЭлементыТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ЭлементыТипыПоказателей Цикл
		
		ПоказательУтвержденияСтандартов = СтрокаТипПоказателя.Показатель.ПоказательУтвержденияСтандартов;
		
		Если Не СтрокаТипПоказателя.Матричный
			Или Не ЗначениеЗаполнено(ПоказательУтвержденияСтандартов) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыПоказателиЭффективности = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказательЭффективности Из ЭлементыПоказателиЭффективности Цикл 
			
			Если СтрокаПоказательЭффективности.Показатель <> ПоказательУтвержденияСтандартов Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПоказательЭффективности.Факт = Объект.ИтоговаяОценкаПоСтандартам;
			
			ПересчитатьЗначенияПоказателя(СтрокаПоказательЭффективности.ПолучитьИдентификатор());
			ПересчитатьИтоговыеЗначенияПоказателей(СтрокаПоказательЭффективности.ПолучитьРодителя().ПолучитьИдентификатор());
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЭтоРасчетТекущегоПользователя = (ТекущийПользователь.ФизическоеЛицо = Объект.Сотрудник.ФизическоеЛицо); 
	Если ЭтоРасчетТекущегоПользователя Тогда 
		ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	Иначе
		ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь() ИЛИ РольДоступна("УБ_ДолжностьHR");  
	КонецЕсли;
	ОткрытРуководителем = ДокументОткрытРуководителем(ТекущийПользователь);
	ИспользуетсяБезокладнаяСистемаПоказателей = ПолучитьФункциональнуюОпцию("УБ_ИспользоватьБезокладнуюСистемуПоказателей");
	ДоступнаСтраницаРаспределенияПремии = ДоступностьСтраницыРаспределенияПремии();
	
	Элементы.ПланУтвержден.Пометка = Объект.ПланУтвержден;
	Элементы.ФактУтвержден.Пометка = Объект.ФактУтвержден;
	
	ЗаполнитьЗависимостьПоказателейВФормулахРасчета();
	
	Начисления = Объект.Начисления.Выгрузить();
	ИтоговыеНачисления = Объект.ИтоговыеНачисления.Выгрузить();
	ЗаполнитьДеревоНачислений(Начисления, ИтоговыеНачисления);
	
	ЗаполнитьЗакладкуСтандартов();
	
	ЗаполнитьРасчетЭффективностиТаблицыРаспределенияПремииПодразделения();
	
	ЗаполнитьКарточкуРассчетаЭффективности();
	
	НастроитьДоступностьЭлементовФормы(ЭтотОбъект);
	УстановитьДоступностьКомандыОтменитьИсправления(Элементы.ДеревоНачисленийОтменитьИсправления,
		ДеревоНачислений,
		Объект.ПланУтвержден,
		ЭтоРасчетТекущегоПользователя,
		ЭтоПолноправныйПользователь);
	
	ЗаполнитьСписокВыбораПоказателейРасчетнойБазы();
	
КонецПроцедуры

&НаСервере
Функция ДокументОткрытРуководителем(ТекущийПользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РуководителиПодразделений.Пользователь КАК Руководитель
		|ИЗ
		|	РегистрСведений.УБ_НазначенныеРуководителиПодразделений.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение) КАК РуководителиПодразделений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДелегированныеСотрудники.ЗаместительРуководителя
		|ИЗ
		|	РегистрСведений.УБ_ДелегированныеСотрудникиПодразделения.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение
		|				И (Сотрудник = ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка)
		|					ИЛИ Сотрудник = &Сотрудник)) КАК ДелегированныеСотрудники";
	
	УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Период", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОткрытРуководителем = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Руководитель = ТекущийПользователь Тогда
			ОткрытРуководителем = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОткрытРуководителем;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРуководителейИПредДокумент()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РуководителиПодразделений.Руководитель КАК Руководитель
		|ИЗ
		|	РегистрСведений.УБ_НазначенныеРуководителиПодразделений.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение) КАК РуководителиПодразделений";
	Запрос.УстановитьПараметр("Период", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		МассивФИО = СтрРазделить(Строка(Выборка.Руководитель)," ",Ложь);
		Руководитель = ?(МассивФИО.Количество()>=1,МассивФИО[0],"")+ " " +?(МассивФИО.Количество()>=2,МассивФИО[1],"")+ " " +?(МассивФИО.Количество()>=3,МассивФИО[2],""); 
	КонецЕсли;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДелегированныеСотрудники.ЗаместительРуководителя
		|ИЗ
		|	РегистрСведений.УБ_ДелегированныеСотрудникиПодразделения.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение
		|				И (Сотрудник = ЗНАЧЕНИЕ(Справочник.УБ_Сотрудники.ПустаяСсылка)
		|					ИЛИ Сотрудник = &Сотрудник)) КАК ДелегированныеСотрудники";
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("Период", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		МассивФИО = СтрРазделить(Строка(Выборка.ЗаместительРуководителя)," ",Ложь);
		Зам_Руководителя = ?(МассивФИО.Количество()>=1,МассивФИО[0],"")+ " " +?(МассивФИО.Количество()>=2,МассивФИО[1],"")+ " " +?(МассивФИО.Количество()>=3,МассивФИО[2],"");	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
	              |	УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.РасчетЭффективностиСотрудника КАК РасчетЭффективностиСотрудника
	              |ИЗ
	              |	РегистрСведений.УБ_СостоянияДокументовРасчетаЭффективностиСотрудников КАК УБ_СостоянияДокументовРасчетаЭффективностиСотрудников
	              |ГДЕ
	              |	УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.Сотрудник = &Сотрудник
	              |	И УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.Подразделение = &Подразделение
	              |	И УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.Организация = &Организация
	              |	И УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.КонецПериода < &Период
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.НачалоПериода УБЫВ";
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("Период", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредыдущийДокумент = Выборка.РасчетЭффективностиСотрудника;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
	              |	УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.РасчетЭффективностиСотрудника КАК РасчетЭффективностиСотрудника
	              |ИЗ
	              |	РегистрСведений.УБ_СостоянияДокументовРасчетаЭффективностиСотрудников КАК УБ_СостоянияДокументовРасчетаЭффективностиСотрудников
	              |ГДЕ
	              |	УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.Сотрудник = &Сотрудник
	              |	И УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.Подразделение = &Подразделение
	              |	И УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.Организация = &Организация
	              |	И УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.КонецПериода > &Период
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.НачалоПериода";
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("Период", Объект.КонецПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СледующийДокумент = Выборка.РасчетЭффективностиСотрудника;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьЗначенияНачисленийВТабличныеЧасти(ДокументОбъект)
	
	ДокументОбъект.Начисления.Очистить();
	ДокументОбъект.ИтоговыеНачисления.Очистить();
	
	ЭлементыТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ЭлементыТипыПоказателей Цикл
		
		СтрокаИтоговыеНачисления = ДокументОбъект.ИтоговыеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтоговыеНачисления, СтрокаТипПоказателя);
		СтрокаИтоговыеНачисления.ТипПоказателя = СтрокаТипПоказателя.Показатель;
		
		ЭлементыПоказателиЭффективности = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказательЭффективности Из ЭлементыПоказателиЭффективности Цикл
			
			СтрокаНачисления = ДокументОбъект.Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтрокаПоказательЭффективности);
			СтрокаНачисления.ПоказательЭффективности = СтрокаПоказательЭффективности.Показатель;
			СтрокаНачисления.ТипПоказателя = СтрокаТипПоказателя.Показатель;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияОценокСтандартовВТабличныеЧасти(ДокументОбъект)
	
	Для Каждого СтрокаОписаниеРеквизитов Из Стандарты_ОписаниеДобавленныхРеквизитов Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Стандарт", СтрокаОписаниеРеквизитов.Стандарт);
		
		СтрокиОценкиСотрудника = ДокументОбъект.СтандартыОценкиСотрудника.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаОценкаСотрудника Из СтрокиОценкиСотрудника Цикл
			СтрокаОценкаСотрудника.Оценка = ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаСотрудника];
			СтрокаОценкаСотрудника.Комментарий = ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаКомментарийСотрудника];
		КонецЦикла;
		
		СтрокиОценкиРуководителя = ДокументОбъект.СтандартыОценкиРуководителя.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаОценкаРуководителя Из СтрокиОценкиРуководителя Цикл
			СтрокаОценкаРуководителя.Оценка = ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаОценкаРуководителя];
			СтрокаОценкаРуководителя.Комментарий = ЭтотОбъект[СтрокаОписаниеРеквизитов.ИмяРеквизитаКомментарийРуководителя];
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтраницыДокумента()
	
	Объект.Начисления.Очистить();
	Объект.ИтоговыеНачисления.Очистить();
	Объект.СтандартыОценкиРуководителя.Очистить();
	Объект.СтандартыОценкиСотрудника.Очистить();
	Объект.РаспределениеПремииПодразделения.Очистить();
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоНачислений");
	ДеревоОбъект.Строки.Очистить();
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоНачислений");
	
	ЗаполнитьЗакладкуСтандартов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкуРассчетаЭффективности()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	КарточкаРасчетаЭффективности = Документы.УБ_РасчетЭффективностиСотрудников.ТабличныйДокументКарточкиРасчетаЭффективности(Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастроитьДоступностьЭлементовФормы(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ОткрытРуководителем = Форма.ОткрытРуководителем;
	ЭтоРасчетТекущегоПользователя = Форма.ЭтоРасчетТекущегоПользователя;
	ЭтоПолноправныйПользователь = Форма.ЭтоПолноправныйПользователь;
	Стандарты_ОписаниеДобавленныхРеквизитов = Форма.Стандарты_ОписаниеДобавленныхРеквизитов;
	ДоступнаСтраницаРаспределенияПремии = Форма.ДоступнаСтраницаРаспределенияПремии;
	
	ПолныйДоступКДокументу = ЭтоПолноправныйПользователь 
		Или ОткрытРуководителем И Не ЭтоРасчетТекущегоПользователя;
	
	Элементы.СтраницаКарточкаРасчетаЭффективности.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.ПланУтвержден.Доступность = ПолныйДоступКДокументу;
	Элементы.ФактУтвержден.Доступность = ПолныйДоступКДокументу;
	Элементы.ДеревоНачисленийГруппаДобавить.Видимость = ПолныйДоступКДокументу;
	Элементы.ДеревоНачисленийГруппаДобавить.Доступность = Не Объект.ПланУтвержден;
	Элементы.ДеревоНачислений.ИзменятьСоставСтрок = ПолныйДоступКДокументу И Не Объект.ПланУтвержден;
	Элементы.ДеревоНачисленийЗаполнитьФакт.Доступность = Не Объект.ФактУтвержден;
	
	Элементы.НачалоПериода.ТолькоПросмотр = Объект.ПланУтвержден;
	Элементы.КонецПериода.ТолькоПросмотр = Объект.ПланУтвержден;
	Элементы.ПериодРасчета.ТолькоПросмотр = Объект.ПланУтвержден;
	Элементы.ВыбратьПериод.Доступность = Не Объект.ПланУтвержден;
	Элементы.Сотрудник.ТолькоПросмотр = Объект.ПланУтвержден;
	Элементы.Организация.ТолькоПросмотр = Объект.ПланУтвержден;
	Элементы.Подразделение.ТолькоПросмотр = Объект.ПланУтвержден;
	
	ЗапретРедактированияОценокСотрудника = Объект.ФактУтвержден
		Или Не ЭтоРасчетТекущегоПользователя;
	ЗапретРедактированияОценокРуководителя = Объект.ФактУтвержден
		Или Не (ОткрытРуководителем И Не ЭтоРасчетТекущегоПользователя);
	
	Для Каждого СтрокаСтандарты Из Стандарты_ОписаниеДобавленныхРеквизитов Цикл
		
		Если ЭтоПолноправныйПользователь И Не Объект.ФактУтвержден Тогда
			Элементы[СтрокаСтандарты.ИмяРеквизитаОценкаСотрудника].ТолькоПросмотр = Ложь;
			Элементы[СтрокаСтандарты.ИмяРеквизитаКомментарийСотрудника].ТолькоПросмотр = Ложь;
			
			Элементы[СтрокаСтандарты.ИмяРеквизитаОценкаРуководителя].ТолькоПросмотр = Ложь;
			Элементы[СтрокаСтандарты.ИмяРеквизитаКомментарийРуководителя].ТолькоПросмотр = Ложь;
		Иначе
			Элементы[СтрокаСтандарты.ИмяРеквизитаОценкаСотрудника].ТолькоПросмотр = ЗапретРедактированияОценокСотрудника;
			Элементы[СтрокаСтандарты.ИмяРеквизитаКомментарийСотрудника].ТолькоПросмотр = ЗапретРедактированияОценокСотрудника;
			
			Элементы[СтрокаСтандарты.ИмяРеквизитаОценкаРуководителя].ТолькоПросмотр = ЗапретРедактированияОценокРуководителя;
			Элементы[СтрокаСтандарты.ИмяРеквизитаКомментарийРуководителя].ТолькоПросмотр = ЗапретРедактированияОценокРуководителя;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ДекорацияПустаяСтраницаСтандартов.Видимость = (Объект.СтандартыОценкиСотрудника.Количество() = 0);
	
	Элементы.СтраницаРаспределениеПремииПодразделения.Видимость = ДоступнаСтраницаРаспределенияПремии;
	Элементы.ПоказательРасчетнойБазы.ТолькоПросмотр = Объект.ФактУтвержден;
	Элементы.СуммаКРаспределению.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ПоказательРасчетнойБазы)
		Или Объект.ФактУтвержден;
	Элементы.РаспределениеПремииПодразделения.ТолькоПросмотр = Объект.ФактУтвержден;
	Элементы.РаспределениеПремииПодразделенияПодобратьСотрудниковДляРаспределенияПремии.Доступность = Не Объект.ФактУтвержден;
	Элементы.РаспределениеПремииПодразделенияРассчитатьПремииСотрудниковПодразделения.Доступность = Не Объект.ФактУтвержден;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыОтменитьИсправления(КомандаОтменитьИсправления, ДеревоНачислений, ПланУтвержден, ЭтоРасчетТекущегоПользователя, ЭтоПолноправныйПользователь)
	
	ЕстьИсправления = Ложь;
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			
			Если СтрокаПоказатель.Расценка <> СтрокаПоказатель.УтвержденноеЗначениеРасценка
				И ЗначениеЗаполнено(СтрокаПоказатель.УтвержденноеЗначениеРасценка) Тогда
				ЕстьИсправления = Истина;
			КонецЕсли;
			
			Если СтрокаПоказатель.Вес <> СтрокаПоказатель.УтвержденноеЗначениеВес
				И ЗначениеЗаполнено(СтрокаПоказатель.УтвержденноеЗначениеВес) Тогда
				ЕстьИсправления = Истина;
			КонецЕсли;
			
			Если СтрокаПоказатель.План <> СтрокаПоказатель.УтвержденноеЗначениеПлан
				И ЗначениеЗаполнено(СтрокаПоказатель.УтвержденноеЗначениеПлан) Тогда
				ЕстьИсправления = Истина;
			КонецЕсли;
			
			Если СтрокаПоказатель.КритическоеЗначение <> СтрокаПоказатель.УтвержденноеКритическоеЗначение
				И ЗначениеЗаполнено(СтрокаПоказатель.УтвержденноеКритическоеЗначение) Тогда
				ЕстьИсправления = Истина;
			КонецЕсли;
			
			Если СтрокаПоказатель.Факт <> СтрокаПоказатель.РассчитанноеЗначениеФакта
				И ЗначениеЗаполнено(СтрокаПоказатель.РассчитанноеЗначениеФакта) Тогда
				ЕстьИсправления = Истина;
			КонецЕсли;
			
			Если ЕстьИсправления Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьИсправления Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	КомандаОтменитьИсправления.Доступность = (ЭтоПолноправныйПользователь Или Не ЭтоРасчетТекущегоПользователя)
		И ЕстьИсправления
		И Не ПланУтвержден;
	
КонецПроцедуры

&НаСервере
Процедура ПланФактУтвержденНаСервере()
	
	НастроитьДоступностьЭлементовФормы(ЭтотОбъект);
	УстановитьДоступностьКомандыОтменитьИсправления(Элементы.ДеревоНачисленийОтменитьИсправления,
		ДеревоНачислений,
		Объект.ПланУтвержден,
		ЭтоРасчетТекущегоПользователя,
		ЭтоПолноправныйПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПослеЗакрытияВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗатеретьИсправления = Ложь;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗатеретьИсправления = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьФактНаСервере(ЗатеретьИсправления);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланПослеЗакрытияВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗатеретьИсправления = Ложь;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗатеретьИсправления = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПланНаСервере(ЗатеретьИсправления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактНаСервере(ЗатеретьИсправления = Истина)
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			
			// КДА++
			Если СтрокаПоказатель.ВариантРасчетаЗначенияФакта <> Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя 
				И СтрокаПоказатель.ВариантРасчетаЗначенияФакта <> Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаУстановкиФакта Тогда
				Продолжить;
			КонецЕсли;
			// КДА--
			
			ПараметрыРасчета = Новый Структура;
			ПараметрыРасчета.Вставить("Организация", Объект.Организация);
			ПараметрыРасчета.Вставить("Подразделение", Объект.Подразделение);
			ПараметрыРасчета.Вставить("Сотрудник", Объект.Сотрудник);
			ПараметрыРасчета.Вставить("ФизическоеЛицо", Объект.Сотрудник.ФизическоеЛицо);
			ПараметрыРасчета.Вставить("НачалоПериода", Объект.НачалоПериода);
			ПараметрыРасчета.Вставить("КонецПериода", КонецДня(Объект.КонецПериода));
			
			ДанныеПоказателя = УБ_РасчетПоказателейЭффективности.РассчитатьЗначенияПоказателяЭффективности(СтрокаПоказатель.Показатель, ПараметрыРасчета);
			Если ДанныеПоказателя <> Неопределено И ДанныеПоказателя.Количество() Тогда
				Если ЗатеретьИсправления Тогда
					СтрокаПоказатель.Факт = ДанныеПоказателя[0].Факт;
				КонецЕсли;
				СтрокаПоказатель.РассчитанноеЗначениеФакта = ДанныеПоказателя[0].Факт;
				
				ПересчитатьЗначенияПоказателя(СтрокаПоказатель.ПолучитьИдентификатор());
				ПересчитатьИтоговыеЗначенияПоказателей(СтрокаТипПоказателя.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланНаСервере(ЗатеретьИсправления = Истина)
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл
			
			Если СтрокаПоказатель.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя Тогда
				
				ПараметрыРасчета = Новый Структура;
				ПараметрыРасчета.Вставить("Организация", Объект.Организация);
				ПараметрыРасчета.Вставить("Подразделение", Объект.Подразделение);
				ПараметрыРасчета.Вставить("Сотрудник", Объект.Сотрудник);
				ПараметрыРасчета.Вставить("ФизическоеЛицо", Объект.Сотрудник.ФизическоеЛицо);
				ПараметрыРасчета.Вставить("НачалоПериода", Объект.НачалоПериода);
				ПараметрыРасчета.Вставить("КонецПериода", КонецДня(Объект.КонецПериода));
				
				ДанныеПоказателя = УБ_РасчетПоказателейЭффективности.РассчитатьЗначенияПланаПоказателяЭффективности(СтрокаПоказатель.Показатель, ПараметрыРасчета);
				Если ДанныеПоказателя <> Неопределено И ДанныеПоказателя.Количество() Тогда
					Если ЗатеретьИсправления Тогда
						СтрокаПоказатель.План = ДанныеПоказателя[0].План;
					КонецЕсли;
					СтрокаПоказатель.РассчитанноеЗначениеПлана = ДанныеПоказателя[0].План;
					
					ПересчитатьЗначенияПоказателя(СтрокаПоказатель.ПолучитьИдентификатор());
					ПересчитатьИтоговыеЗначенияПоказателей(СтрокаТипПоказателя.ПолучитьИдентификатор());
				КонецЕсли;
			ИначеЕсли СтрокаПоказатель.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзМодели Тогда
				
				ПолученныйПлан = ПолучитьПланПоказателя(Объект.МодельПланированияЭффективности, Объект.Грейд, Объект.ВерсияГрейда, СтрокаПоказатель.ТипПоказателя, СтрокаПоказатель.Показатель);
				Если ПолученныйПлан = Неопределено Тогда
					Сообщить("Значение плана не найдено");
				Иначе
					СтрокаПоказатель.План = ПолученныйПлан;
				КонецЕсли;
			ИначеЕсли СтрокаПоказатель.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаПланирования Тогда
				
				НайтиПланПоказателяПоСотруднику(Объект.Сотрудник,СтрокаПоказатель.Показатель,Объект.НачалоПериода,КонецДня(Объект.КонецПериода));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры 


&НаСервере
Функция НайтиПланПоказателяПоСотруднику(Сотрудник,Показатель,Началопериода,КонецПериода)
	
	Отсутствия = ПолучитьДатыОтсутствия();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УБ_ПланПоПоказателям.ТекущееЗначение КАК ТекущееЗначение
	               |ИЗ
	               |	РегистрСведений.УБ_ПланПоПоказателям КАК УБ_ПланПоПоказателям
	               |ГДЕ
	               |	УБ_ПланПоПоказателям.Показатель = &Показатель
	               |	И УБ_ПланПоПоказателям.Назначение = &Назначение
	               |	И УБ_ПланПоПоказателям.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И УБ_ПланПоПоказателям.ДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И НЕ УБ_ПланПоПоказателям.ДатаНачала В (&Отсутствия)";
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Запрос.УстановитьПараметр("Назначение",Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачала",Началопериода);
	Запрос.УстановитьПараметр("ДатаОкончания",КонецПериода);
	Запрос.УстановитьПараметр("Отсутствия",Отсутствия);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.Итог("ТекущееЗначение");
	
КонецФункции

&НаСервере
Функция ПолучитьДатыОтсутствия()
	
	Отсутствия = Новый Массив;
	Для каждого Строка из Объект.Отсутствия Цикл
		ДатаПересчета = НачалоДня(Строка.ДатаНачала);
		Пока ДатаПересчета <= НачалоДня(Строка.ДатаОкончания) Цикл
			Отсутствия.Добавить(ДатаПересчета);
			ДатаПересчета = ДатаПересчета+60*60*24;	
		КонецЦикла;
	КонецЦикла;
	
	Возврат Отсутствия;
	
КонецФункции	

&НаСервере
Функция ПолучитьПланПоказателя(МодельПланированияЭффективности, Грейд, ВерсияГрейда, ТипПоказателя, ПоказательЭффективности)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.План КАК План
	               |ИЗ
	               |	РегистрСведений.УБ_СоставПоказателейМоделейПланирования.СрезПоследних КАК УБ_СоставПоказателейМоделейПланированияСрезПоследних
	               |ГДЕ
	               |	УБ_СоставПоказателейМоделейПланированияСрезПоследних.МодельПланированияЭффективности = &МодельПланированияЭффективности
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.ПоказательЭффективности = &ПоказательЭффективности
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.ТипПоказателя = &ТипПоказателя
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.Грейд = &Грейд
	               |	И УБ_СоставПоказателейМоделейПланированияСрезПоследних.ВерсияГрейда = &ВерсияГрейда";
	Запрос.УстановитьПараметр("МодельПланированияЭффективности",МодельПланированияЭффективности);
	Запрос.УстановитьПараметр("Грейд",Грейд);
	Запрос.УстановитьПараметр("ВерсияГрейда",ВерсияГрейда);
	Запрос.УстановитьПараметр("ТипПоказателя",ТипПоказателя);
	Запрос.УстановитьПараметр("ПоказательЭффективности",ПоказательЭффективности);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.План;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Функция ЕстьИсправленияРассчитанногоФакта()
	
	ЕстьИсправления = Ложь;
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл	
			// КДА++
			Если (СтрокаПоказатель.ВариантРасчетаЗначенияФакта = ПредопределенноеЗначение("Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя") ИЛИ
				СтрокаПоказатель.ВариантРасчетаЗначенияФакта = ПредопределенноеЗначение("Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаУстановкиФакта"))
				И СтрокаПоказатель.Факт <> СтрокаПоказатель.РассчитанноеЗначениеФакта Тогда
				ЕстьИсправления = Истина;
				Прервать;
			КонецЕсли;
			// КДА--
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьИсправления;
	
КонецФункции

&НаКлиенте
Функция ЕстьИсправленияРассчитанногоПлана()
	
	ЕстьИсправления = Ложь;
	
	ГруппировкаТипыПоказателей = ДеревоНачислений.ПолучитьЭлементы();
	Для Каждого СтрокаТипПоказателя Из ГруппировкаТипыПоказателей Цикл
		
		ГруппировкаПоказатели = СтрокаТипПоказателя.ПолучитьЭлементы();
		Для Каждого СтрокаПоказатель Из ГруппировкаПоказатели Цикл	
			Если (СтрокаПоказатель.ВариантРасчетаЗначенияПлана = ПредопределенноеЗначение("Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя") ИЛИ
				СтрокаПоказатель.ВариантРасчетаЗначенияПлана = ПредопределенноеЗначение("Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаУстановкиФакта"))
				И СтрокаПоказатель.План <> СтрокаПоказатель.РассчитанноеЗначениеПлана Тогда
				ЕстьИсправления = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьИсправления;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаПоУмолчанию(ИмяРеквизита)
	
	Возврат УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию(ИмяРеквизита);
	
КонецФункции

&НаСервере
Функция АдресСпискаПодобранныхСотрудников(Знач ТаблицаСотрудников)
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаСотрудников.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор); 
	
КонецФункции

&НаКлиенте
Процедура ПредыдущийДокументНажатие1(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПредыдущийДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ПредыдущийДокумент);
	
	ОткрытьФорму("Документ.УБ_РасчетЭффективностиСотрудников.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийДокументНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(СледующийДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СледующийДокумент);
	
	ОткрытьФорму("Документ.УБ_РасчетЭффективностиСотрудников.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПланированияЭффективностиНажатие(Элемент, СтандартнаяОбработка)
	
	ПоказатьЗначение(,Объект.МодельПланированияЭффективности);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактПоказателяНаСервере(Идентификатор,ЗатеретьИсправления = Истина)
	
	СтрокаПоказатель = ДеревоНачислений.НайтиПоИдентификатору(Идентификатор);
	Если ТипЗнч(СтрокаПоказатель.Показатель) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности") Тогда
		// КДА++
		Если СтрокаПоказатель.ВариантРасчетаЗначенияФакта <> Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя 
			И СтрокаПоказатель.ВариантРасчетаЗначенияФакта <> Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаУстановкиФакта Тогда
			Возврат;
		КонецЕсли;
		// КДА--
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Организация", Объект.Организация);
		ПараметрыРасчета.Вставить("Подразделение", Объект.Подразделение);
		ПараметрыРасчета.Вставить("Сотрудник", Объект.Сотрудник);
		ПараметрыРасчета.Вставить("ФизическоеЛицо", Объект.Сотрудник.ФизическоеЛицо);
		ПараметрыРасчета.Вставить("НачалоПериода", Объект.НачалоПериода);
		ПараметрыРасчета.Вставить("КонецПериода", КонецДня(Объект.КонецПериода));
		
		ДанныеПоказателя = УБ_РасчетПоказателейЭффективности.РассчитатьЗначенияПоказателяЭффективности(СтрокаПоказатель.Показатель, ПараметрыРасчета);
		Если ДанныеПоказателя <> Неопределено И ДанныеПоказателя.Количество() Тогда
			Если ЗатеретьИсправления Тогда
				СтрокаПоказатель.Факт = ДанныеПоказателя[0].Факт;
			КонецЕсли;
			СтрокаПоказатель.РассчитанноеЗначениеФакта = ДанныеПоказателя[0].Факт;
			
			ПересчитатьЗначенияПоказателя(СтрокаПоказатель.ПолучитьИдентификатор());
			ПересчитатьИтоговыеЗначенияПоказателей(СтрокаПоказатель.ПолучитьРодителя().ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланПоказателяНаСервере(Идентификатор,ЗатеретьИсправления = Истина)
	
	СтрокаПоказатель = ДеревоНачислений.НайтиПоИдентификатору(Идентификатор);
	Если ТипЗнч(СтрокаПоказатель.Показатель) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности") Тогда
		Если СтрокаПоказатель.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя Тогда
			
			ПараметрыРасчета = Новый Структура;
			ПараметрыРасчета.Вставить("Организация", Объект.Организация);
			ПараметрыРасчета.Вставить("Подразделение", Объект.Подразделение);
			ПараметрыРасчета.Вставить("Сотрудник", Объект.Сотрудник);
			ПараметрыРасчета.Вставить("ФизическоеЛицо", Объект.Сотрудник.ФизическоеЛицо);
			ПараметрыРасчета.Вставить("НачалоПериода", Объект.НачалоПериода);
			ПараметрыРасчета.Вставить("КонецПериода", КонецДня(Объект.КонецПериода));
			
			ДанныеПоказателя = УБ_РасчетПоказателейЭффективности.РассчитатьЗначенияПланаПоказателяЭффективности(СтрокаПоказатель.Показатель, ПараметрыРасчета);
			Если ДанныеПоказателя <> Неопределено И ДанныеПоказателя.Количество() Тогда
				Если ЗатеретьИсправления Тогда
					СтрокаПоказатель.План = ДанныеПоказателя[0].План;
				КонецЕсли;
				СтрокаПоказатель.РассчитанноеЗначениеПлана = ДанныеПоказателя[0].План;
				
				ПересчитатьЗначенияПоказателя(СтрокаПоказатель.ПолучитьИдентификатор());
				ПересчитатьИтоговыеЗначенияПоказателей(СтрокаПоказатель.ПолучитьРодителя().ПолучитьИдентификатор());
			КонецЕсли;
		ИначеЕсли СтрокаПоказатель.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзМодели Тогда
			
			ПолученныйПлан = ПолучитьПланПоказателя(Объект.МодельПланированияЭффективности, Объект.Грейд, Объект.ВерсияГрейда, СтрокаПоказатель.ТипПоказателя, СтрокаПоказатель.Показатель);
			Если ПолученныйПлан = Неопределено Тогда
				Сообщить("Значение плана не найдено");
			Иначе
				СтрокаПоказатель.План = ПолученныйПлан;
			КонецЕсли;
		ИначеЕсли СтрокаПоказатель.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзДокументаПланирования Тогда
			
			НайтиПланПоказателяПоСотруднику(Объект.Сотрудник,СтрокаПоказатель.Показатель,Объект.НачалоПериода,КонецДня(Объект.КонецПериода));
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПланПоказателя(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	
	ЗаполнитьПланПоказателяНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоказателя(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	
	ЗаполнитьФактПоказателяНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти