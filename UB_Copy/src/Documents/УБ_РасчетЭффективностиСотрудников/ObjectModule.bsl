#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Сотрудник") Тогда
			КадровыеДанные = УБ_КадровыйУчет.КадровыеДанныеСотрудников(ДанныеЗаполнения.Сотрудник, НачалоПериода);
			Если КадровыеДанные.Количество() Тогда
				ТекущиеКадровыеДанные = КадровыеДанные[0];
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТекущиеКадровыеДанные);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Организация")
			И Не ЗначениеЗаполнено(Организация) Тогда
			Организация = ДанныеЗаполнения.Организация
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Подразделение")
			И Не ЗначениеЗаполнено(Подразделение) Тогда
			Подразделение = ДанныеЗаполнения.Подразделение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			Если Не ЗначениеЗаполнено(Организация)
				Или Организация <> Подразделение.Владелец Тогда
				Организация = Подразделение.Владелец;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УБ_ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.УБ_РасчетЭффективностиСотрудников.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	УБ_ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	РегистрыСведений.УБ_СостоянияДокументовРасчетаЭффективностиСотрудников.ОтразитьСостоянияДокументовРасчетаЭффективностиСотрудников(
		ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.УБ_ДанныеПоказателейРасчетаЗарплаты.ОтразитьДанныеПоказателейРасчетаЗарплаты(
		ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.УБ_ДанныеНачисленийРасчетаЭффективностиСотрудников.ОтразитьДанныеНачисленийРасчетаЭффективностиСотрудников(
		ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудников.ОтразитьДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудников(
		ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.УБ_КоэффициентыРаспределенияБезокладнойСистемыПоказателей.ОтразитьКоэффициентыРаспределенияБезокладнойСистемыПоказателей(
		ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.УБ_КоэффициентыРаспределенияБезокладнойСистемыПоказателейВакантныхПозиций.ОтразитьКоэффициентыРаспределенияБезокладнойСистемыПоказателей(
		ДополнительныеСвойства, Движения, Отказ);	
		
	УБ_ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	УБ_ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если СтандартыОценкиСотрудника.Количество() И СтандартыОценкиСотрудника.Итог("Вес") <> 100 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Общий вес стандартов сотрудника должен равняться ""100""'"),
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СтандартыОценкиСотрудника", 1, "Вес"),
			,
			Отказ);
	КонецЕсли;
	
	Если СтандартыОценкиРуководителя.Количество() И СтандартыОценкиРуководителя.Итог("Вес") <> 100 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Общий вес стандартов руководителя должен равняться ""100""'"),
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СтандартыОценкиРуководителя", 1, "Вес"),
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УБ_ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	УБ_ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	УБ_ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	УБ_ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	//++Корректировка, возможно, не требуется. Индикаторы заполняются динамически при создании формы
	КорректировкаИндикаторов();
	//--
КонецПроцедуры

Процедура КорректировкаИндикаторов()
	
	Для Каждого СтрокаНачислений Из Начисления Цикл
		
		Если СтрокаНачислений.ПроцентВыполнения <= СтрокаНачислений.ПоказательЭффективности.НегативноеОтклонениеНормыДо И НЕ СтрокаНачислений.План = 0 Тогда
			СтрокаНачислений.ИндексКартинкиГраницЭффективности = 4;
		ИначеЕсли СтрокаНачислений.ПроцентВыполнения >= СтрокаНачислений.ПоказательЭффективности.ПозитивноеОтклонениеНормыОт И НЕ СтрокаНачислений.План = 0 Тогда
			СтрокаНачислений.ИндексКартинкиГраницЭффективности = 9;
		ИначеЕсли СтрокаНачислений.ПроцентВыполнения >= СтрокаНачислений.ПоказательЭффективности.ПограничноеОтклонениеНормыОт 
			И СтрокаНачислений.ПроцентВыполнения <= СтрокаНачислений.ПоказательЭффективности.ПограничноеОтклонениеНормыДо И Не СтрокаНачислений.План = 0 Тогда
			СтрокаНачислений.ИндексКартинкиГраницЭффективности = 8;
		Иначе СтрокаНачислений.ИндексКартинкиГраницЭффективности = 0; 
		КонецЕсли;				
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Организация = Справочники.Организации.ПустаяСсылка();
	Подразделение = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение");
	Сотрудник = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Сотрудник");
	Должность = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Должность");
	МодельПланированияЭффективности = Справочники.УБ_МоделиПланированияЭффективности.ПустаяСсылка();
	Грейд = Справочники.УБ_Грейды.ПустаяСсылка();
	ПланУтвержден = Ложь;
	ФактУтвержден = Ложь;
	ИтоговаяОценкаПоСтандартам = 0;
	ВариантРасчетаПремии = Перечисления.УБ_ВариантыРасчетаПремии.ПустаяСсылка();
	ШкалаПоказателей = Справочники.УБ_ШкалыПоказателей.ПустаяСсылка();
	Комментарий = "";
	
	Начисления.Очистить();
	ИтоговыеНачисления.Очистить();
	СтандартыОценкиРуководителя.Очистить();
	СтандартыОценкиСотрудника.Очистить();
	РаспределениеПремииПодразделения.Очистить();
	Отсутствия.Очистить();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();
	НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецПериода = КонецМесяца(НачалоПериода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли