////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	// Заполним реквизиты формы из параметров.
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, 
		"Показатель, Значение, ЕдиноеЗначениеПоказателя, СчитатьНарастающийИтог,
		|РазбитьНаПериоды, ПериодичностьПланирования, ЭтоНоваяСтрока,
		|ПериодичностьКонтроля, Календарь");
	
	УБ_ПланированиеПоказателейСервер.УстановитьОграничениеТипаЗначения(показатель, Значение);
	ТипРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "ТипРасчета");
	
	УБ_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,"НегативноеОтклонениеНормыДо, ПограничноеОтклонениеНормыОт, ПограничноеОтклонениеНормыДо, ПозитивноеОтклонениеНормыОт");
	
	УстановитьДоступностьЭлементов(Параметры); 
	ИспользоватьОтклонения = ПолучитьФункциональнуюОпцию("УБ_ИспользоватьОтклоненияВТабличнойЧастиДокументовПланирования") ;
	Элементы.ГраницыНормыЭффективностиПоказателей.Видимость = ИспользоватьОтклонения;	
	Если ИспользоватьОтклонения Тогда
		Если ЭтоНоваяСтрока Тогда
			НегативноеОтклонениеНормыДо = Константы.УБ_НегативноеОтклонениеНормыДо.Получить();	
			ПозитивноеОтклонениеНормыОт = Константы.УБ_ПозитивноеОтклонениеНормыОт.Получить();
			ПограничноеОтклонениеНормыОт =  Константы.УБ_ПограничноеОтклонениеНормыОт.Получить();
			ПограничноеОтклонениеНормыДо = Константы.УБ_ПограничноеОтклонениеНормыДо.Получить();
		КонецЕсли;
	КонецЕсли;
		
	НеЗадаватьВопрос = Ложь;

КонецПроцедуры  

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//++При использовании ГНЭ
	Если Элементы.Найти("КИндикатор") <> Неопределено Тогда
		типПрямой = УБ_СобытияФормКлиент.ТипРасчетаПрямой(ТипРасчета);
		УБ_ПользовательскийИнтерфейсКлиент.СменаНаправленияИндикаторовГНЭ(Элементы.КИндикатор, Элементы.ЗИндикатор, типПрямой);
	КонецЕсли;
	//--
	
	ПозитивноеОтклонениеНормыОтПриИзменении(Элементы.ПозитивноеОтклонениеНормыОт);
	НегативноеОтклонениеНормыДоПриИзменении(Элементы.НегативноеОтклонениеНормыДо);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) 

	Если ЗавершениеРаботы И (Модифицированность ИЛИ ПеренестиВДокумент) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Модифицированность И ПеренестиВДокумент И Параметры.ЕстьДанныеПоПоказателю и НЕ НеЗадаватьВопрос Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Настройки показателя были изменены, данные будут перезаполнены. Сохранить изменения?'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	ИначеЕсли Модифицированность И НЕ ПеренестиВДокумент Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;

	Если ПеренестиВДокумент И НЕ Отказ Тогда
		Отказ = НЕ ПроверитьЗаполнениеНаКлиенте();
	КонецЕсли;

	Если Отказ Тогда
		ПеренестиВДокумент = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
    СтруктураРезультат = Новый Структура ;
	
	Если Не ПериодичностьПланирования = ПредопределенноеЗначение("Перечисление.УБ_ПериодыРасчетаМоделиПланирования.День") Тогда
		Календарь = Неопределено;
	КонецЕсли;
	Если ПеренестиВДокумент Тогда  
		Если ЭтоНоваяСтрока Тогда 
			СтруктураРезультат.Вставить("ПериодичностьПланирования", ПериодичностьПланирования);
			СтруктураРезультат.Вставить("Календарь", Календарь);
			СтруктураРезультат.Вставить("ПериодичностьКонтроля", ПериодичностьКонтроля);
			СтруктураРезультат.Вставить("Значение", Значение);                        
			СтруктураРезультат.Вставить("ЕдиноеЗначениеПоказателя", ЕдиноеЗначениеПоказателя);
			СтруктураРезультат.Вставить("РазбитьНаПериоды", РазбитьНаПериоды);                
			СтруктураРезультат.Вставить("СчитатьНарастающийИтог", СчитатьНарастающийИтог);
			
		Иначе
			Если не Параметры.ПериодичностьПланирования = ПериодичностьПланирования Тогда 
				СтруктураРезультат.Вставить("ПериодичностьПланирования", ПериодичностьПланирования);
			КонецЕсли; 
			Если не Параметры.Календарь = Календарь Тогда 
				СтруктураРезультат.Вставить("Календарь", Календарь);
			КонецЕсли; 
			Если не Параметры.ПериодичностьКонтроля= ПериодичностьКонтроля Тогда 
				СтруктураРезультат.Вставить("ПериодичностьКонтроля", ПериодичностьКонтроля);
			КонецЕсли;
 			Если Не	Параметры.Значение = Значение Тогда 
				СтруктураРезультат.Вставить("Значение", Значение);
			КонецЕсли;
			Если НЕ Параметры.ЕдиноеЗначениеПоказателя = ЕдиноеЗначениеПоказателя Тогда 
				СтруктураРезультат.Вставить("ЕдиноеЗначениеПоказателя", ЕдиноеЗначениеПоказателя);
			КонецЕсли;
	        Если НЕ Параметры.РазбитьНаПериоды = РазбитьНаПериоды Тогда 
				СтруктураРезультат.Вставить("РазбитьНаПериоды", РазбитьНаПериоды);
			КонецЕсли;
	        Если НЕ Параметры.СчитатьНарастающийИтог = СчитатьНарастающийИтог Тогда 
				СтруктураРезультат.Вставить("СчитатьНарастающийИтог", СчитатьНарастающийИтог);
			КонецЕсли;
		КонецЕсли;                                             
		//не влияют на ТЧ ПоказателиПоПериодам
		СтруктураРезультат.Вставить("НегативноеОтклонениеНормыДо", НегативноеОтклонениеНормыДо);
		СтруктураРезультат.Вставить("ПограничноеОтклонениеНормыОт", ПограничноеОтклонениеНормыОт);
		СтруктураРезультат.Вставить("ПограничноеОтклонениеНормыДо", ПограничноеОтклонениеНормыДо);
		СтруктураРезультат.Вставить("ПозитивноеОтклонениеНормыОт", ПозитивноеОтклонениеНормыОт);
		 
		ОповеститьОВыборе(СтруктураРезультат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ФормаРедактированияСтроки_Закрыть" И Источник = ВладелецФормы Тогда
		// Сообщение от основной формы документа при нажатии там Esc.
		// Сбрасываем флаг модифицированности и закрываем форму редактирования строки без вопросов.
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Если НЕ ЭтоНоваяСтрока и
		Параметры.ПериодичностьПланирования = ПериодичностьПланирования и 
		Параметры.Значение = Значение и
		Параметры.ЕдиноеЗначениеПоказателя = ЕдиноеЗначениеПоказателя и
		Параметры.РазбитьНаПериоды = РазбитьНаПериоды и
		Параметры.СчитатьНарастающийИтог = СчитатьНарастающийИтог и 
		Параметры.НегативноеОтклонениеНормыДо = НегативноеОтклонениеНормыДо и
		Параметры.ПозитивноеОтклонениеНормыОт = ПозитивноеОтклонениеНормыОт и 
		Параметры.Календарь = Календарь Тогда
		ПеренестиВДокумент = Ложь;	
		
		
	Иначе                           
		ПеренестиВДокумент = Истина;	
		Модифицированность = Истина;
	КонецЕсли;		
	
	НеЗадаватьВопрос =      Параметры.ПериодичностьПланирования = ПериодичностьПланирования и 
							Параметры.Календарь = Календарь и
							Параметры.Значение = Значение и
							Параметры.ЕдиноеЗначениеПоказателя = ЕдиноеЗначениеПоказателя и
							Параметры.РазбитьНаПериоды = РазбитьНаПериоды и
							Параметры.СчитатьНарастающийИтог = СчитатьНарастающийИтог ;


	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()

	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'значение'"));
		Поле = "Значение";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодичностьПланирования) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Периодичность планирования", НСтр("ru = 'Периодичность планирования'"));
		Поле = "ПериодичностьПланирования";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ПериодичностьКонтроля) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Периодичность контроля", НСтр("ru = 'Периодичность контроля'"));
		Поле = "ПериодичностьКонтроля";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли;


	Возврат Не Отказ;

КонецФункции

&НаКлиенте
Процедура ВопросПередЗакрытиемФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПриИзменении(Элемент)
	Структура = УБ_СобытияФормКлиент.СформироватьСтруктуру();
	ЗаполнитьЗначенияСвойств(Структура, ЭтотОбъект);
	
	УБ_СобытияФормКлиент.РассчитатьАбсолютныеЗначения(Структура);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Структура);
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьКонтроляПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ПериодичностьПланирования) Тогда
		ПериодичностьПланирования = ПериодичностьКонтроля;
		ПериодичностьПланированияПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПланированияПриИзменении(Элемент)
	УстановитьДоступностьЭлементов(Новый Структура);
	Модифицированность = Истина;     
	РазбитьНаПериоды = НЕ ПериодичностьПланирования = ПредопределенноеЗначение("Перечисление.УБ_ПериодыРасчетаМоделиПланирования.Произвольный");
КонецПроцедуры

Процедура УстановитьДоступностьЭлементов(Параметры) 
	
	мТолькоПросмотр = Ложь;
	
	Если Параметры.Свойство("ТолькоПросмотр", мТолькоПросмотр) Тогда
		ЭтотОбъект.ТолькоПросмотр = мТолькоПросмотр;
	КонецЕсли;	
	
	//при произвольной периодичности смысл имеет только поле Значение
	ПроизвольнаяПериодичность = ПериодичностьПланирования = ПредопределенноеЗначение("Перечисление.УБ_ПериодыРасчетаМоделиПланирования.Произвольный");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы,
			"ЕдиноеЗначениеПоказателя",
			"Видимость",
			НЕ ПроизвольнаяПериодичность);    
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы,
			"Календарь",
			"Видимость",
			ПериодичностьПланирования = ПредопределенноеЗначение("Перечисление.УБ_ПериодыРасчетаМоделиПланирования.День"));   
			
КонецПроцедуры

#Область ГраницыПоказателей

&НаКлиенте
Процедура ИзменениеГраницыПоказателей(Элемент, Пограничное)
	
	Структура = УБ_СобытияФормКлиент.СформироватьСтруктуру();
	ЗаполнитьЗначенияСвойств(Структура, ЭтотОбъект);
	
	УБ_СобытияФормКлиент.ИзменениеЗначенияОтклонения(Структура,Элемент, Пограничное, Истина);	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Структура);
	
КонецПроцедуры


&НаКлиенте
Процедура НегативноеОтклонениеНормыДоПриИзменении(Элемент)	
	ИзменениеГраницыПоказателей(Элемент, Ложь);
	НеЗадаватьВопрос = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НегативноеОтклонениеНормыДоАбсПриИзменении(Элемент)
	НегативноеОтклонениеНормыДо	= НегативноеОтклонениеНормыДоАбс/Значение*100;
	НегативноеОтклонениеНормыДоПриИзменении(Элементы.НегативноеОтклонениеНормыДо);
КонецПроцедуры

&НаКлиенте
Процедура ПозитивноеОтклонениеНормыОтПриИзменении(Элемент)
	ИзменениеГраницыПоказателей(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПозитивноеОтклонениеНормыОтАбсПриИзменении(Элемент)
	ПозитивноеОтклонениеНормыОт	= ПозитивноеОтклонениеНормыОтАбс/Значение*100;
	ПозитивноеОтклонениеНормыОтПриИзменении(Элементы.ПозитивноеОтклонениеНормыОт);
КонецПроцедуры

&НаКлиенте
Процедура ПограничноеОтклонениеНормыОтПриИзменении(Элемент)
	ИзменениеГраницыПоказателей(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПограничноеОтклонениеНормыДоПриИзменении(Элемент)
	ИзменениеГраницыПоказателей(Элемент, Истина);
КонецПроцедуры

#КонецОбласти