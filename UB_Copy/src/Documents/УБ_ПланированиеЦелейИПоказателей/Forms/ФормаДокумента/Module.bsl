//связывание табличных частей реализуется через КлючСвязи с типом Число (5)
//Уникальный идентификатор не используется, т.к. их нельзя передать в запрос внешней таблицей значений
// 
//TODO   
//при планировании День как-то выкидывать выходные!
//сообщить о варианте, когда периодичность меньше выбранного периода - показатель заполнена не будет       
//нужно запрещать изменение принаддежностьи показателя, если по нему уже есть план

&НаКлиенте
перем ДопустимаяПринадлежностьПоказателя;

&НаКлиенте
Перем АдресПоказателейВХранилище;

#Область ОбработчикиСобытийФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКомагды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	//Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	УБ_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ПодготовитьФормуНаСервере();	
	УБ_ПланированиеПоказателейСервер.УстановитьУсловноеОформление(ЭтотОбъект);  
	
КонецПроцедуры         

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;  
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьДоступностьЭлементовФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	 // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами          
	УБ_ПланированиеПоказателейКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект);

	ЗаполнитьКоличествоНазначенийВЗаголовках();
	ТекущееНазначение = ?(ТекущееНазначение = "", "Подразделение", ТекущееНазначение);
	УстановитьОтборСтрокДляНазначений(Элементы[ТекущееНазначение]); 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Объект.Утвержден = Ложь;      
		УстановитьСвойстваКнопкиУтвержден(Элементы.ФормаУтверждена, Объект.Утвержден);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//форма перечитывается, поэтому все перезаполняем
	ЗаполнитьДобавленныеКолонкиТаблиц();
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Документ.УБ_ПланированиеЦелейИПоказателей.Форма.ФормаРедактированияСтрокиПоказателя" Тогда
		ОбработкаВыбораНастройкиПоказателейНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

 &НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура Утвержден(Команда)
	Объект.Утвержден = НЕ Объект.Утвержден;
	УстановитьСвойстваКнопкиУтвержден(Элементы.ФормаУтверждена, Объект.Утвержден); 
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваКнопкиУтвержден(Кнопка, ЗначениеУтвержден)
	Кнопка.Пометка = ЗначениеУтвержден;
	Кнопка.Заголовок = ?(ЗначениеУтвержден, "Утвержден", "Не утвержден");
	Если Не ЗначениеУтвержден Тогда
		Кнопка.ЦветТекста = WebЦвета.Красный;
	Иначе
		Кнопка.ЦветТекста = WebЦвета.Зеленый;
	КонецЕсли;    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНастройкам(Команда)

	Если Объект.ПоказателиПоПериодам.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоНастройкамПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Таблица периодов будет очищена, продолжить?",РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		УБ_ПланированиеПоказателейКлиент.ЗаполнитьПоНастройкам(Объект);
		УБ_ПланированиеПоказателейКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект, Элементы.Показатели.ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНастройкамПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УБ_ПланированиеПоказателейКлиент.ЗаполнитьПоНастройкам(Объект, Элементы.ПоказателиПоПериодам.ОтборСтрок["КлючСвязиСПериодом"]);
		УБ_ПланированиеПоказателейКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект, Элементы.Показатели.ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоказателя(Команда)
	
	//в форме выбора не нужны Показатели, которые уже подобраны для выбранного назначения
	СтруктураПараметров 					= УБ_ПланированиеПоказателейКлиент.СтруктураПараметровКомпоновкиФормыВыбора();
	СтруктураПараметров.Источник			= ЭтотОбъект;
	СтруктураПараметров.Дата 				= Объект.ДатаНачала;
	СтруктураПараметров.ДатаКадровыхДанных  = Объект.ДатаОкончания;
	Если Элементы.Назначения.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрано назначение.");		
		Возврат ;
	КонецЕсли;
	СтруктураПараметров.Назначение 			= Элементы.Назначения.ТекущиеДанные.Назначение;
	СтруктураПараметров.ТекущееНазначение	= ТекущееНазначение;
	СтруктураПараметров.МассивИсключений	= ВыгрузитьТаблицуДобавленныхПоказателейНазначения();   //список значений на самом деле
	СтруктураПараметров.ЭтоПодбор 			= Истина;                       
	СтруктураПараметров.КлючСвязи			= Элементы.Показатели.ОтборСтрок["КлючСвязи"];
	АдресПоказателейВХранилище				= ПоместитьПоказателиВХранилище();
	СтруктураПараметров.АдресВХранилище 	= АдресПоказателейВХранилище;
	
	УБ_ПланированиеПоказателейКлиент.ПоказательНачалоВыбора(СтруктураПараметров) ;

КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
//
// Процедура 
//
// Описание:
// копирует показатель из строки всем назначениям текущего вида
// не имеет смысла для назначения вида "Компания", Подразделение, т.к. у них Показатели обязательно уникальные

&НаКлиенте      
Процедура ДобавитьПоказательВсемНазначениямВида(Команда)  
	
	Если ТекущееНазначение = "Компания" Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ВыделеннаяСтрока Из Элементы.Показатели.ВыделенныеСтроки Цикл
		СкопироватьпоказательВсемНаСервере(ВыделеннаяСтрока);	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьСводнуюТаблицу(Команда)   

	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СводнаяТаблицаПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Документ будет записан. Продолжить?",РежимДиалогаВопрос.ДаНет, 60);
	Иначе       
		ОткрытьФорму("Документ.УБ_ПланированиеЦелейИПоказателей.Форма.СводнаяТаблица", Новый Структура("Ссылка", Объект.Ссылка),
		ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор, ,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры   

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ПодразделениеШапкаПриИзменении(Элемент)
	УБ_ПланированиеПоказателейКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект, Элементы.Показатели.ТекущиеДанные);
КонецПроцедуры
    
&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания)
		или Объект.ДатаОкончания = ХранимыеЗначенияПолейФормы.ДатаОкончания Тогда
		Возврат;
	КонецЕсли;
	Объект.ДатаОкончания = КонецДня(Объект.ДатаОкончания);
	Если Объект.ПоказателиПоПериодам.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДатаПриИзмененииПродолжение", ЭтотОбъект, Новый Структура("ИмяРеквизита", "ДатаОкончания"));
		ПоказатьВопрос(ОписаниеОповещения, "Таблица показателей по периодам будет перезаполнена, продолжить?",РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		УБ_ПланированиеПоказателейКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект, Элементы.Показатели.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры                                            

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала)
		или Объект.ДатаНачала = ХранимыеЗначенияПолейФормы.ДатаНачала Тогда
		Возврат;
	КонецЕсли; 
	Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала); // непонятно пока, с какой целью было КонецДня(Объект.ДатаНачала);
	
	Если Объект.ПоказателиПоПериодам.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДатаПриИзмененииПродолжение", ЭтотОбъект, Новый Структура("ИмяРеквизита", "ДатаНачала"));
		ПоказатьВопрос(ОписаниеОповещения, "Таблица показателей по периодам будет перезаполнена, продолжить?",РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		УБ_ПланированиеПоказателейКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект, Элементы.Показатели.ТекущиеДанные);
	КонецЕсли;     
	
КонецПроцедуры    

&НаКлиенте
Процедура ДатаПриИзмененииПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ХранимыеЗначенияПолейФормы[ИмяРеквизита ]= Объект[ИмяРеквизита];
		УБ_ПланированиеПоказателейКлиент.ЗаполнитьПоНастройкам(Объект);
		УБ_ПланированиеПоказателейКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект, Элементы.Показатели.ТекущиеДанные);
	Иначе
		Объект[ИмяРеквизита]= ХранимыеЗначенияПолейФормы[ИмяРеквизита];
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеШапкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)           
	УБ_СобытияФормКлиент.ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры     

&НаКлиенте
Процедура ПодразделениеШапкаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УБ_СобытияФормКлиент.ПодразделениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастейФормы
//************НАЗНАЧЕНИЯ**********************//
&НаКлиенте
Процедура НазначенияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Назначения.ТекущиеДанные;
	
	ИмяТабличнойЧасти = "Назначения";
	УБ_ТабличныеЧастиКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Показатели");
	
	Если НЕ ТекущиеДанные = Неопределено и НЕ ТекущиеДанные.Назначение = Неопределено Тогда// И НЕ ТекущиеДанные.Назначение = "Компания"  Тогда
		Элементы.КолонкаПраво.Заголовок = "Показатели "+ УБ_ОбщегоНазначенияКлиентВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Назначение, "Представление");	
	Иначе   
		СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Неопределено);
		ЭтотОбъект.Элементы["Показатели"].ОтборСтрок = СтрОтбора;
		Элементы.КолонкаПраво.Заголовок = "Показатели";
	КонецЕсли;  
	Если НЕ ТекущиеДанные = Неопределено Тогда
		МассивСтрок = Объект.Показатели.НайтиСтроки(Новый Структура("КлючСвязи", ТекущиеДанные.КлючСвязи));
		Если МассивСтрок.Количество() > 0 Тогда
		     Элементы.Показатели.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Назначения";
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Назначение = ЭтотОбъект.Элементы["Назначения"].ОтборСтрок.НазначениеТип;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		УБ_ТабличныеЧастиКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
		УБ_ТабличныеЧастиКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Показатели");
	КонецЕсли;  
	
КонецПроцедуры 

&НаКлиенте
Процедура НазначенияПередУдалением(Элемент, Отказ)
	// ПоказателиПоПериодам
	ТекущиеДанные= Элементы.Назначения.ТекущиеДанные;
	РезультатПоиска = Объект.Показатели.НайтиСтроки(Новый Структура("КлючСвязи", ТекущиеДанные.КлючСвязи));
	
	Для каждого СтрокаПоказателя Из РезультатПоиска Цикл
		
		РезультатПоискаЦП = Объект.ПоказателиПоПериодам.НайтиСтроки(Новый Структура("КлючСвязиСПериодом", СтрокаПоказателя.КлючСвязиСПериодом));
		Для Каждого СтрокаПоказателяПоПериодам Из РезультатПоискаЦП Цикл
			ИндексУдаления = Объект.ПоказателиПоПериодам.Индекс(СтрокаПоказателяПоПериодам);
			Объект.ПоказателиПоПериодам.Удалить(ИндексУдаления);
		КонецЦикла;
	КонецЦикла;
	// ПоказателиПоПериодам
	
	ИмяТабличнойЧасти = "Назначения";
	УБ_ТабличныеЧастиКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Показатели");
	
КонецПроцедуры  

&НаКлиенте
Процедура НазначенияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Назначения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.НазначениеТип = ЭтотОбъект.Элементы["Назначения"].ОтборСтрок.НазначениеТип;
КонецПроцедуры

&НаКлиенте
Процедура НазначенияНазначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Назначения.ТекущиеДанные;	
	Элементы.Назначения.ТекущиеДанные.РуководительПодразделения = ПолучитьДействующегоРуководителяДляНазначения(Объект.ДатаНачала, ТекущееНазначение, ТекущиеДанные.Назначение);      
	УБ_ПланированиеПоказателейКлиент.УстановитьОграничениеТипаНазначения(ТекущееНазначение, ТекущиеДанные.Назначение, ТекущиеДанные.НазначениеТип);
КонецПроцедуры	

&НаКлиенте
Процедура НазначенияНазначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//поскольку Показатели должны соответствовать некоторому отбору, надо проверить соответствие назначения и Показателя
	ДопустимаяПринадлежностьПоказателя = УБ_ПланированиеПоказателейКлиент.ОпределитьДопустимуюПринадлежностьПоказателя(Объект.ДатаНачала, 
																												  Новый Структура("Назначение, ТекущееНазначение",
																												  ВыбранноеЗначение, 
																												  ТекущееНазначение));
	ПроверитьСоответствиеПоказателейВыбранномуНазначению(ДопустимаяПринадлежностьПоказателя, 	Элементы.Назначения.ТекущиеДанные.Назначение);
	
КонецПроцедуры                                                           

&НаКлиенте
Процедура ПроверитьСоответствиеПоказателейВыбранномуНазначению(ДопустимаяПринадлежностьПоказателя, СтароеНазначение)
	ТекущиеДанные = Элементы.Назначения.ТекущиеДанные;	
	РезультатПоиска = Объект.Показатели.НайтиСтроки(Новый Структура("КлючСвязи", ТекущиеДанные.КлючСвязи));
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаПоказателя Из РезультатПоиска Цикл
		ПринадлежностьПоказателя = УБ_ОбщегоНазначенияКлиентВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаПоказателя.Показатель,"ПринадлежностьПоказателя");
		Если ДопустимаяПринадлежностьПоказателя.Найти(ПринадлежностьПоказателя) = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаПоказателя);			
		КонецЕсли;	
	КонецЦикла;	

	Если СтрокиКУдалению.Количество() Тогда            
		ДопПараметры = Новый Структура("СтрокиКУдалению, СтароеНазначение", СтрокиКУдалению, СтароеНазначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьСоответствиеПоказателейВыбранномуНазначениюЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Показатели, не соответствующие выбранному назначению, будут удалены, продолжить?",РежимДиалогаВопрос.ДаНет, 60);
	КонецЕсли;
	
    
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьСоответствиеПоказателейВыбранномуНазначениюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого Строка Из ДополнительныеПараметры.СтрокиКУдалению Цикл
			Объект.Показатели.Удалить(Строка);
		КонецЦикла;		
	Иначе
		Элементы.Назначения.ТекущиеДанные.Назначение = ДополнительныеПараметры.СтароеНазначение;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияЦельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;                                                       
	ПараметрыФормы = Новый Структура;
   	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("СтруктураПредприятия", Объект.СтруктураПредприятия);
	ПараметрыОтбора.Вставить("СостояниеЦели", ПредопределенноеЗначение("Перечисление.УБ_СостоянияПоказателейЭффективности.Действует"));
	ПараметрыОтбора.Вставить("ЭтоГруппа", ложь);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("ОтборИерархияПереключатель", 1);
    ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.УБ_Цели.Форма.ФормаСпискаУпрощенная", ПараметрыФормы, Элемент,,,,);  
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияЦельОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.Назначения.ТекущиеДанные.Цель = ВыбранноеЗначение;
КонецПроцедуры


//************КОНЕЦ НАЗНАЧЕНИЯ**********************//

&НаКлиенте
Процедура ПодразделенияНажатие(Элемент)             
	ПодсветитьВкладку(Элемент);	//гасим старый элемент
	ТекущееНазначение = "Подразделение";
	УстановитьОтборСтрокДляНазначений(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыНажатие(Элемент)  
	ПодсветитьВкладку(Элемент);	//гасим старый элемент
	ТекущееНазначение = "Проект";
	УстановитьОтборСтрокДляНазначений(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностиНажатие(Элемент)    
	ПодсветитьВкладку(Элемент);	//гасим старый элемент
	ТекущееНазначение = "Должность";
	УстановитьОтборСтрокДляНазначений(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиНажатие(Элемент)  
	ПодсветитьВкладку(Элемент);	//гасим старый элемент
	ТекущееНазначение = "Сотрудник";
	УстановитьОтборСтрокДляНазначений(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНажатие(Элемент)
	ПодсветитьВкладку(Элемент);	//гасим старый элемент
	ТекущееНазначение = "Организация";
	УстановитьОтборСтрокДляНазначений(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура КомпанияНажатие(Элемент) 
	ПодсветитьВкладку(Элемент);	//гасим старый элемент
	ТекущееНазначение = "Компания";
	УстановитьОтборСтрокДляНазначений(Элемент);	
КонецПроцедуры  

//********************ПОКАЗАТЕЛИ ПО ПЕРИОДАМ********************//
&НаКлиенте
Процедура ПоказателиПоПериодамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "ПоказателиПоПериодам";
	ЭтоНоваяСтрока = НоваяСтрока;
	Если НоваяСтрока Тогда	//добавляет ключ связи между ТЧ Показатели и ПоказателиПоПериодам
		УБ_ТабличныеЧастиКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя,, "КлючСвязиСПериодом");
	КонецЕсли;      
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПоПериодамТекущееЗначениеПриИзменении(Элемент)
	УБ_ПланированиеПоказателейКлиент.СчитатьНарастающийИтогПриИзменении(ЭтотОбъект);
КонецПроцедуры  

//************ПОКАЗАТЕЛИ ПО ПЕРИОДАМ**********************//




#Область ОбработчикиСобытийТЧ_Показатели

&НаКлиенте
Процедура ПоказателиПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Показатели";
	УБ_ТабличныеЧастиКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ПоказателиПоПериодам",, "КлючСвязиСПериодом");
	УБ_ПланированиеПоказателейКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект, Элементы.Показатели.ТекущиеДанные);
	УБ_ПланированиеПоказателейКлиент.ВывестиВПодвалИтогСОтбором(ЭтотОбъект, Объект.ПоказателиПоПериодам, Элементы.ПоказателиПоПериодам);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Назначения";
	ЭтоНоваяСтрока = НоваяСтрока;
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	Если НоваяСтрока Тогда	//добавляет ключ связи между ТЧ Назначения и Показатели
		УБ_ТабличныеЧастиКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;      
	ИмяТабличнойЧасти = "Показатели";
	Если НоваяСтрока Тогда        //добавляет ключ сязи между ТЧ Показатели и ПоказателиПоПериодам
		УБ_ТабличныеЧастиКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект,, "КлючСвязиСПериодом");
		УБ_ТабличныеЧастиКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ПоказателиПоПериодам",, "КлючСвязиСПериодом");
	КонецЕсли;  

	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
    
	ТекущиеДанные.НастройкиПоказателя = УБ_ОбщегоНазначенияКлиентВызовСервера.ПредставлениеНезаполненногоЗначения(); 

КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//в форме выбора не нужны Показатели, которые уже подобраны для выбранного назначения
	СтруктураПараметров 					= УБ_ПланированиеПоказателейКлиент.СтруктураПараметровКомпоновкиФормыВыбора();
	СтруктураПараметров.Источник			= Элемент;
	СтруктураПараметров.Дата 				= Объект.ДатаНачала;
	СтруктураПараметров.ДатаКадровыхДанных  = Объект.ДатаОкончания;
	СтруктураПараметров.Назначение 			= Элементы.Назначения.ТекущиеДанные.Назначение;
	СтруктураПараметров.ТекущееНазначение	= ТекущееНазначение;
	СтруктураПараметров.МассивИсключений	= ВыгрузитьМассивДобавленныхПоказателейНазначения();
	АдресПоказателейВХранилище				= ПоместитьПоказателиВХранилище();
	СтруктураПараметров.АдресВХранилище 	= АдресПоказателейВХранилище;

    СтруктураПараметров.КлючСвязи			= Элементы.Показатели.ОтборСтрок["КлючСвязи"];
	УБ_ПланированиеПоказателейКлиент.показательНачалоВыбора(СтруктураПараметров, СтандартнаяОбработка) ;

КонецПроцедуры   

&НаКлиенте
Процедура ПоказателипоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт                   
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Назначение", 		  Элементы.Назначения.ТекущиеДанные.Назначение);
	СтруктураПараметров.Вставить("ТекущееНазначение", ТекущееНазначение);
	СтруктураПараметров.Вставить("показатель", 			  ВыбранноеЗначение);
	
	УБ_ПланированиеПоказателейКлиент.ПроверитьСоответствиеПоказателяНазначению(СтруктураПараметров, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодбор() Экспорт
	МассивДобавленных = Новый Массив;
	ПолучитьИзХранилища(АдресПоказателейВХранилище, МассивДобавленных);
	
	ИмяТабличнойЧасти = "Назначения";
	Для каждого Строка Из МассивДобавленных Цикл
		Элементы.Показатели.ТекущаяСтрока = Строка;
		УБ_ТабличныеЧастиКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, "Показатели");
		ИмяТабличнойЧасти = "Показатели";
		УБ_ТабличныеЧастиКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, Элементы.Показатели.ТекущаяСтрока, "КлючСвязиСПериодом");
	КонецЦикла;
	УБ_ТабличныеЧастиКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ПоказателиПоПериодам",, "КлючСвязиСПериодом");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПоказательПриИзменении(Элемент)

	//примечание: автовыбор незаполненного срабатывает только, если	при добавлении курсор стоит на последней строке

	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные; 
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки = СтруктураРеквизитовТЧПоказатели;
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки, ТекущиеДанные);
		
	Если ЭтоНоваяСтрока Тогда
		Элементы.Показатели.ТекущийЭлемент = Элементы.ПоказателиНастройкиПоказателя; 
		Если НЕ Элементы.Показатели.ТекущиеДанные.НастройкиПоказателяЗаполнены Тогда
			ВыбраннаяСтрока = Элементы.Показатели.ТекущаяСтрока;
			ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		КонецЕсли;
	КонецЕсли;      
	ЭтоНоваяСтрока = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередУдалением(Элемент, Отказ)
	
	ИмяТабличнойЧасти = "Показатели";
	УБ_ТабличныеЧастиКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "ПоказателиПоПериодам", "КлючСвязиСПериодом");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИмяТабличнойЧасти = "Назначения";
	
	Если УБ_ТабличныеЧастиКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, Элемент.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Не Отказ И Копирование Тогда
		
		ТекСтрокаНазначения = Элементы.Назначения.ТекущиеДанные;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказателиНастройкиПоказателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Сначала укажите период планирования.");
		Возврат;
	КонецЕсли;

	ВыбраннаяСтрока = Элементы.Показатели.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтотОбъект);
	КонецЕсли;

	ЭтоНоваяСтрока = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПоказательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтруктураПараметров 					= УБ_ПланированиеПоказателейКлиент.СтруктураПараметровКомпоновкиФормыВыбора();
	СтруктураПараметров.Дата 				= Объект.ДатаНачала;
	СтруктураПараметров.ДатаКадровыхДанных  = Объект.ДатаОкончания;
	СтруктураПараметров.Назначение	     	= Элементы.Назначения.ТекущиеДанные.Назначение;
	СтруктураПараметров.ТекущееНазначение	= ТекущееНазначение;
	СтруктураПараметров.Вставить("Показатели", 	Объект.Показатели);
	СтруктураПараметров.Вставить("КлючСвязи", Элементы.Показатели.ОтборСтрок["КлючСвязи"]);

	ПолучитьПараметрыДанныхВыбораПоказателя(СтруктураПараметров, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Сначала укажите период планирования.");
		Возврат;
	КонецЕсли;
 	ДанныеСтроки 	= Объект.Показатели.НайтиПоИдентификатору(ВыбранноеЗначение);
				
	ПараметрыФормы = СтруктураРеквизитовТЧПоказатели;
	ПараметрыФормы.Вставить("ТолькоПросмотр", Объект.Утвержден);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДанныеСтроки);   	
	ПараметрыФормы.ЭтоНоваяСтрока = Не ДанныеСтроки.НастройкиПоказателяЗаполнены;
	
	ПараметрыФормы.ЕстьДанныеПоПоказателю = НЕ Объект.ПоказателиПоПериодам.НайтиСтроки(Новый Структура("КлючСвязиСПериодом", ДанныеСтроки.КлючСвязиСПериодом)).Количество() = 0;
	ОткрытьФорму("Документ.УБ_ПланированиеЦелейИПоказателей.Форма.ФормаРедактированияСтрокиПоказателя", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПоказателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПоказателиНастройкиПоказателя" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти //ТЧ Показатели

&НаКлиенте
Процедура НазначенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока Тогда
		УстановитьЗаголовокКолонкиНазначение(ТекущееНазначение);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НазначенияПослеУдаления(Элемент)
	УстановитьЗаголовокКолонкиНазначение(ТекущееНазначение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДействующегоРуководителяДляНазначения (Дата, ТекущееНазначение, Назначение)   
	
	Если ТекущееНазначение = "Подразделение" Тогда
		Подразделения = Новый Массив;
		Подразделения.Добавить(Назначение);
		Результат = УБ_КадровыйУчет.ДействующиеРуководителиПодразделений(Дата, Подразделения);	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Руководитель;
		КонецЦикла;                      
	ИначеЕсли ТекущееНазначение = "Проект" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "Ответственный");
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Прочий функционал:

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	ХранимыеЗначенияПолейФормы = Новый Структура;
	ХранимыеЗначенияПолейФормы.Вставить("ДатаНачала", 		Объект.ДатаНачала);
	ХранимыеЗначенияПолейФормы.Вставить("ДатаОкончания", 	Объект.ДатаОкончания);
	
	Элементы.Проект.Видимость = Не УБ_ОбщегоНазначенияПовтИсп.ЭтоРозница();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	НазначенияСРуководителями.Добавить("Подразделение");
	НазначенияСРуководителями.Добавить("Проект");
	НазначенияСРуководителями.Добавить("Организация");
	
	
	СтруктураРеквизитовТЧПоказатели = Новый Структура;
	Реквизиты = ПолучитьРеквизиты("Объект.Показатели");
	//все реквизиты ТЧ
	Для Каждого Реквизит из реквизиты Цикл
		СтруктураРеквизитовТЧПоказатели.Вставить(Реквизит.Имя);
	КонецЦикла;       
	//и служебные добавляемые
	СтруктураРеквизитовТЧПоказатели.Вставить("Ключ", Объект.Ссылка); 
	СтруктураРеквизитовТЧПоказатели.Вставить("НастройкиПоказателя");
	СтруктураРеквизитовТЧПоказатели.Вставить("НастройкиПоказателяЗаполнены"); 
	СтруктураРеквизитовТЧПоказатели.Вставить("ЕстьДанныеПоПоказателю");
	СтруктураРеквизитовТЧПоказатели.Вставить("ЭтоНоваяСтрока");         

	УстановитьДоступностьЭлементовФормы();
	
	УстановитьСвойстваКнопкиУтвержден(Элементы.ФормаУтверждена, Объект.Утвержден);	
	Компания = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Компания");
	
КонецПроцедуры  

Процедура УстановитьДоступностьЭлементовФормы()

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаШапка",
			"ТолькоПросмотр",
			Объект.Утвержден);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНазначенияИПоказатели",
			"ТолькоПросмотр",
			Объект.Утвержден); 

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПоказателиКоманднаяПанель",
			"Доступность",
			Не Объект.Утвержден);   
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПоказателиПоПериодамКоманднаяПанель",
			"Доступность",
			Не Объект.Утвержден);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПоказателиПоПериодам",
			"ТолькоПросмотр",
			Объект.Утвержден);
	
КонецПроцедуры

//Функция ЗначениеРеквизитаПоУмолчанию(ИмяРеквизита)
//	Возврат УБ_ОбщегоНазначенияПовтИсп.ЗначениеРеквизитаПоУмолчанию(ИмяРеквизита);
//КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Показатели" Тогда
		Для каждого СтрокаТаблицы Из Объект.Показатели Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПоказатели(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;  
	
	//колонка Руководитель для Подразделения
	Подразделения = Объект.Назначения.НайтиСтроки(Новый Структура("НазначениеТип", УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение")));
	МассивПодразделений = Новый Массив;
	Для каждого Строка Из Подразделения Цикл
		МассивПодразделений.Добавить(Строка.Назначение);		
	КонецЦикла;

	Результат = УБ_КадровыйУчет.ДействующиеРуководителиПодразделений(Объект.ДатаНачала, МассивПодразделений, Истина);
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Подразделения = Объект.Назначения.НайтиСтроки(Новый Структура("Назначение", Выборка.Подразделение));			
		Для каждого Строка Из Подразделения Цикл
			Строка.РуководительПодразделения = Выборка.Руководитель;			
		КонецЦикла;
	КонецЦикла;    

	//для Проекта
	Проекты = Объект.Назначения.НайтиСтроки(Новый Структура("НазначениеТип", УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Проект")));
	Для каждого Проект Из Проекты Цикл
		Проект.РуководительПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект.Назначение, "Ответственный");
	КонецЦикла;
	
КонецПроцедуры

//обслуживание таблицы Показатели: 
&НаСервереБезКонтекста
Процедура ПолучитьПараметрыДанныхВыбораПоказателя(ПараметрыОпределения, ПараметрыПолученияДанных)
    ДопустимаяПринадлежностьПоказателя = УБ_ПланированиеПоказателейСервер.ОпределитьДопустимуюПринадлежностьПоказателя(ПараметрыОпределения.Дата, ПараметрыОпределения); 
	
	ПараметрыПолученияДанных.Отбор.Вставить("МассивИсключений", ПараметрыОпределения.Показатели.Выгрузить(Новый Структура("КлючСвязи", ПараметрыОпределения.КлючСвязи)).ВыгрузитьКолонку("показатель"));
	ПараметрыПолученияДанных.Отбор.Вставить("СписокДопустимых", ДопустимаяПринадлежностьПоказателя);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыПоказатели(СтрокаТабличнойЧасти)

	ЗаполнитьНастройкиПоказателя(СтрокаТабличнойЧасти);                             
	
КонецПроцедуры      

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНастройкиПоказателя(СтрокаТабличнойЧасти)

	Если Не СтрокаТабличнойЧасти.Свойство("НастройкиПоказателя") Тогда
		Возврат;
	КонецЕсли;
	
	// При вызове с клиента: чтобы сократить обмен с сервером, передадим только нужные данные
	// При вызове с сервера: функциональная опция может скрыть эти поля
	ДанныеЗаполнения = Новый Структура("Значение, ЕдиноеЗначениеПоказателя, СчитатьНарастающийИтог, 
									   |РазбитьНаПериоды, ПериодичностьПланирования");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаТабличнойЧасти);
	
	ОписаниеАналитикиУчета = ОписаниеНастроекПоказателя(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ОписаниеАналитикиУчета);

КонецПроцедуры       

&НаСервереБезКонтекста
Функция ОписаниеНастроекПоказателя(Знач ДанныеСтроки)
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиПоказателя",          "");
	Результат.Вставить("НастройкиПоказателяЗаполнены", Истина);
	
	МассивПараметров = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеСтроки.Значение) Тогда
		МассивПараметров.Добавить(ДанныеСтроки.Значение)   
	Иначе
		МассивПараметров.Добавить(УБ_ОбщегоНазначенияКлиентВызовСервера.ПредставлениеНезаполненногоЗначения());
		Результат.НастройкиПоказателяЗаполнены  = Ложь;
	КонецЕсли;                  
	Если ДанныеСтроки.ЕдиноеЗначениеПоказателя Тогда
		МассивПараметров.Добавить("единое значение");	
	КонецЕсли;
	Если ДанныеСтроки.СчитатьНарастающийИтог  Тогда
		МассивПараметров.Добавить("нараст. итог");	
	КонецЕсли;	                                                                    
	МассивПараметров.Добавить("период "+ДанныеСтроки.ПериодичностьПланирования);

	Результат.НастройкиПоказателя = СтрСоединить(МассивПараметров, "; ");

	Возврат Результат;

КонецФункции   

&НаСервере
Процедура ПолучитьИзХранилища(АдресПоказателейВХранилище, МассивДобавленныхСтрок)
	
	мПоказатели = ПолучитьИзВременногоХранилища(АдресПоказателейВХранилище);
	Для каждого Строка Из мПоказатели Цикл
		НайденныеСтроки = Объект.Показатели.НайтиСтроки(Новый Структура("Показатель, КлючСвязи", Строка.показатель, Строка.КлючСвязи));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НовСтр = Объект.Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Строка);
			ЗаполнитьЗначенияСвойств(НовСтр, СтруктураРеквизитовТЧПоказатели,, "Показатель, КлючСвязи");       
			НовСтр.НастройкиПоказателя = УБ_ОбщегоНазначенияКлиентВызовСервера.ПредставлениеНезаполненногоЗначения(); 
			МассивДобавленныхСтрок.Добавить(НовСтр.ПолучитьИдентификатор());
    	КонецЕсли;		
	КонецЦикла;     

КонецПроцедуры

&НаСервере
Функция ВыгрузитьМассивДобавленныхПоказателейНазначения()
	
	Возврат Объект.Показатели.Выгрузить(Новый Структура("КлючСвязи", Элементы.Показатели.ОтборСтрок["КлючСвязи"])).ВыгрузитьКолонку("показатель");
	
КонецФункции	  

&НаСервере
Функция ВыгрузитьТаблицуДобавленныхПоказателейНазначения()

	СписокИсключений = Новый СписокЗначений;
	ТЗ = Объект.Показатели.Выгрузить(Новый Структура("КлючСвязи", Элементы.Показатели.ОтборСтрок["КлючСвязи"]), "показатель, КлючСвязи");
	Для Каждого Строка Из ТЗ Цикл
		СписокИсключений.Добавить(Строка.показатель);	
	КонецЦикла;

	Возврат СписокИсключений;
	
КонецФункции	

&НаСервере
Функция ПоместитьПоказателиВХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.Показатели.Выгрузить(Новый Структура("КлючСвязи", Элементы.Показатели.ОтборСтрок["КлючСвязи"]),"показатель"), УникальныйИдентификатор);

КонецФункции
   
&НаКлиенте
Процедура ОбработкаВыбораНастройкиПоказателейНаКлиенте(ЗначенияВыбранныеВФормеНастроекПоказателей)

	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЗначенияВыбранныеВФормеНастроекПоказателей);
	
	Модифицированность = Истина;
		
	Если ТекущиеДанные.Свойство("НастройкиПоказателя") Тогда
		ЗаполнитьНастройкиПоказателя(ТекущиеДанные);
	КонецЕсли;
	
	Если ЗначенияВыбранныеВФормеНастроекПоказателей.Свойство("РазбитьНаПериоды") 
		или ЗначенияВыбранныеВФормеНастроекПоказателей.Свойство("ПериодичностьПланирования")
		или УБ_ТабличныеЧастиКлиентСервер.СтрокиПоКлючуСвязи(Объект.ПоказателиПоПериодам, ТекущиеДанные.КлючСвязиСПериодом, "КлючСвязиСПериодом").Количество() = 0 Тогда
		//именно в таком порядке, т.к. при некоторых изменениях не обязательно полностью перезаполнять строки по Показателю
		УБ_ПланированиеПоказателейКлиент.ЗаполнитьПоНастройкам(Объект, ТекущиеДанные.КлючСвязиСПериодом);
	ИначеЕсли ЗначенияВыбранныеВФормеНастроекПоказателей.Свойство("ЕдиноеЗначениеПоказателя") или ЗначенияВыбранныеВФормеНастроекПоказателей.Свойство("СчитатьНарастающийИтог") или ЗначенияВыбранныеВФормеНастроекПоказателей.Свойство("Значение")  Тогда
		УБ_ПланированиеПоказателейКлиент.ЕдиноеЗначениеНарастающийИтогПриИзменении(ТекущиеДанные, Объект.ПоказателиПоПериодам);
	КонецЕсли;                                                          

	УБ_ПланированиеПоказателейКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект, ТекущиеДанные);
	УБ_ПланированиеПоказателейКлиент.ВывестиВПодвалИтогСОтбором(ЭтотОбъект, Объект.ПоказателиПоПериодам, Элементы.ПоказателиПоПериодам);

КонецПроцедуры
        
//обслуживание таблиц Назначения:
&НаКлиенте
Процедура УстановитьОтборСтрокДляНазначений(Элемент)
	ПодсветитьВкладку(Элемент);	
	СтрОтбора = Новый ФиксированнаяСтруктура("НазначениеТип", УБ_ОбщегоНазначенияКлиент.ЗначениеРеквизитаПоУмолчанию(ТекущееНазначение));
	ЭтотОбъект.Элементы["Назначения"].ОтборСтрок = СтрОтбора;
	УстановитьЗаголовокКолонкиНазначение(ТекущееНазначение);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКолонкиНазначение(Назначение)                      
	
	Элементы.Назначения.ПодчиненныеЭлементы.НазначенияЦель.Видимость = Ложь;
	Если Назначение = "Компания" или Назначение = "Подразделение" Тогда
		Элементы.Назначения.ПодчиненныеЭлементы.НазначенияЦель.Видимость = Истина;
	Иначе
		Элементы.Назначения.ПодчиненныеЭлементы.НазначенияЦель.Видимость = Ложь;
	КонецЕсли;       
	
	Количество = Объект.Назначения.НайтиСтроки(Новый Структура("НазначениеТип", УБ_ОбщегоНазначенияКлиент.ЗначениеРеквизитаПоУмолчанию(Назначение))).Количество();		
	Элементы[Назначение].Заголовок = ?(Количество = Неопределено, Назначение, Назначение+"("+Количество+")");
	Элементы.Назначения.ИзменятьСоставСтрок = Не Назначение = "Компания";      
	Элементы.НазначенияНазначение.ТолькоПросмотр = Назначение = "Компания";      
	
КонецПроцедуры //УстановитьЗаголовокКолонкиНазначение

&НаКлиенте
Процедура ПодсветитьВкладку(Элемент)              
	
	Если Элемент.Имя = ТекущееНазначение Тогда
		Элементы[ТекущееНазначение].ЦветФона = WebЦвета.СветлоЗолотистый;  	
	Иначе
		Элементы[ТекущееНазначение].ЦветФона = Новый Цвет();
	КонецЕсли;

	Элементы.НазначенияРуководительПодразделения.Видимость = НЕ НазначенияСРуководителями.НайтиПоЗначению(ТекущееНазначение) = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура НазначенияНазначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ТекущееНазначение = "Подразделение" Тогда
		ПараметрыПолученияДанных.Отбор.Вставить("Владелец", Объект.Организация);
		ПараметрыПолученияДанных.Отбор.Вставить("Расформировано", Ложь);
		
		Если УБ_ОбщегоНазначенияКлиентПовтИсп.ИспользоватьСправочникиКАУП() Тогда                  
			ПараметрыПолученияДанных.Отбор.Вставить("Родитель", Объект.Подразделение);
		//	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ПодразделенияОрганизаций"), ПараметрыПолученияДанных);
		//	ДанныеВыбора.Добавить(Объект.Подразделение);
		//Иначе
			ПараметрыПолученияДанных.Отбор.Вставить("ГоловноеПодразделение", Объект.Подразделение);
		//	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.УБ_Подразделения"), ПараметрыПолученияДанных);
	КонецЕсли;    
	УБ_СобытияФормКлиент.ПодразделениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте     
// Параметры:
// Элемент - элемент формы
// ДанныеВыбора
// СтандартнаяОбработка - Булево
// Форма - ФормаКлиентскогоПриложения
Процедура НазначенияНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Назначения.ТекущиеДанные;
	
	Если ТекущееНазначение = "Подразделение" Тогда 
		УБ_СобытияФормКлиент.ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	ИначеЕсли ТекущееНазначение = "Сотрудник" Тогда       
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура;
		//добавить можно только сотрудников, работающихТекущиеДанные.Назначение на дату начала планирования, т.к.
		//о других на этот момент ничего неизвестно
		Отбор.Вставить("МесяцПримененияОтбора", Объект.ДатаНачала);
		Отбор.Вставить("ТекущаяОрганизация", Объект.Организация);
		Отбор.Вставить("ТекущееПодразделение", Объект.Подразделение);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ВИерархии", Истина);
		
		ТекущиеДанные = Элементы.Назначения.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Назначение);
		КонецЕсли;
		
		ОткрытьФорму("ОбщаяФорма.УБ_ФормаВыбораСотрудника", ПараметрыФормы, Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры


//обслуживание команд

&НаКлиенте
Процедура ОчиститьТЧ() Экспорт
	Объект.ПоказателиПоПериодам.Очистить();
	УБ_ПланированиеПоказателейКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект, Элементы.Показатели.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьпоказательВсемНаСервере(НомерСтроки)  
	
	ТекущиеДанные = Элементы.Показатели.ДанныеСтроки(НомерСтроки);

	НазначениеТекущиеДанные = Элементы.Назначения.ТекущиеДанные;
	МассивНазначенийВида = Объект.Назначения.НайтиСтроки(Новый Структура("НазначениеТип", УБ_ОбщегоНазначенияКлиент.ЗначениеРеквизитаПоУмолчанию(ТекущееНазначение)));

	Для каждого Назначение Из МассивНазначенийВида Цикл
		Если Назначение.Назначение = НазначениеТекущиеДанные.Назначение Тогда
			Продолжить;
		КонецЕсли;     
		
		Если Объект.Показатели.НайтиСтроки(Новый Структура("КлючСвязи, показатель", Назначение.КлючСвязи, ТекущиеДанные.показатель)).Количество() > 0  Тогда
			Продолжить;
		КонецЕсли;
		НовСтр = Объект.Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекущиеДанные,, "КлючСвязи, КлючСвязиСПериодом");
		НовСтр.КлючСвязи = Назначение.КлючСвязи; 

		ИмяТабличнойЧасти = "Показатели";
		//добавляет ключ сязи между ТЧ Показатели и ПоказателиПоПериодам
		УБ_ТабличныеЧастиКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, НовСтр, "КлючСвязиСПериодом");
		УБ_ТабличныеЧастиКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ПоказателиПоПериодам", НовСтр, "КлючСвязиСПериодом");
		
		// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
		ПараметрыОбработки = СтруктураРеквизитовТЧПоказатели;
		ЗаполнитьЗначенияСвойств(ПараметрыОбработки, ТекущиеДанные);
			
		//ЗаполнитьНастройкиПоказателяПоУмолчанию(ПараметрыОбработки);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки);  
		
		//заполнить ТЧ ПоказателиПоПериодам
		УБ_ПланированиеПоказателейКлиент.ЗаполнитьПоНастройкам(Объект, НовСтр.КлючСвязиСПериодом);	
  		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СводнаяТаблицаПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
			
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
		ОткрытьФорму("Документ.УБ_ПланированиеЦелейИПоказателей.Форма.СводнаяТаблица", Новый Структура("Ссылка", Объект.Ссылка),
		ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли; 
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоНазначенийВЗаголовках()

	Для каждого Элемент Из Элементы.ГруппаОтборы.ПодчиненныеЭлементы Цикл
		УстановитьЗаголовокКолонкиНазначение(Элемент.Имя);
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияДокументаПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры    

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()  
	
	УБ_СобытияФорм.ОрганизацияПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияСоздание(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры


#КонецОбласти

