//&НаКлиенте
//перем ОписаниеТипов;

&НаКлиенте
Перем АдресПоказателейВХранилище;


#Область ОбработчикиСобытийФормы              
 &НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКомагды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	//Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами     
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Объект.Расшифровка.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Объект.Расшифровка[0]);
		КонецЕсли;   
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ОтобразитьГиперссылкуПерейтиВТаблицу();
	
	Если Объект.Расшифровка.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Объект.Расшифровка[0]);
	КонецЕсли;   
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами
 
#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

//*********показатель*************
 &НаКлиенте
Процедура показательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ РасшифроватьПоНазначениям Тогда 
		//показатель невозможно ограничить
		УБ_ПланированиеПоказателейКлиент.ОпределитьТекущееНазначение(ЭтотОбъект, Назначение);	
		
		СтруктураПараметров 					= УБ_ПланированиеПоказателейКлиент.СтруктураПараметровКомпоновкиФормыВыбора();
		СтруктураПараметров.Источник			= Элемент;
		СтруктураПараметров.ИсточникИмяФормы    = ЭтотОбъект.ИмяФормы;
		СтруктураПараметров.Дата 				= Объект.Дата;
		СтруктураПараметров.Назначение 			= Назначение;
		СтруктураПараметров.ТекущееНазначение	= ТекущееНазначение;
		АдресПоказателейВХранилище				= ПоместитьПоказателиВХранилище();
		СтруктураПараметров.АдресВХранилище 	= АдресПоказателейВХранилище;

		УБ_ПланированиеПоказателейКлиент.показательНачалоВыбора(СтруктураПараметров, СтандартнаяОбработка);
	КонецЕсли;
	
	

КонецПроцедуры 

&НаКлиенте
Процедура показательПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Расшифровка.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		УБ_ПланированиеПоказателейКлиент.УстановитьОграничениеТипаЗначения(показатель, ТекущиеДанные.ТекущееЗначение);
	КонецЕсли;
	ПерезаполнитьпоказательВТЧ();

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьпоказательВТЧ()
	
	КоличествоРазличных = КоличествоРазличныхНазначенийИПоказателей();
	Если КоличествоРазличных.КоличествоПоказателей <= 1 Тогда
		Для каждого Строка Из Объект.Расшифровка Цикл
			Строка.показатель = показатель;			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры


//*********НАЗНАЧЕНИЕ*************
&НаКлиенте
Процедура НадписьНазначениеВТЧНажатие(Элемент) 

	КоличествоРазличных = КоличествоРазличныхНазначенийИПоказателей();
	Если КоличествоРазличных.КоличествоНазначений > 1 и РасшифроватьПоНазначениям Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала удалите строки с различающимися назначениями.";
		Сообщение.Сообщить();
	Иначе
		РасшифроватьПоНазначениям = НЕ РасшифроватьПоНазначениям;
		Элементы.Назначение.Видимость = НЕ Элементы.Назначение.Видимость;
		Элементы.РасшифровкаНазначение.Видимость = НЕ Элементы.Назначение.Видимость;
	КонецЕсли;    
	УстановитьЗаголовокРасшифровки();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоказателиВТЧНажатие(Элемент)
	
	КоличествоРазличных = КоличествоРазличныхНазначенийИПоказателей();
	Если КоличествоРазличных.КоличествоПоказателей > 1 и РасшифроватьПоПоказателям Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала удалите строки с различающимися показателями.";
		Сообщение.Сообщить();
	Иначе
		РасшифроватьПоПоказателям = НЕ РасшифроватьПоПоказателям;
		Элементы.Показатель.Видимость = НЕ Элементы.Показатель.Видимость;
		Элементы.Расшифровкапоказатель.Видимость = НЕ Элементы.Показатель.Видимость;
	КонецЕсли;      
	УстановитьЗаголовокРасшифровки();

КонецПроцедуры 

&НаКлиенте
Процедура НазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УБ_ПланированиеПоказателейКлиент.НазначениеНачалоВыбора(ЭтотОбъект, ЭтотОбъект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	ПерезаполнитьНазначениеВТЧ();
КонецПроцедуры

&НаКлиенте
Процедура НазначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПерезаполнитьНазначениеВТЧ();	
КонецПроцедуры    

&НаКлиенте
Процедура ПерезаполнитьНазначениеВТЧ()
	
	КоличествоРазличных = КоличествоРазличныхНазначенийИПоказателей();
	Если КоличествоРазличных.КоличествоНазначений <= 1 Тогда
		Для каждого Строка Из Объект.Расшифровка Цикл
			Строка.Назначение = Назначение;			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастейФормы
&НаКлиенте
Процедура РасшифровкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НЕ НоваяСтрока Тогда
		Возврат;		
	КонецЕсли;

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НЕ РасшифроватьПоНазначениям Тогда
		ТекущиеДанные.Назначение = Назначение;	 
		РасшифровкаНазначениепоказательПриИзменении("");
	КонецЕсли;
	Если НЕ РасшифроватьПоПоказателям Тогда
		ТекущиеДанные.показатель = показатель;	
		РасшифровкапоказательПриИзменении("")
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура РасшифровкаНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Расшифровка.ТекущиеДанные;
	УБ_ПланированиеПоказателейКлиент.НазначениеНачалоВыбора(ЭтотОбъект, ТекущиеДанные, СтандартнаяОбработка)
 
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкапоказательПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Расшифровка.ТекущиеДанные;
	УБ_ПланированиеПоказателейКлиент.УстановитьОграничениеТипаЗначения(ТекущиеДанные.показатель, ТекущиеДанные.ТекущееЗначение);
	РасшифровкаНазначениепоказательПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНазначениепоказательПриИзменении(Элемент)       
	
	ТекущиеДанные = Элементы.Расшифровка.ТекущиеДанные;
	УБ_ПланированиеПоказателейКлиент.ОпределитьТекущееНазначение(ЭтотОбъект, ТекущиеДанные.Назначение);
	//Если Назначение = "Компания" Тогда
	//	//поскольку показателя должны соответствовать некоторому отбору, надо проверить соответствие назначения и показателя
	//	УБ_ПланированиеПоказателейКлиент.ПроверитьСоответствиеПоказателяНазначению(ЭтотОбъект, Объект.Дата);
	//ИначеЕсли НЕ Назначение.Пустая() Тогда	                                                                                                  
	//	УБ_ПланированиеПоказателейКлиент.ПроверитьСоответствиеПоказателяНазначению(ЭтотОбъект, Объект.Дата);
	//КонецЕсли;                       

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ УБ_ОбщегоНазначенияКлиентВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ПринадлежностьПоказателя") = Элементы.Расшифровка.ТекущиеДанные.Назначение Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выбранный показатель не принадлежит "+Элементы.Расшифровка.ТекущиеДанные.Назначение;
		Сообщение.Поле = Элемент.Имя; //имя реквизита 
		Сообщение.Сообщить();
		СтандартнаяОбработка = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкапоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)         
	ТекущиеДанные = Элементы.Расшифровка.ТекущиеДанные;
	УБ_ПланированиеПоказателейКлиент.ОпределитьТекущееНазначение(ЭтотОбъект, ТекущиеДанные.Назначение);	
	
	СтруктураПараметров						= УБ_ПланированиеПоказателейКлиент.СтруктураПараметровКомпоновкиФормыВыбора();
	СтруктураПараметров.Источник			= Элемент;
	СтруктураПараметров.ИсточникИмяФормы	= ЭтотОбъект.ИмяФормы;
	СтруктураПараметров.Дата 				= ТекущиеДанные.Период;
	СтруктураПараметров.Назначение 			= ТекущиеДанные.Назначение;
	СтруктураПараметров.ТекущееНазначение	= ТекущееНазначение;
	УБ_ПланированиеПоказателейКлиент.показательНачалоВыбора(СтруктураПараметров, СтандартнаяОбработка) ;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПослеУдаления(Элемент)
	УстановитьЗаголовокРасшифровки(); 
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьЗаголовокРасшифровки(); 
КонецПроцедуры

#КонецОбласти      

#Область СлужебныеПроцедурыИФункции
// Прочий функционал:
&НаСервере
Процедура ОтобразитьГиперссылкуПерейтиВТаблицу() Экспорт
	
	ВидимостьРазбитьПлатеж = Истина;
	КоличествоРазличных = КоличествоРазличныхНазначенийИПоказателей();
	РасшифроватьПоНазначениям = КоличествоРазличных.КоличествоНазначений > 1;
	РасшифроватьПоПоказателям = КоличествоРазличных.КоличествоПоказателей > 1;
		
	Элементы.Назначение.Видимость = НЕ РасшифроватьПоНазначениям;
	Элементы.РасшифровкаНазначение.Видимость = РасшифроватьПоНазначениям;
	Элементы.Показатель.Видимость = НЕ РасшифроватьПоПоказателям;
	Элементы.Расшифровкапоказатель.Видимость = РасшифроватьПоПоказателям;

	УстановитьЗаголовокРасшифровки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокРасшифровки()  
	КоличествоРазличных = КоличествоРазличныхНазначенийИПоказателей();
	Элементы.НадписьНазначениеВТЧ.Заголовок = ?(РасшифроватьПоНазначениям, "Свернуть назначения ("+КоличествоРазличных.КоличествоНазначений+")", "Разбить по назначениям");
	Элементы.НадписьПоказателиВТЧ.Заголовок = ?(РасшифроватьПоПоказателям, "Свернуть показатели ("+КоличествоРазличных.КоличествоПоказателей+")", "Разбить по показателям");
КонецПроцедуры
       

////////////////////////////////////////////////////////////////////////////////
//
// Процедура КоличествоРазличныхНазначенийИПоказателей
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
&НаСервере
Функция КоличествоРазличныхНазначенийИПоказателей()
	
	
	КоличествоПоказателей = 0;
	КоличествоНазначений = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	 |	ДанныеРасшифровки.показатель КАК показатель,
	 |	ДанныеРасшифровки.Назначение КАК Назначение
	 |ПОМЕСТИТЬ ДанныеРасшифровки
	 |ИЗ
	 |	&ДанныеРасшифровки КАК ДанныеРасшифровки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРасшифровки.показатель) КАК показатель,
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРасшифровки.Назначение) КАК Назначение
	 |ИЗ
	 |	ДанныеРасшифровки КАК ДанныеРасшифровки";
	
	Запрос.УстановитьПараметр("ДанныеРасшифровки", Объект.Расшифровка.Выгрузить(, "показатель, Назначение"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КоличествоПоказателей = Выборка.показатель;
		КоличествоНазначений = Выборка.Назначение;
	КонецЦикла;
	
	Возврат Новый Структура("КоличествоПоказателей, КоличествоНазначений", КоличествоПоказателей, КоличествоНазначений);

КонецФункции//КоличествоРазличныхНазначенийИПоказателей

&НаСервере
Функция ПоместитьПоказателиВХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.Расшифровка.Выгрузить());

КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораНазначения(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Назначение = Результат;
КонецПроцедуры       
 
&НаКлиенте
Процедура РасшифровкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Сообщение = Новый СообщениеПользователю;	
	СообщениеОбОшибке = НСтр("ru = 'Сначала выберите %1'");
	
	Если НЕ РасшифроватьПоПоказателям и НЕ ЗначениеЗаполнено(показатель) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, "показатель");
		Сообщение.Текст = ТекстСообщения;
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ РасшифроватьПоНазначениям и НЕ ЗначениеЗаполнено(Назначение) Тогда
		СообщениеОбОшибке = ?(ЗначениеЗаполнено(Сообщение.Текст), НСтр("ru = '"+ТекстСообщения+" %1'"), СообщениеОбОшибке);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ?(ЗначениеЗаполнено(Сообщение.Текст), " и назначение", "назначение"));
		Сообщение.Текст = ТекстСообщения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение.Текст) Тогда
		Сообщение.Текст = Сообщение.Текст+".";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры


 #КонецОбласти 


