

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеДерева();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Описание = ""; 
		КонецЕсли;
	КонецЕсли;
	
	СтатусНеактуальный = (Объект.Статус = Перечисления.УБ_СтатусыМоделейПланирования.Неактуальный);
	СтатусЗакрыто = (Объект.Статус = Перечисления.УБ_СтатусыМоделейПланирования.Закрыто);
	ФормаТолькоПросмотр = (СтатусНеактуальный или СтатусЗакрыто);
	
	ЭтаФорма.ТолькоПросмотр = ФормаТолькоПросмотр;	
	
	Если Не Объект.ГрейдЗакрыт Тогда
		Элементы.ГруппаДатаЗакрытия.Доступность = Ложь;
	КонецЕсли;

	Элементы.ГруппаНастройкиБезокладнойСистемы.Доступность = ПолучитьФункциональнуюОпцию("УБ_ИспользоватьБезокладнуюСистемуПоказателей");
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ЗаполнениеЗначенийИзмененныхФормул(Объект.Показатели, Объект.Ссылка);
		ЗаполнениеЗначенийШкалыПоказателей(Объект.Показатели, Объект.Ссылка);
		
		Если Константы.УБ_ИспользоватьПроизвольныйПериодРасчетаМоделиПланирования.Получить() Тогда
			Объект.ПериодРасчетаМоделиПланирования = Перечисления.УБ_ПериодыРасчетаМоделиПланирования.Произвольный;
		Иначе
			Объект.ПериодРасчетаМоделиПланирования = Перечисления.УБ_ПериодыРасчетаМоделиПланирования.Месяц;	
		КонецЕсли;

	КонецЕсли;
	
	Если Объект.Статус = Перечисления.УБ_СтатусыМоделейПланирования.Действует Тогда
		Объект.АктуальнаяВерсия = Истина;
	Иначе
		Объект.АктуальнаяВерсия = Ложь;
	КонецЕсли;
	
	//Новое ТАА 
	Если Константы.УБ_ИспользоватьБезокладнуюСистемуПоказателей.Получить() Тогда
		СпособСтандартный = (Константы.УБ_СпособРаспределенияПремии.Получить() = Перечисления.УБ_СпособРаспределенияПремии.Стандартный);
		ЗначениеЗаполнено = ЗначениеЗаполнено(Константы.УБ_СпособРаспределенияПремии.Получить());
		Элементы.ГруппаПредельныйКоэффициент.Видимость = СпособСтандартный ИЛИ НЕ ЗначениеЗаполнено;	
	КонецЕсли;
	//Новое ТАА
	
	ОбновитьЗначениеПоказателей();
	
	ЗаполнитьДерево();
	
	УстановитьУсловноеОформлениеДерева();
	
	ЗаполнитьНадписиФормулРасчета();
	
	ДоступностьДобавленияПоказателя();
	
	//ЭлементМодельПланирования = Элементы.Добавить("МодельПланированияЭффективности", Тип("ПолеФормы"),);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ОбновитьОтображениеДанных();
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоПоказателей",,Истина);
	
	УстановитьОформлениеКнопокСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Статус = Перечисления.УБ_СтатусыМоделейПланирования.Действует
		И ЗначениеЗаполнено(ПредыдущаяВерсияГрейда)
		И Не ЗначениеЗаполнено(Объект.Описание) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Описание"" не заполнено'"),
			,
			"Объект.Описание",
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если ИмяСобытия = "ВыборПоказателей" Тогда
		ТекущиеДанные = Элементы.ДеревоПоказателей.ТекущиеДанные;
		//Показатель = ?(ТипЗнч(ТекущиеДанные.Показатель) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности"),ТекущиеДанные.ТипРодитель,ТекущиеДанные.Показатель);
		//ЗаполнитьПодборПоказателейВДерево(Параметр, Показатель);
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ВыборПоказателейДерево" и Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		ТекущиеДанные = Элементы.ДеревоПоказателей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Показатель = Неопределено;
		Иначе	
			Показатель = ?(ТипЗнч(ТекущиеДанные.Показатель) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности"),ТекущиеДанные.ТипРодитель,ТекущиеДанные.Показатель);
		КонецЕсли;	
		ЗаполнитьПодборПоказателейВДерево(Параметр, Показатель);
		Модифицированность = Истина;	
			
	ИначеЕсли ИмяСобытия = "ВыборТиповПоказателей" и Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		
		ЗаполнитьПодборПоказателейВДерево(Параметр);
		Модифицированность = Истина;	
		
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоПоказателей",,Истина);
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	ПроверитьИспользованиеТекущейВерсииГрейда(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаписатьДанныеДерева();
	
	Для Каждого СтрокаПоказатель Из Объект.Показатели Цикл
		
		Если СтрокаПоказатель.Фиксированный Тогда
			СтрокаПоказатель.Расценка = 0;
		КонецЕсли;
		
		Если СтрокаПоказатель.Матричный Тогда
			СтрокаПоказатель.Расценка = 0;
		Иначе
			СтрокаПоказатель.Вес = 0;
		КонецЕсли;
		
		Если Не СтрокаПоказатель.ПланИзМодели Тогда
			СтрокаПоказатель.План = 0;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквизитыПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ВладелецФормы", ВладелецФормы);
	ПараметрыОповещения.Вставить("Грейд", Объект.Грейд);
	ПараметрыОповещения.Вставить("ВерсияГрейда", Объект.ВерсияГрейда);
	ПараметрыОповещения.Вставить("ПериодРасчетаМоделиПланирования", Объект.ПериодРасчетаМоделиПланирования);
	
	Оповестить("Запись_УтверждениеГрейда", ПараметрыОповещения);
	
	Если Объект.ГрейдЗакрыт Тогда
		ПоместитьГрейдВАрхив(Объект.Грейд);
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Действует") Тогда
		ОтметитьНеактуальныеВерсии();
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ПоказыватьПредупреждениеУтвержденнойВерсии Тогда
		ТекстВопроса = НСтр("ru = 'По текущей версии грейда уже произведен расчет эффективности сотрудников. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СтатусПриИзмененииПослеЗакрытияВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СтатусПриИзмененииЗавершение();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтатуса()
	Если ПоказыватьПредупреждениеУтвержденнойВерсии Тогда
		ТекстВопроса = НСтр("ru = 'По текущей версии грейда уже произведен расчет эффективности сотрудников. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СтатусПриИзмененииПослеЗакрытияВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СтатусПриИзмененииЗавершение();
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура СтатусДокументаДействует(Команда)
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Действует") Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Планируется");
	Иначе
		Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Действует")
	КонецЕсли;
	
	ИзменениеСтатуса();
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаПланируется(Команда)
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Планируется") Тогда
		возврат;
	КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Планируется");
	ИзменениеСтатуса();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзмененииПослеЗакрытияВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ВернутьЗначениеСтатусаДоИзменения();
		Возврат;
	КонецЕсли;
			
	ПоказыватьПредупреждениеУтвержденнойВерсии = Ложь;
	
	СтатусПриИзмененииЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзмененииЗавершение()
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Закрыто") Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Неактуальный");
		Сообщить("Это актуальная версия грейда");
	КонецЕсли;	
	
	СтатусДействует = (Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Действует"));
	Если (СтатусДействует И Объект.ДатаУтверждения = '00010101') Тогда
		Объект.ДатаУтверждения = ТекущаяДата();
	КонецЕсли;
	Объект.АктуальнаяВерсия = СтатусДействует;

	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Действует") Тогда
		Объект.АктуальнаяВерсия = Истина;
	Иначе
		Объект.АктуальнаяВерсия = Ложь;
	КонецЕсли;

	УстановитьОформлениеКнопокСтатуса();
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	
	ДоступностьДобавленияПоказателя();
	
КонецПроцедуры 

&НаСервере
Функция ИспользуютсяНесколькоМатричныхВДереве()
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоПоказателей");
	КоличествоМатричныхТипов = 0;
	Для каждого Строка из ДеревоОбъект.Строки Цикл
		Если Строка.Показатель.Матричный Тогда
			КоличествоМатричныхТипов = КоличествоМатричныхТипов + 1;
		КонецЕсли;	
	КонецЦикла;
	
	Если КоличествоМатричныхТипов > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПланированияЭффективностиПриИзменении(Элемент)
	
	МодельПланированияЭффективностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрейдПриИзменении(Элемент)
	
	ГрейдПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяВерсияГрейдаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПредыдущаяВерсияГрейда) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ПредыдущаяВерсияГрейда);
	
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяВерсияГрейдаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(СледующаяВерсияГрейда) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СледующаяВерсияГрейда);
	
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Описание",
		НСтр("ru = 'Описание'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаСервере
Процедура ГрейдЗакрытПриИзмененииНаСервере()
	
	Если Объект.ГрейдЗакрыт Тогда
		
		ПоместитьВАрхив = УБ_РаботаСВерсиямиГрейдов.РазрешитьПоместитьГрейдВАрхив(Объект.МодельПланированияЭффективности,Объект.Грейд);
		Если ПоместитьВАрхив Тогда
			Элементы.ГруппаДатаЗакрытия.Доступность = Истина;
			
			Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Закрыто");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВерсииГрейдов.Регистратор.Дата КАК ДатаРегистратора
				|ИЗ
				|	РегистрСведений.УБ_ВерсииГрейдов КАК ВерсииГрейдов
				|ГДЕ
				|	ВерсииГрейдов.Грейд = &Грейд
				|	И ВерсииГрейдов.Регистратор.ГрейдЗакрыт";
			
			Запрос.УстановитьПараметр("Грейд", Объект.Грейд);
			РезультатЗапроса = Запрос.Выполнить();

			Если Не РезультатЗапроса.Пустой() Тогда
		
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
				ВыборкаДетальныеЗаписи.Следующий();
				
				Если ВыборкаДетальныеЗаписи.ДатаРегистратора > Объект.Дата Тогда
					Объект.ГрейдЗакрыт = Ложь;
					ТекстСообщения = НСтр("ru = 'Закрытие грейда невозможно. Грейд был закрыт более поздним документом'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Истина);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Объект.ГрейдЗакрыт = ПоместитьВАрхив;
			Сообщить("По грейду есть действующие сотрудники");
		КонецЕсли;
	Иначе 
		Объект.ДатаЗакрытия = Дата(1,1,1);
		Элементы.ГруппаДатаЗакрытия.Доступность = Ложь;
		Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Планируется");

		//Если Не НомерСтатусаЗакрыто = Неопределено Тогда
		//	Элементы.Статус.СписокВыбора.Удалить(2);
		//КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрейдЗакрытПриИзменении(Элемент)
	ГрейдЗакрытПриИзмененииНаСервере();
	
	УБ_ПользовательскийИнтерфейсКлиент.СменаЦветаПереключателя(Элементы.ГрейдЗакрыт, Объект.ГрейдЗакрыт);
	
	УстановитьОформлениеКнопокСтатуса();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПоказатели

&НаКлиенте
Процедура ПоказателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СортироватьПоказатели();
	УстановитьОбязательноеЗаполнениеПоказателяРасчетаЗарплатыБезокладнойСистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПоказательЭффективностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Найден = НайтиПоказательВТаблице(ТекущиеДанные.ПоказательЭффективности);
	
	Если Не Найден Тогда	
		
		НастройкиПоказателей = НастройкиПоказателей(ТекущиеДанные.ПоказательЭффективности);
		
		НастройкиТекущегоПоказателя = НастройкиПоказателей.Получить(ТекущиеДанные.ПоказательЭффективности);
		Если НастройкиТекущегоПоказателя = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, НастройкиТекущегоПоказателя);
		Если ТекущиеДанные.ПоказательЭффективности <> ПредыдущийПоказательЭфективности Тогда
			УбратьДобавитьФормулыПриИзмененииПоказателя(ПредыдущийПоказательЭфективности,ТекущиеДанные.ПоказательЭффективности);
			ТекущиеДанные.ФормулаИзменена = Ложь;
		КонецЕсли;
		
		ТипПоказателя = ПолучитьТипПоказателя(ТекущиеДанные.ПоказательЭффективности);
		
		НайтиДобавитьТипПоказателя(ТипПоказателя);
	Иначе
		УдалитьНайденныйПоказатель(ТекущиеДанные.ПоказательЭффективности);
		Сообщить("Данный показатель уже присутствует");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиФормулаРасчетаНачалоВыбора(Элемент)
	
	РедактируемоеПоле = Элементы.Показатели.ТекущиеДанные;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Формула", РедактируемоеПоле.ФормулаРасчета);
	ПараметрыФормы.Вставить("НаименованиеПоказателя", Строка(РедактируемоеПоле.ПоказательЭффективности));
	ПараметрыФормы.Вставить("ПоказательЭффективности", РедактируемоеПоле.ПоказательЭффективности);
	
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьФормулуПоказателяЗавершение", ЭтотОбъект, РедактируемоеПоле.ПоказательЭффективности);
	ОткрытьФорму("ОбщаяФорма.УБ_РедактированиеФормулыПоказателВУтвержденииММ", ПараметрыФормы, ЭтотОбъект,,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПодборПоказателейЭффективности(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Показатели",Объект.Показатели);	
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаПодбораПоказателейЭффективности",СтруктураОтбора,ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьОформлениеКнопокСтатуса()
	Кнопки = Новый Структура();
	Кнопки.Вставить("Действует", Элементы.ФормаСтатусДокументаДействует);
	Кнопки.Вставить("Планируется", Элементы.ФормаСтатусДокументаПланируется);
	Кнопки.Вставить("НЗ", Элементы.ФормаСтатусДокументаНеактуальноЗакрыто);
	
	Цвета = УБ_ПользовательскийИнтерфейсСервер.ПолучитьЦветаСтиля("УМММ");
	
	Для каждого Кнопка Из Кнопки Цикл
		Кнопка.Значение.Пометка = Ложь;
		Кнопка.Значение.ЦветТекста = Цвета.Текст;
		кнопка.Значение.ЦветФона = Цвета.Невыбрано;
	КонецЦикла;
	
	СтатусПД= Ложь;
	СтатусНЗ = Ложь;
	ОтметитьПланируется = Ложь;
	
	ИмяКнопки = "";
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Действует") Тогда
		АктивнаяКнопка = Элементы.ФормаСтатусДокументаДействует;
		ИмяКнопки = "Действует";
		ЦветФона = Цвета.Действует;
		СтатусПД = Истина;
		ОтметитьПланируется = Истина;
	Иначе
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Планируется") Тогда
			АктивнаяКнопка = Элементы.ФормаСтатусДокументаПланируется;
			ИмяКнопки = "Планируется";
			ЦветФона = Цвета.Планируется;
			СтатусПД = Истина;
		Иначе
			АктивнаяКнопка = Элементы.ФормаСтатусДокументаНеактуальноЗакрыто;
			СтатусНЗ = истина;
			Если Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Неактуальный") Тогда
				Элементы.ФормаСтатусДокументаНеактуальноЗакрыто.Заголовок = "Неактуальный";
				ИмяКнопки = "Неактуальный";
				ЦветФона = Цвета.Неактуальный;
			Иначе
				Элементы.ФормаСтатусДокументаНеактуальноЗакрыто.Заголовок = "Закрыт";
				ИмяКнопки = "Закрыт";
				ЦветФона = Цвета.Закрыт;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ИмяКнопки = ИмяКнопки + "Текст";
	Элементы.ФормаСтатусДокументаДействует.Видимость = СтатусПД;
	Элементы.ФормаСтатусДокументаПланируется.Видимость = СтатусПД;
	Элементы.ФормаСтатусДокументаНеактуальноЗакрыто.Видимость = СтатусНЗ;
	
	Элементы.ФормаСтатусДокументаПланируется.Пометка = ОтметитьПланируется;
	Если ОтметитьПланируется Тогда
		Элементы.ФормаСтатусДокументаПланируется.ЦветТекста = ЦветФона;	
	КонецЕсли;
	
	АктивнаяКнопка.Пометка = Истина;
	АктивнаяКнопка.ЦветФона = ЦветФона; 
	АктивнаяКнопка.ЦветТекста = Цвета[ИмяКнопки];
КонецПроцедуры

&НаСервере 
Процедура ЗакрытьВсеВерсии()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВерсииГрейдовСрезПоследних.Регистратор КАК Регистратор
	               |ИЗ
	               |	РегистрСведений.УБ_ВерсииГрейдов.СрезПоследних КАК ВерсииГрейдовСрезПоследних
	               |ГДЕ
	               |	ВерсииГрейдовСрезПоследних.Грейд = &Грейд
	               |	И ВерсииГрейдовСрезПоследних.МодельПланированияЭффективности = &МодельПланированияЭффективности";
	Запрос.УстановитьПараметр("МодельПланированияЭффективности", Объект.МодельПланированияЭффективности);
	Запрос.УстановитьПараметр("Грейд", Объект.Грейд);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.Регистратор) ИЛИ Не Выборка.Регистратор.АктуальнаяВерсия Тогда
				Продолжить;
			КонецЕсли;
			
			НеактуальнаяВерсияОбъект = Выборка.Регистратор.Ссылка.ПолучитьОбъект(); 
			НеактуальнаяВерсияОбъект.АктуальнаяВерсия = Ложь;
			НеактуальнаяВерсияОбъект.Статус = Перечисления.УБ_СтатусыМоделейПланирования.Закрыто;
			НеактуальнаяВерсияОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры	

&НаСервере 
Процедура ОтметитьНеактуальныеВерсии()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ВерсииГрейдов.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.УБ_ВерсииГрейдов КАК УБ_ВерсииГрейдов
		|ГДЕ
		|	УБ_ВерсииГрейдов.МодельПланированияЭффективности = &МодельПланированияЭффективности
		|	И УБ_ВерсииГрейдов.Грейд = &Грейд
		|	И УБ_ВерсииГрейдов.Регистратор <> &Регистратор";
	
	ДатаГраницы = ?(ЗначениеЗаполнено(Объект.ДатаУтверждения), Объект.ДатаУтверждения, ТекущаяДата());
	
	Запрос.УстановитьПараметр("МодельПланированияЭффективности", Объект.МодельПланированияЭффективности);
	Запрос.УстановитьПараметр("Грейд", Объект.Грейд);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	//Запрос.УстановитьПараметр("ГраницаВерсии", Новый Граница(ДатаГраницы, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.Регистратор) ИЛИ Выборка.Регистратор.Статус = Перечисления.УБ_СтатусыМоделейПланирования.Неактуальный Тогда
				Продолжить;
			КонецЕсли;
			
			НеактуальнаяВерсияОбъект = Выборка.Регистратор.Ссылка.ПолучитьОбъект(); 
			НеактуальнаяВерсияОбъект.АктуальнаяВерсия = Ложь;
			НеактуальнаяВерсияОбъект.Статус = Перечисления.УБ_СтатусыМоделейПланирования.Неактуальный;
			НеактуальнаяВерсияОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	УстановитьЗаголовокАктуальностиМоделиПланирования();
	УстановитьОбязательноеЗаполнениеПоказателяРасчетаЗарплатыБезокладнойСистемы();
	ЗаполнитьСлужебныеРеквизитыПоказателей();
	НайтиДругиеУтвержденныеВерсииГрейда();
//	АктуализироватьКэшРеквизитовПоказателей(КэшРеквизитовПоказателей, Объект.Ссылка);
	
	Если Объект.ПоказательРасчетаЗарплатыПриБезокладнойСистеме = Неопределено Тогда
		Объект.ПоказательРасчетаЗарплатыПриБезокладнойСистеме = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("ПоказательРасчетаЗарплаты");
	КонецЕсли;
	
	Если Константы.УБ_ИспользоватьПроизвольныйПериодРасчетаМоделиПланирования.Получить() Тогда
		Объект.ПериодРасчетаМоделиПланирования = Перечисления.УБ_ПериодыРасчетаМоделиПланирования.Произвольный;
	Иначе
		Объект.ПериодРасчетаМоделиПланирования = Перечисления.УБ_ПериодыРасчетаМоделиПланирования.Месяц;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АктуализироватьКэшРеквизитовПоказателей(Кэш, Ссылка)
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_УтверждениеГрейдаПоказатели.ВидРасценки КАК ВидРасценки,
		|	УБ_УтверждениеГрейдаПоказатели.ТипПоказателя.Матричный КАК Матричный,
		|	УБ_УтверждениеГрейдаПоказатели.ТипПоказателя.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы КАК ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы,
		|	УБ_УтверждениеГрейдаПоказатели.ПоказательЭффективности КАК Показатель
		|ИЗ
		|	Документ.УБ_УтверждениеГрейда.Показатели КАК УБ_УтверждениеГрейдаПоказатели
		|ГДЕ
		|	УБ_УтверждениеГрейдаПоказатели.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	СтруктураРеквизитов = Новый Структура("ВидРасценки, Матричный, ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы");
	
	Пока Выборка.Следующий() Цикл
		Если Кэш.Получить(Выборка.Показатель) = Неопределено Тогда
			 ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
			 Кэш.Вставить(Выборка.Показатель, СтруктураРеквизитов);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеТекущейВерсииГрейда(ТекущийОбъект)
	
	Если ТекущийОбъект.Статус = Перечисления.УБ_СтатусыМоделейПланирования.Планируется Тогда
		ПоказыватьПредупреждениеУтвержденнойВерсии = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетЭффективностиСотрудников.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УБ_РасчетЭффективностиСотрудников КАК РасчетЭффективностиСотрудников
		|ГДЕ	
		|	РасчетЭффективностиСотрудников.МодельПланированияЭффективности = &МодельПланированияЭффективности
		|	И РасчетЭффективностиСотрудников.Грейд = &Грейд
		|	И РасчетЭффективностиСотрудников.ВерсияГрейда = &ВерсияГрейда
		|	И РасчетЭффективностиСотрудников.Проведен
		|	И НЕ РасчетЭффективностиСотрудников.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МодельПланированияЭффективности", ТекущийОбъект.МодельПланированияЭффективности);
	Запрос.УстановитьПараметр("Грейд", ТекущийОбъект.Грейд);
	Запрос.УстановитьПараметр("ВерсияГрейда", ТекущийОбъект.ВерсияГрейда);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПоказыватьПредупреждениеУтвержденнойВерсии = Не РезультатЗапроса.Пустой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиВес.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.Матричный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	
	
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиРасценка.Имя);
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.ИспользоватьШкалуПоказателей");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Истина;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	//Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<расценка по шкале>'"));
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиРасценка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.Матричный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиРасценка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.Фиксированный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<общая настройка>'"));
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.ПланИзМодели");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<заполняется при расчете>'"));
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.ПланИзМодели");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.План");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиМинимальноеЗначениеРезультата.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.ОграничиватьМинимальноеЗначениеРезультата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не ограничено>'"));
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиМаксимальноеЗначениеРезультата.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.ОграничиватьМаксимальноеЗначениеРезультата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не ограничено>'"));
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиМаксимальноеЗначениеРезультата.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.ОграничиватьМаксимальноеЗначениеРезультата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.МаксимальноеЗначениеРезультата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиШкалаПоказателей.Имя);
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.ИспользоватьШкалуПоказателей");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;
	
	//Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	//Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	
	//
	
КонецПроцедуры

&НаСервере
Процедура ВернутьЗначениеСтатусаДоИзменения()
	
	Объект.Статус = Объект.Ссылка.Статус;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокАктуальностиМоделиПланирования()
	
	УБ_КадровыйУчет.СостояниеМоделиПланированияЭффективности(Объект.МодельПланированияЭффективности,
		Элементы.ТекстМодельЗакрыта);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если Объект.Подразделение = Неопределено Или Объект.Подразделение.Владелец <> Объект.Организация Тогда
		Объект.Подразделение = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение");
	КонецЕсли;
	
	ПодразделениеПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.МодельПланированияЭффективности)
		И Объект.МодельПланированияЭффективности.ШтатноеРасписание.Подразделение <> Объект.Подразделение Тогда
		
		Объект.МодельПланированияЭффективности = Справочники.УБ_МоделиПланированияЭффективности.ПустаяСсылка();
		
	КонецЕсли;
	
	МодельПланированияЭффективностиПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура МодельПланированияЭффективностиПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Грейд)
		И Объект.Грейд.Владелец <> Объект.МодельПланированияЭффективности Тогда
		
		Объект.Грейд = Справочники.УБ_Грейды.ПустаяСсылка();
		
	КонецЕсли;
	
	УстановитьЗаголовокАктуальностиМоделиПланирования();
	ГрейдПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ГрейдПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.ВерсияГрейда)
		И Объект.ВерсияГрейда.Владелец <> Объект.Грейд Тогда
		
		Объект.ВерсияГрейда = Справочники.УБ_ВерсииГрейдов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиДругиеУтвержденныеВерсииГрейда(УчитыватьПланируемые = Истина)
	
	ПредыдущаяВерсияГрейда = Неопределено;
	ПредыдущаяВерсияГрейдаПредставление = "";
	Элементы.ГруппаСВГПредыдущаяВерсия.Видимость = Ложь;
	СледующаяВерсияГрейда = Неопределено;
	СледующаяВерсияГрейдаПредставление = "";
	Элементы.ГруппаВГСледующаяВерсия.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.МодельПланированияЭффективности)
		Или Не ЗначениеЗаполнено(Объект.Грейд) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииГрейдовСрезПоследних.Регистратор КАК Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(ВерсииГрейдовСрезПоследних.ВерсияГрейда) КАК ВерсияГрейдаПредставление,
		|	""Предыдущая"" КАК Порядок
		|ИЗ
		|	РегистрСведений.УБ_ВерсииГрейдов.СрезПоследних(
		|		&ГраницаВерсии,
		|		МодельПланированияЭффективности = &МодельПланированияЭффективности
		|			И Грейд = &Грейд
		|			И Статус = ЗНАЧЕНИЕ(Перечисление.УБ_СтатусыМоделейПланирования.Действует)) КАК ВерсииГрейдовСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВерсииГрейдовСрезПервых.Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(ВерсииГрейдовСрезПервых.ВерсияГрейда),
		|	""Следующая""
		|ИЗ
		|	РегистрСведений.УБ_ВерсииГрейдов.СрезПервых(
		|		&ГраницаВерсии,
		|		МодельПланированияЭффективности = &МодельПланированияЭффективности
		|			И Грейд = &Грейд
		|			И (Статус = ЗНАЧЕНИЕ(Перечисление.УБ_СтатусыМоделейПланирования.Действует) 
		|				ИЛИ 
		|			(&УчитыватьПланируемые И Статус = ЗНАЧЕНИЕ(Перечисление.УБ_СтатусыМоделейПланирования.Планируется)) )) КАК ВерсииГрейдовСрезПервых";

	
	ДатаГраницы = ?(ЗначениеЗаполнено(Объект.ДатаУтверждения), Объект.ДатаУтверждения, ТекущаяДата());
	
	Запрос.УстановитьПараметр("МодельПланированияЭффективности", Объект.МодельПланированияЭффективности);
	Запрос.УстановитьПараметр("Грейд", Объект.Грейд);
	Запрос.УстановитьПараметр("ГраницаВерсии", Новый Граница(ДатаГраницы, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("УчитыватьПланируемые", УчитыватьПланируемые);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			Если Выборка.Порядок = "Предыдущая" Тогда
				ПредыдущаяВерсияГрейда = Выборка.Регистратор;
				ПредыдущаяВерсияГрейдаПредставление = Выборка.ВерсияГрейдаПредставление;
			ИначеЕсли Выборка.Порядок = "Следующая" Тогда
				СледующаяВерсияГрейда = Выборка.Регистратор;
				СледующаяВерсияГрейдаПредставление = Выборка.ВерсияГрейдаПредставление;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ГруппаСВГПредыдущаяВерсия.Видимость = ЗначениеЗаполнено(ПредыдущаяВерсияГрейда);
	Элементы.ГруппаВГСледующаяВерсия.Видимость = ЗначениеЗаполнено(СледующаяВерсияГрейда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиПоказателей(ПоказателиЭффективности)
	
	НастройкиПоказателей = Новый Соответствие;
	
	Если ТипЗнч(ПоказателиЭффективности) <> Тип("Массив") Тогда
		МассивПоказателей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПоказателиЭффективности);
	Иначе
		МассивПоказателей = ПоказателиЭффективности;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиЭффективности.Ссылка КАК Ссылка,
		|	ПоказателиЭффективности.Фиксированный КАК Фиксированный,
		|	ВЫБОР
		|	КОГДА ПоказателиЭффективности.ВариантРасчетаЗначенияПлана = ЗНАЧЕНИЕ(Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.ИзМодели)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПланИзМодели,
		|	ТипыПоказателей.Матричный КАК Матричный,
		|	ПоказателиЭффективности.ОграничиватьМинимальноеЗначениеРезультата КАК ОграничиватьМинимальноеЗначениеРезультата,
		|	ПоказателиЭффективности.МинимальноеЗначениеРезультата КАК МинимальноеЗначениеРезультата,
		|	ПоказателиЭффективности.ОграничиватьМаксимальноеЗначениеРезультата КАК ОграничиватьМаксимальноеЗначениеРезультата,
		|	ПоказателиЭффективности.МаксимальноеЗначениеРезультата КАК МаксимальноеЗначениеРезультата,
		//|	ПоказателиЭффективности.ИспользоватьШкалуПоказателей КАК ИспользоватьШкалуПоказателей,
		|	ПоказателиЭффективности.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочиванияПоказателя,
		|	ТипыПоказателей.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочиванияТипаПоказателя,
		|	ПоказателиЭффективности.ИспользоватьФормулу КАК ИспользоватьФормулу,
		|	ПоказателиЭффективности.ФормулаРасчета КАК ФормулаРасчета
		|ИЗ
		|	Справочник.УБ_ПоказателиЭффективности КАК ПоказателиЭффективности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБ_ТипыПоказателей КАК ТипыПоказателей
		|		ПО ПоказателиЭффективности.ТипПоказателя = ТипыПоказателей.Ссылка
		|ГДЕ
		|	ПоказателиЭффективности.Ссылка В(&МассивПоказателей)";
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КолонкиРезультатаЗапроса = "";
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		КолонкиРезультатаЗапроса = КолонкиРезультатаЗапроса
			+ ?(ЗначениеЗаполнено(КолонкиРезультатаЗапроса), ", ", "")
			+ Колонка.Имя;
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НастройкиТекущегоПоказателя = Новый Структура(КолонкиРезультатаЗапроса);
		ЗаполнитьЗначенияСвойств(НастройкиТекущегоПоказателя, Выборка);
		
		НастройкиПоказателей.Вставить(Выборка.Ссылка, НастройкиТекущегоПоказателя);
		
	КонецЦикла;
	
	Возврат НастройкиПоказателей;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоказателей()
	
	ТаблицаПоказатели = Объект.Показатели.Выгрузить(, "ПоказательЭффективности");
	МассивПоказателей = ТаблицаПоказатели.ВыгрузитьКолонку("ПоказательЭффективности");
	
	НастройкиПоказателей = НастройкиПоказателей(МассивПоказателей);
	
	Для Каждого СтрокаПоказателя Из Объект.Показатели Цикл
		
		НастройкаТекущегоПоказателя = НастройкиПоказателей.Получить(СтрокаПоказателя.ПоказательЭффективности);
		Если НастройкаТекущегоПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаТекущегоПоказателя.ФормулаРасчета = СтрокаПоказателя.ФормулаРасчета;
		
		ЗаполнитьЗначенияСвойств(СтрокаПоказателя, НастройкаТекущегоПоказателя,
			,
			"МинимальноеЗначениеРезультата, МаксимальноеЗначениеРезультата");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоказатели()
	
	Объект.Показатели.Сортировать("РеквизитДопУпорядочиванияТипаПоказателя, РеквизитДопУпорядочиванияПоказателя");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовФормы(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Закрыто") Тогда
		
		Форма.ТолькоПросмотр = Истина;
		
	Иначе	
	
		ГрейдУтвержден = (Объект.Статус <> ПредопределенноеЗначение("Перечисление.УБ_СтатусыМоделейПланирования.Планируется"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатаУтверждения",
			"ТолькоПросмотр",
			ГрейдУтвержден);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Организация",
			"ТолькоПросмотр",
			ГрейдУтвержден);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Подразделение",
			"ТолькоПросмотр",
			ГрейдУтвержден);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"МодельПланированияЭффективности",
			"ТолькоПросмотр",
			ГрейдУтвержден);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Грейд",
			"ТолькоПросмотр",
			ГрейдУтвержден);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ШкалаПоказателей",
			"ТолькоПросмотр",
			ГрейдУтвержден);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВариантРасчетаПремии",
			"ТолькоПросмотр",
			ГрейдУтвержден);
		//_____________________________________________________________
		//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		//	Элементы,
		//	"ПоказательРасчетаЗарплатыПриБезокладнойСистеме",
		//	"ТолькоПросмотр",
		//	ГрейдУтвержден);
		//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		//	Элементы,
		//	"ПредельныйКоэффициент",
		//	"ТолькоПросмотр",
		//	ГрейдУтвержден);
		//Заменено на :
		//
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНастройкиБезокладнойСистемы",
			"ТолькоПросмотр",
			ГрейдУтвержден);
		//_____________________________________________________________
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Показатели",
			"ТолькоПросмотр",
			ГрейдУтвержден);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТипыПоказателей",
			"ТолькоПросмотр",
			ГрейдУтвержден);	
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Стандарты",
			"ТолькоПросмотр",
			ГрейдУтвержден);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПериодРасчетаМоделиПланирования",
			"ТолькоПросмотр",
			ГрейдУтвержден);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПодборПоказателейЭффективности",
			"Доступность",
			Не ГрейдУтвержден);
			
		//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		//	Элементы,
		//	"ДеревоПоказателей",
		//	"ТолькоПросмотр",
		//	ГрейдУтвержден);
		//Замена 3х Нижних
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДеревоПоказателейРасценка",
			"ТолькоПросмотр",
			ГрейдУтвержден);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДеревоПоказателейВес",
			"ТолькоПросмотр",
			ГрейдУтвержден);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДеревоПоказателейПлан",
			"ТолькоПросмотр",
			ГрейдУтвержден);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПодборПоказателейВДерево",
			"Доступность",
			Не ГрейдУтвержден);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДеревоПоказателейПодборТиповПоказателейВДерево",
			"Доступность",
			Не ГрейдУтвержден);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОбязательноеЗаполнениеПоказателяРасчетаЗарплатыБезокладнойСистемы()
	
	ЕстьТипПоказателяДляРасчетаКоэффициентовРаспределения = Ложь;
	Для Каждого СтрокаПоказателя Из Объект.Показатели Цикл
		Если СтрокаПоказателя.ПоказательЭффективности.ТипПоказателя.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы Тогда
			ЕстьТипПоказателяДляРасчетаКоэффициентовРаспределения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПоказательРасчетаЗарплатыПриБезокладнойСистеме.АвтоОтметкаНезаполненного = ЕстьТипПоказателяДляРасчетаКоэффициентовРаспределения;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьГрейдВАрхив(Грейд)
	
	ГрейдОбъект = Грейд.ПолучитьОбъект();
	ГрейдОбъект.ВАрхиве = Истина;
	ГрейдОбъект.Записать();
	
	//ЗакрытьВсеВерсии();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФормулуПоказателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Показатели Цикл
	    Если СтрокаТЧ.ПоказательЭффективности = ДополнительныеПараметры Тогда
			СтрокаТЧ.ФормулаРасчета = Результат.Формула;
			СтрокаТЧ.ФормулаИзменена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийШкалыПоказателей(Показатели, Регистратор)
		
КонецПроцедуры


//???
&НаСервере
Процедура ЗаполнениеЗначенийИзмененныхФормул(Показатели, Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УБ_ФормулыПоказателейЭффективности.ПоказательЭффективности КАК ПоказательЭффективности,
		|	УБ_ФормулыПоказателейЭффективности.ФормулаРасчета КАК ФормулаРасчета
		|ИЗ
		|	РегистрСведений.УБ_ФормулыПоказателейЭффективности КАК УБ_ФормулыПоказателейЭффективности
		|ГДЕ
		|	УБ_ФормулыПоказателейЭффективности.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для Каждого СтрокаТЧ Из Показатели Цикл
			Если СтрокаТЧ.ПоказательЭффективности = Выборка.ПоказательЭффективности Тогда
				СтрокаТЧ.ФормулаРасчета = Выборка.ФормулаРасчета;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиФормулаИзмененаПриИзменении(Элемент)
		
	ПоказателиФормулаИзмененаПриИзмененииНаСервере(Элементы.Показатели.ТекущиеДанные.НомерСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПоказателиФормулаИзмененаПриИзмененииНаСервере(НомерСтроки)
	
	Если Не Объект.Показатели[НомерСтроки-1].ФормулаИзменена Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УБ_ПоказателиЭффективности.ФормулаРасчета КАК ФормулаРасчета
			|ИЗ
			|	Справочник.УБ_ПоказателиЭффективности КАК УБ_ПоказателиЭффективности
			|ГДЕ
			|	УБ_ПоказателиЭффективности.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Показатели[НомерСтроки-1].ПоказательЭффективности);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Объект.Показатели[НомерСтроки-1].ФормулаРасчета = Выборка.ФормулаРасчета; 
		КонецЕсли;		
	КонецЕсли;
	
КонецПРоцедуры

&НаКлиенте
Процедура ПоказателиФормулаРасчетаПриИзменении(Элемент)
	Объект.Показатели[Элементы.Показатели.ТекущиеДанные.НомерСтроки-1].ФормулаИзменена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиФормулыРасчетаНажатие(Элемент)
	
	РедактируемоеПоле = Элементы.Показатели.ТекущиеДанные;	
	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("ПоказательЭффективности",РедактируемоеПоле.ПоказательЭффективности);
	Найденные = Объект.ФормулыРасчета.НайтиСтроки(Отбор);
	ПараметрыФормы.Вставить("ТаблицаФормул", Найденные);
	ПараметрыФормы.Вставить("НаименованиеПоказателя", Строка(РедактируемоеПоле.ПоказательЭффективности));
	ПараметрыФормы.Вставить("ПоказательЭффективности", РедактируемоеПоле.ПоказательЭффективности);
	
	
	Оповещение = Новый ОписаниеОповещения("ЗафиксироватьФормулыРасчета", ЭтотОбъект, РедактируемоеПоле.ПоказательЭффективности);
	ОткрытьФорму("ОбщаяФорма.УБ_ФормаПодбораФормулРасчета", ПараметрыФормы, ЭтотОбъект,,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗафиксироватьФормулыРасчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПоказательЭффективности",ДополнительныеПараметры);
	Найденные = Объект.ФормулыРасчета.НайтиСтроки(Отбор);
	н = 0;
	Пока Найденные.Количество()>0 Цикл
		Объект.ФормулыРасчета.Удалить(Найденные[0].НомерСтроки-1);
		Найденные.Удалить(0);
	КонецЦикла;	
	
	н = 0;	
	Пока н<Результат.МассивФормул.Количество() Цикл
	    НоваяСтрока = Объект.ФормулыРасчета.Добавить();
		НоваяСтрока.ПоказательЭффективности = ДополнительныеПараметры;
		НоваяСтрока.Ячейка = Результат.МассивЯчеек[н];
		НоваяСтрока.ФормулаРасчета = Результат.МассивФормул[н];
		н = н+1;
	КонецЦикла;
	ЗаполнитьНадписиФормулРасчета(); 
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНадписиФормулРасчета()
	
	Для каждого СтрокаТЧ из Объект.Показатели Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ПоказательЭффективности",СтрокаТЧ.ПоказательЭффективности);
		Найденные = Объект.ФормулыРасчета.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(Найденные) Тогда
			Если ФормулыРавны(Найденные,СтрокаТЧ.ПоказательЭффективности) Тогда
				СтрокаТЧ.ФормулыРасчета = "Заполнено";
				СтрокаТЧ.ФормулаИзменена = Ложь;
			Иначе	
				СтрокаТЧ.ФормулыРасчета = "Заполнено";
				СтрокаТЧ.ФормулаИзменена = Истина;
			КонецЕсли;	
		Иначе
			Если СтрокаТЧ.ПоказательЭффективности.ФормулыРасчета.Количество() = 0 Тогда
				СтрокаТЧ.ФормулыРасчета = "Не заполнено";
				СтрокаТЧ.ФормулаИзменена = Ложь;
			Иначе
				СтрокаТЧ.ФормулыРасчета = "Не заполнено";
				СтрокаТЧ.ФормулаИзменена = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Функция ФормулыРавны(Формулы,Показатель)
	
	Равны = Истина;
	Если Формулы.Количество() = Показатель.ФормулыРасчета.Количество() Тогда
		Для каждого Строка из Формулы Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("Ячейка",Строка.Ячейка);
			Отбор.Вставить("Формула",Строка.ФормулаРасчета);
			Если Показатель.ФормулыРасчета.НайтиСтроки(Отбор).Количество() = 0 Тогда
				Равны = Ложь;	
			КонецЕсли;
		КонецЦикла;
	Иначе
		Равны = Ложь;
	КонецЕсли;
	
	Возврат Равны;
	
КонецФункции	

&НаКлиенте
Процедура ПоказателиФормулыРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РедактируемоеПоле = Элементы.Показатели.ТекущиеДанные;	
	ПараметрыФормы = Новый Структура;
	ТипПоказателя = ПолучитьТипПоказателя(РедактируемоеПоле.ПоказательЭффективности);
	СФормироватьСписокФормул(ПараметрыФормы, РедактируемоеПоле.ПоказательЭффективности, ТипПоказателя);
	ПараметрыФормы.Вставить("СписокДоступныхПоказателей",СобратьМассивДоступныхЗначений());
	ПараметрыФормы.Вставить("НаименованиеПоказателя", Строка(РедактируемоеПоле.ПоказательЭффективности));
	ПараметрыФормы.Вставить("ПоказательЭффективности", РедактируемоеПоле.ПоказательЭффективности);
	
	Оповещение = Новый ОписаниеОповещения("ЗафиксироватьФормулыРасчета", ЭтотОбъект, РедактируемоеПоле.ПоказательЭффективности);
	ОткрытьФорму("ОбщаяФорма.УБ_ФормаПодбораФормулРасчета", ПараметрыФормы, ЭтотОбъект,,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаСервере
Функция СобратьМассивДоступныхЗначений()
	
	МассивПоказателей = Новый Массив;
	Для каждого Строка из Объект.Показатели Цикл
		Найден = МассивПоказателей.Найти(Строка.ПоказательЭффективности.Идентификатор);
		Если Не ЗначениеЗаполнено(Найден) Тогда
			МассивПоказателей.Добавить(Строка.ПоказательЭффективности.Идентификатор);
		КонецЕсли;
		Найден = МассивПоказателей.Найти(Строка.ПоказательЭффективности.ТипПоказателя.Идентификатор);
		Если Не ЗначениеЗаполнено(Найден) Тогда
			МассивПоказателей.Добавить(Строка.ПоказательЭффективности.ТипПоказателя.Идентификатор);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивПоказателей; 
	
КонецФункции	

&НаСервере
Процедура СФормироватьСписокФормул(ПараметрыФормы, ПоказательЭффективности,ТипПоказателя)
	
	МассивФормул = Новый Массив;
	МассивЯчеек = Новый Массив;
	Отбор = Новый Структура;
	Отбор.Вставить("ПоказательЭффективности",ПоказательЭффективности);
	Отбор.Вставить("ТипПоказателя",ТипПоказателя);
	Найденные = Объект.ФормулыРасчета.НайтиСтроки(Отбор);
	Для каждого Строка из Найденные Цикл
		МассивЯчеек.Добавить(Строка.Ячейка);
		МассивФормул.Добавить(Строка.ФормулаРасчета);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("МассивФормул", МассивФормул);
	ПараметрыФормы.Вставить("МассивЯчеек", МассивЯчеек);
	
КонецПроцедуры	

&НаСервере
Процедура УбратьДобавитьФормулыПриИзмененииПоказателя(СтарыйПоказатель,НовыйПоказатель)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПоказательЭффективности",СтарыйПоказатель);
	Найденные = Объект.ФормулыРасчета.НайтиСтроки(Отбор);
	Пока Найденные.Количество()>0 Цикл
		Объект.ФормулыРасчета.Удалить(Найденные[0].НомерСтроки-1);
		Найденные.Удалить(0);
	КонецЦикла;	
	Если ЗначениеЗаполнено(НовыйПоказатель.ФормулыРасчета) Тогда
		Для каждого Строка из НовыйПоказатель.ФормулыРасчета Цикл
			НоваяСтрока = Объект.ФормулыРасчета.Добавить();
			НоваяСтрока.ПоказательЭффективности = НовыйПоказатель;
			НоваяСтрока.Ячейка = Строка.Ячейка;
			НоваяСтрока.ФормулаРасчета = Строка.Формула;
		КонецЦикла;	
	КонецЕсли;;
	ЗаполнитьНадписиФормулРасчета();	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказателиПоказательЭффективностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредыдущийПоказательЭфективности = Элементы.Показатели.ТекущиеДанные.ПоказательЭффективности;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередУдалением(Элемент, Отказ)
	
	УдаляемыйПоказатель = Элемент.ТекущиеДанные.ПоказательЭффективности;
	ПроверитьУдалитьТипПоказателя(УдаляемыйПоказатель);
	УдалитьФормулыПоказателя(УдаляемыйПоказатель);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипПоказателя(ПоказательЭффективности)
	Возврат ПоказательЭффективности.ТипПоказателя;	
КонецФункции

&НаСервере
Функция ПолучитьШкалуПоказателей(ПоказательЭффективности)
	Возврат ПоказательЭффективности.ШкалаПоказателей;	
КонецФункции

&НаСервере
Процедура УдалитьФормулыПоказателя(УдаляемыйПоказатель)

	Отбор = Новый Структура;
	Отбор.Вставить("ПоказательЭффективности",УдаляемыйПоказатель);
	Найденные = Объект.ФормулыРасчета.НайтиСтроки(Отбор);
	Пока Найденные.Количество()>0 Цикл
		Объект.ФормулыРасчета.Удалить(Найденные[0].НомерСтроки-1);
		Найденные.Удалить(0);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПроверитьУдалитьТипПоказателя(УдаляемыйПоказатель)

	УдалятьТипПоказателя = Истина;
	Для каждого строка из Объект.Показатели Цикл	
		Если Не Строка.ПоказательЭффективности = УдаляемыйПоказатель И Строка.ПоказательЭффективности.ТипПоказателя = УдаляемыйПоказатель.ТипПоказателя Тогда
			УдалятьТипПоказателя = Ложь;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Если  УдалятьТипПоказателя Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ТипПоказателя",УдаляемыйПоказатель.ТипПоказателя);
		Найденные = Объект.ТипыПоказателей.НайтиСтроки(Отбор);
		Если Найденные.Количество() Тогда
			Объект.ТипыПоказателей.Удалить(Найденные[0].Номерстроки-1);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура НайтиДобавитьТипПоказателя(ТипПоказателя)

	Отбор = Новый Структура;
	Отбор.Вставить("ТипПоказателя",ТипПоказателя);
	Найденные = Объект.ТипыПоказателей.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(Найденные) Тогда
		НоваяСтрока = Объект.ТипыПоказателей.Добавить();
		НоваяСтрока.ТипПоказателя = ТипПоказателя;
		НоваяСтрока.ФормулаРасчета = ТипПоказателя.ФормулаРасчета;
	КонецЕсли; 
	
КонецПроцедуры	

&НаКлиенте
Процедура ТипыПоказателяФормулаРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РедактируемоеПоле = Элементы.ТипыПоказателей.ТекущиеДанные;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокДоступныхПоказателей",СобратьМассивДоступныхЗначений());	
	ПараметрыФормы.Вставить("Формула", РедактируемоеПоле.ФормулаРасчета);
	ПараметрыФормы.Вставить("НаименованиеПоказателя", Строка(РедактируемоеПоле.ТипПоказателя));
	ПараметрыФормы.Вставить("ПоказательЭффективности", РедактируемоеПоле.ТипПоказателя);
	
	
	Оповещение = Новый ОписаниеОповещения("ЗафиксироватьФормулуРасчетаЗавершение", ЭтотОбъект,РедактируемоеПоле.ТипПоказателя);
	ОткрытьФорму("ОбщаяФорма.УБ_РедактированиеФормулыПоказателВУтвержденииММ", ПараметрыФормы, ЭтотОбъект,,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 
	
&НаКлиенте
Процедура ЗафиксироватьФормулуРасчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого строка из Объект.ТипыПоказателей Цикл
		Если Строка.ТипПоказателя = ДополнительныеПараметры Тогда
			Строка.ФормулаРасчета = Результат.Формула;
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказателиПослеУдаления(Элемент)
	
	//УдаляемыйПоказатель = Элемент.ТекущиеДанные.ПоказательЭффективности;
	
	//ПроверитьУдалитьТипПоказателя(УдаляемыйПоказатель);	
	
КонецПроцедуры

&НаСервере
Функция НайтипоказательВТаблице(ПоказательЭффективности) 
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПоказательЭффективности", ПоказательЭффективности);
	Найденные = Объект.Показатели.НайтиСтроки(Отбор);
	Если Найденные.Количество() > 1 Тогда
		Возврат Истина	
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура УдалитьНайденныйПоказатель(ПоказательЭффективности)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПоказательЭффективности", ПоказательЭффективности);
	Найденные = Объект.Показатели.НайтиСтроки(Отбор);
	Объект.Показатели.Удалить(Найденные[1].НомерСтроки-1);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоказателиШкалаПоказателейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказательЭффективности", ТекущиеДанные.ПоказательЭффективности);
	
	Оповещение = Новый ОписаниеОповещения("ЗафиксироватьШкалуПоказателяЗавершение", ЭтотОбъект,ТекущиеДанные.ПоказательЭффективности);
	
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаПодбораШкалы", ПараметрыФормы,ЭтотОбъект,,,,
		Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗафиксироватьШкалуПоказателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности") Тогда
		Для каждого строка из Объект.Показатели Цикл
			Если Строка.ПоказательЭффективности = ДополнительныеПараметры Тогда
				Строка.ШкалаПоказателей = Результат.ШкалаПоказателя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("СправочникСсылка.УБ_ТипыПоказателей") Тогда
		Для каждого строка из Объект.ТипыПоказателей Цикл
			Если Строка.ТипПоказателя = ДополнительныеПараметры Тогда
				Строка.ШкалаПоказателя = Результат.ШкалаПоказателя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ТипыПоказателейШкалаПоказателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТипыПоказателей.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипПоказателя", ТекущиеДанные.ТипПоказателя);
	
	Оповещение = Новый ОписаниеОповещения("ЗафиксироватьШкалуПоказателяЗавершение", ЭтотОбъект,ТекущиеДанные.ТипПоказателя);
	
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаПодбораШкалы", ПараметрыФормы,ЭтотОбъект,,,,
		Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеПоказателей()
	
	Для каждого Строка из Объект.Показатели Цикл
		Если Не ЗначениеЗаполнено(Строка.ТипПоказателя) Тогда
			Строка.ТипПоказателя = Строка.ПоказательЭффективности.ТипПоказателя;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ФормулаРасчета) и Объект.ФормулыРасчета.Количество() = 0 Тогда
			НоваяФормула = Объект.ФормулыРасчета.Добавить();
			НоваяФормула.Ячейка = "Сумма";
			НоваяФормула.ФормулаРасчета = Строка.ФормулаРасчета;
			НоваяФормула.ПоказательЭффективности = Строка.ПоказательЭффективности;
			НоваяФормула.ТипПоказателя = Строка.ТипПоказателя;
		КонецЕсли;
		Отбор = Новый Структура;
		Отбор.Вставить("ТипПоказателя",Строка.ТипПоказателя);
		Если Объект.ТипыПоказателей.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НовыйТипПоказателя = Объект.ТипыПоказателей.Добавить();
			НовыйТипПоказателя.ТипПоказателя = Строка.ТипПоказателя;
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого Строка из Объект.ФормулыРасчета Цикл
		Если Не ЗначениеЗаполнено(Строка.ТипПоказателя) Тогда
			Строка.ТипПоказателя = Строка.ПоказательЭффективности.ТипПоказателя;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	


#КонецОбласти

#Область ЗаполнениеИФункцииДерева 

&НаСервере
Процедура ЗаполнитьДерево()
	
	Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");
	ПериодыИспользованияПоказателейТаблица = РеквизитФормыВЗначение("ПериодыИспользованияПоказателей");
	ФормулыТаблица = РеквизитФормыВЗначение("ФормулыПоказателей");
	Дерево.Строки.Очистить();
	
	Для каждого ТипПоказателя из Объект.ТипыПоказателей Цикл
		
		НоваяСтрокаТипаПоказателя = Дерево.Строки.Добавить();
		
		НоваяСтрокаТипаПоказателя.Показатель = ТипПоказателя.ТипПоказателя;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТипаПоказателя, ТипПоказателя);
		НоваяСтрокаТипаПоказателя.Формула = ТипПоказателя.ФормулаРасчета;
		НоваяСтрокаТипаПоказателя.УровеньГруппировки = 0;
		Отбор = Новый Структура;
		Отбор.Вставить("ТипПоказателя",ТипПоказателя.ТипПоказателя);
		ЗависимыеПоказатели = Объект.Показатели.НайтиСтроки(Отбор);
		Для Каждого Показатель из ЗависимыеПоказатели Цикл
			НовыйСтрокаПоказателя = НоваяСтрокаТипаПоказателя.Строки.Добавить();
			НовыйСтрокаПоказателя.Показатель = Показатель.ПоказательЭффективности;
			ЗаполнитьЗначенияСвойств(НовыйСтрокаПоказателя,Показатель);
			Если ЗначениеЗаполнено(Показатель.ШкалаПоказателей) Тогда
				НовыйСтрокаПоказателя.ШкалаПоказателя = Показатель.ШкалаПоказателей;
			Иначе
				Шкала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель.ПоказательЭффективности,"ШкалаПоказателей");
				НовыйСтрокаПоказателя.ШкалаПоказателя = Шкала;
			КонецЕсли;
			НовыйСтрокаПоказателя.ТипРодитель = ТипПоказателя.ТипПоказателя;
			НовыйСтрокаПоказателя.ТипРасчета = Показатель.ПоказательЭффективности.ТипРасчета;
			НовыйСтрокаПоказателя.ЕдиницаЭффективности = Показатель.ПоказательЭффективности.ЕдиницаИзмерения;
			НовыйСтрокаПоказателя.УровеньГруппировки = 1;	
		КонецЦикла;
		Если ТипПоказателя.ТипПоказателя.Матричный Тогда
			НоваяСтрокаТипаПоказателя.Вес = НоваяСтрокаТипаПоказателя.Строки.Итог("Вес");
		КонецЕсли;	
	КонецЦикла;
	Для каждого Формула из Объект.ФормулыРасчета Цикл
		ФормулаПоказателя = ФормулыТаблица.Добавить();
		//ЗаполнитьЗначенияСвойств(ФормулаПоказателя, Формула);
		Если ЗначениеЗаполнено(Формула.ТипПоказателя) Тогда
			ФормулаПоказателя.ТипПоказателя = Формула.ТипПоказателя;
			ФормулаПоказателя.Показатель = Формула.ПоказательЭффективности;
			ФормулаПоказателя.Формула = Формула.ФормулаРасчета;
			ФормулаПоказателя.Ячейка = Формула.Ячейка;
			ФормулаПоказателя.НомерСтроки = ФормулыТаблица.Количество();
		ИначеЕсли ЗначениеЗаполнено(Формула.ПоказательЭффективности) Тогда	
			Отбор = Новый Структура;
			Отбор.Вставить("ПоказательЭффективности",Формула.ПоказательЭффективности);
			Показатель = Объект.Показатели.НайтиСтроки(Отбор);
			ФормулаПоказателя.ТипПоказателя = Показатель[0].ТипПоказателя;
			ФормулаПоказателя.Показатель = Формула.ПоказательЭффективности;
			ФормулаПоказателя.Формула = Формула.ФормулаРасчета;
			ФормулаПоказателя.Ячейка = Формула.Ячейка;
			ФормулаПоказателя.НомерСтроки = ФормулыТаблица.Количество();
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка из Объект.ПериодыИспользованияПоказателей Цикл
		НовыйПериод = ПериодыИспользованияПоказателейТаблица.Добавить();
		НовыйПериод.Показатель = Строка.показательЭффективности;
		НовыйПериод.ТипПоказателя = Строка.ТипПоказателя;
		НовыйПериод.Месяц = Строка.Месяц;
		НовыйПериод.НомерСтроки = ПериодыИспользованияПоказателейТаблица.Количество();
	КонецЦикла;
	ПроверитьЗаполненостьПараметров(Дерево);
	ДеревоПустое = Не ЗначениеЗаполнено(Дерево.Строки);
	ЗначениеВРеквизитФормы(ПериодыИспользованияПоказателейТаблица, "ПериодыИспользованияПоказателей");
	ЗначениеВРеквизитФормы(ФормулыТаблица, "ФормулыПоказателей");
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПоказателей");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеДерева()
	
	Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");
	ПериодыИспользованияПоказателейТаблица = РеквизитФормыВЗначение("ПериодыИспользованияПоказателей");
	ФормулыТаблица = РеквизитФормыВЗначение("ФормулыПоказателей");
	Объект.ТипыПоказателей.Очистить();
	Объект.Показатели.Очистить();
	Объект.ФормулыРасчета.Очистить();
	Объект.ПериодыИспользованияПоказателей.Очистить();
	
	Для каждого ТипПоказателя из Дерево.Строки Цикл
		
		НовыйТипПоказателя = Объект.ТипыПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйТипПоказателя, ТипПоказателя);
		НовыйТипПоказателя.ТипПоказателя = ТипПоказателя.Показатель;
		НовыйТипПоказателя.ФормулаРасчета = ТипПоказателя.Формула;
		Для каждого Показатель из ТипПоказателя.Строки Цикл
			НовыйПоказатель = Объект.Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПоказатель,Показатель);
			НовыйПоказатель.ПоказательЭффективности = Показатель.Показатель;
			НовыйПоказатель.ТипПоказателя = Показатель.ТипРодитель;
			НовыйПоказатель.ШкалаПоказателей = Показатель.ШкалаПоказателя;
		КонецЦикла;	
	
	КонецЦикла;
	
	Для каждого Формула из ФормулыТаблица Цикл
		
		НоваяФормула = Объект.ФормулыРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяФормула, Формула);
		НоваяФормула.ПоказательЭффективности = Формула.Показатель;
		НоваяФормула.ФормулаРасчета = Формула.Формула;
		
	КонецЦикла;
	Для каждого Месяц из ПериодыИспользованияПоказателейТаблица Цикл
		
		НовыйМесяц = Объект.ПериодыИспользованияПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйМесяц, Месяц);
		НовыйМесяц.ПоказательЭффективности = Месяц.Показатель;
		
	КонецЦикла;	
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловноеОформлениеДерева()
	
	УстановитьУсловноеОформление();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейВес.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.Матричный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейВес.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейРасценка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейПлан.Имя);
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейЕдиницаЭффективности.Имя);
	
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейПоказатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,10,Истина,,,,));
	
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПоказателиРасценка.Имя);
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Показатели.ИспользоватьШкалуПоказателей");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Истина;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	//Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<расценка по шкале>'"));
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейРасценка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.Матричный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейРасценка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.Фиксированный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<общая настройка>'"));
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.ПланИзМодели");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<заполняется при расчете>'"));
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.ПланИзМодели");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.План");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	//Основные параметры
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейОсновныеПараметры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.ОсновныеПараметры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Заполнено'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейОсновныеПараметры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.ОсновныеПараметры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не заполнено'"));
	
	//Цвет строки типа показателя
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателей.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ИзмененноеЗначениеРеквизитаФон);
	//Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	//Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейОсновныеПараметры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.УровеньГруппировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не используются'"));
	
	//Дополнительные параметры
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейДополнительныеПараметры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.ДополнительныеПараметры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Заполнено'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейДополнительныеПараметры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.ДополнительныеПараметры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не заполнено'"));
	
	//
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейМинимальноеЗначениеРезультата.Имя);
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.ОграничиватьМинимальноеЗначениеРезультата");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	//Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не ограничено>'"));
	
	
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейМаксимальноеЗначениеРезультата.Имя);
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.ОграничиватьМаксимальноеЗначениеРезультата");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	//Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не ограничено>'"));
	
	
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейМаксимальноеЗначениеРезультата.Имя);
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.ОграничиватьМаксимальноеЗначениеРезультата");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Истина;
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.МаксимальноеЗначениеРезультата");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПоказателейШкалаПоказателей.Имя);
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПоказателей.ИспользоватьШкалуПоказателей");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;
	
	//Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	//Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	
	//
	
КонецПроцедуры	

&НаСервере
Процедура ПроверитьЗаполненостьПараметров(Дерево)
	
	Для каждого ТипПоказателя из Дерево.Строки Цикл
		Если ЗначениеЗаполнено(ТипПоказателя.Формула) Или ЗначениеЗаполнено(ТипПоказателя.ШкалаПоказателя) Тогда
			ТипПоказателя.ДополнительныеПараметры = Истина;	
		КонецЕсли;
		Для каждого Показатель из ТипПоказателя.Строки Цикл
			Если ЗначениеЗаполнено(Показатель.КритическоеЗначение) ИЛИ ЗначениеЗаполнено(Показатель.ВидРасценки)  
				ИЛИ ЗначениеЗаполнено(Показатель.РассчитыватьРезультатОтФакта) ИЛИ ЗначениеЗаполнено(Показатель.Фиксированный)  
				ИЛИ ЗначениеЗаполнено(Показатель.НегативноеОтклонениеНормыДо) ИЛИ ЗначениеЗаполнено(Показатель.ПограничноеОтклонениеНормыОт)  
				ИЛИ ЗначениеЗаполнено(Показатель.ПограничноеОтклонениеНормыДо) ИЛИ ЗначениеЗаполнено(Показатель.ПозитивноеОтклонениеНормыОт) Тогда
				
				Показатель.ОсновныеПараметры = Истина;
			Иначе
				Показатель.ОсновныеПараметры = Ложь;
			КонецЕсли;
			Отбор = Новый Структура;
			Отбор.Вставить("ПоказательЭффективности", Показатель.Показатель);
			Отбор.Вставить("ТипПоказателя", Показатель.ТипРодитель);
			Если ЗначениеЗаполнено(Показатель.ПериодичностьРасчета) ИЛИ ЗначениеЗаполнено(Объект.ФормулыРасчета.НайтиСтроки(Отбор)) 
				ИЛИ ЗначениеЗаполнено(Объект.ПериодыИспользованияПоказателей.НайтиСтроки(Отбор)) Или ЗначениеЗаполнено(Показатель.МинимальноеЗначениеРезультата)
				Или ЗначениеЗаполнено(Показатель.МаксимальноеЗначениеРезультата) Или ЗначениеЗаполнено(Показатель.ОграничиватьМинимальноеЗначениеРезультата) 
				Или ЗначениеЗаполнено(Показатель.ОграничиватьМаксимальноеЗначениеРезультата) Тогда
				Показатель.ДополнительныеПараметры = Истина;
			Иначе
				Показатель.ДополнительныеПараметры = Ложь;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоПоказателейФормулыРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РедактируемоеПоле = Элементы.ДеревоПоказателей.ТекущиеДанные;
	Если  ТипЗнч(РедактируемоеПоле.Показатель) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности") Тогда
		ПараметрыФормы = Новый Структура;
		СФормироватьСписокФормулДерева(ПараметрыФормы, РедактируемоеПоле.Показатель,РедактируемоеПоле.ТипРодитель);
		ПараметрыФормы.Вставить("СписокДоступныхПоказателей",СобратьМассивДоступныхЗначенийИзДерева());
		ПараметрыФормы.Вставить("НаименованиеПоказателя", Строка(РедактируемоеПоле.Показатель));
		ПараметрыФормы.Вставить("ПоказательЭффективности", РедактируемоеПоле.Показатель);
		ПараметрыФормы.Вставить("ТипПоказателя", РедактируемоеПоле.ТипРодитель);
		
		Оповещение = Новый ОписаниеОповещения("ЗафиксироватьФормулыРасчетаДерево", ЭтотОбъект, ПараметрыФормы);
		ОткрытьФорму("ОбщаяФорма.УБ_ФормаПодбораФормулРасчета", ПараметрыФормы, ЭтотОбъект,,,,
			Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ТипЗнч(РедактируемоеПоле.Показатель) = Тип("СправочникСсылка.УБ_ТипыПоказателей") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокДоступныхПоказателей",СобратьМассивДоступныхЗначенийИзДерева());	
		ПараметрыФормы.Вставить("Формула", РедактируемоеПоле.Формула);
		ПараметрыФормы.Вставить("НаименованиеПоказателя", Строка(РедактируемоеПоле.Показатель));
		ПараметрыФормы.Вставить("ПоказательЭффективности",РедактируемоеПоле.Показатель);
		
		Оповещение = Новый ОписаниеОповещения("ЗафиксироватьФормулыРасчетаДерево", ЭтотОбъект,ПараметрыФормы);
		ОткрытьФорму("ОбщаяФорма.УБ_РедактированиеФормулыПоказателВУтвержденииММ", ПараметрыФормы, ЭтотОбъект,,,,
			Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
			
	КонецЕсли;		
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьФормулыРасчетаДерево(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьФормулыРасчетаДеревоСервер(Результат, ДополнительныеПараметры); 
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьФормулыРасчетаДеревоСервер(Результат, ДополнительныеПараметры)
	
	
	Если ТипЗнч(ДополнительныеПараметры.ПоказательЭффективности) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности") Тогда	
		Отбор = Новый Структура;
		Отбор.Вставить("Показатель",ДополнительныеПараметры.ПоказательЭффективности);
		Отбор.Вставить("ТипПоказателя", ДополнительныеПараметры.ТипПоказателя);
		Найденные = ФормулыПоказателей.НайтиСтроки(Отбор);
		Пока Найденные.Количество()>0 Цикл
			ФормулыПоказателей.Удалить(Найденные[0].НомерСтроки-1);
			Найденные.Удалить(0);
		КонецЦикла;	
		
		Номер = 0;	
		Пока Номер<Результат.МассивФормул.Количество() Цикл
		    НоваяСтрока = ФормулыПоказателей.Добавить();
			НоваяСтрока.Показатель = ДополнительныеПараметры.ПоказательЭффективности;
			НоваяСтрока.ТипПоказателя = ДополнительныеПараметры.ТипПоказателя;
			НоваяСтрока.Ячейка = Результат.МассивЯчеек[Номер];
			НоваяСтрока.Формула = Результат.МассивФормул[Номер];
			Номер = Номер+1;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДополнительныеПараметры.ПоказательЭффективности) = Тип("СправочникСсылка.УБ_ТипыПоказателей") Тогда
		Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");
		Для каждого Строка из Дерево.Строки Цикл 
			Если Строка.Показатель = ДополнительныеПараметры.ПоказательЭффективности Тогда 
				Строка.Формула = Результат.Формула;
			КонецЕсли;
		КонецЦикла;
		ПроверитьЗаполненостьПараметров(Дерево);
		ЗначениеВРеквизитФормы(Дерево,"ДеревоПоказателей");
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция СобратьМассивДоступныхЗначенийИзДерева()
	
	МассивПоказателей = Новый Массив;
	Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");	
	
	Для каждого ТипПоказателя Из Дерево.Строки Цикл
		МассивПоказателей.Добавить(ТипПоказателя.Показатель.Идентификатор);
		Для каждого Показатель из ТипПоказателя.Строки Цикл
			МассивПоказателей.Добавить(Показатель.Показатель.Идентификатор);
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат МассивПоказателей; 
	
КонецФункции	

&НаКлиенте
Процедура ДеревоПоказателейШкалаПоказателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПоказателей.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказательЭффективности", ТекущиеДанные.Показатель);
	ПараметрыФормы.Вставить("ТипПоказателя", ТекущиеДанные.ТипРодитель);
	
	Оповещение = Новый ОписаниеОповещения("ЗафиксироватьШкалуПоказателяВДеревеЗавершение", ЭтотОбъект,ПараметрыФормы);
	
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаПодбораШкалы", ПараметрыФормы,ЭтотОбъект,,,,
		Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗафиксироватьШкалуПоказателяВДеревеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьШкалуПоказателяВДеревеСервер(Результат, ДополнительныеПараметры);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьШкалуПоказателяВДеревеСервер(Результат, ДополнительныеПараметры)
	
	Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");
	
	Если ТипЗнч(ДополнительныеПараметры.ПоказательЭффективности) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности") Тогда
		Для каждого ТипПоказателя из Дерево.Строки Цикл
			Если ТипПоказателя.Показатель = ДополнительныеПараметры.ТипПоказателя Тогда
				Для каждого Показатель из ТипПоказателя.Строки Цикл
					Если Показатель.Показатель = ДополнительныеПараметры.ПоказательЭффективности Тогда
						Показатель.ШкалаПоказателей = Результат.ШкалаПоказателя;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
			Прервать;	
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДополнительныеПараметры.ПоказательЭффективности) = Тип("СправочникСсылка.УБ_ТипыПоказателей") Тогда
		Для каждого ТипПоказателя из Дерево.Строки Цикл
			Если ТипПоказателя.Показатель = ДополнительныеПараметры.ПоказательЭффективности Тогда
				ТипПоказателя.ШкалаПоказателя = Результат.ШкалаПоказателя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	ПроверитьЗаполненостьПараметров(Дерево);
	ЗначениеВРеквизитФормы(Дерево,"ДеревоПоказателей");
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодборТиповПоказателейВДерево(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Показатели",СформироватьСписокТипов());
	СтруктураОтбора.Вставить("УникальныйИдентификатор",УникальныйИдентификатор);
	СтруктураОтбора.Вставить("ОрганизацияРодитель", Объект.Организация);
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаПодбораТиповПоказателей",СтруктураОтбора,ЭтотОбъект,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоказателейВДерево(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПоказателей.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Показатели",СформироватьСписокПоказателей());
	СтруктураОтбора.Вставить("ТипыПоказателейДокумента", СформироватьСписокТипов());
	СтруктураОтбора.Вставить("УникальныйИдентификатор",УникальныйИдентификатор);
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаПодбораПоказателейЭффективности",СтруктураОтбора,ЭтотОбъект,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивТиповИзСпискаПоказателей(ДеревоПоказателей)
	
	ТипыПоказателей = Новый Массив; 
	Для каждого Строка Из ДеревоПоказателей Цикл
		ТипыПоказателей.Добавить(Строка.Показатель);
	КонецЦикла;
	
	Возврат ТипыПоказателей;
КонецФункции   

&НаСервере
Процедура ЗаполнитьПодборПоказателейВДерево(Параметр, Показатель = Неопределено)

	Если Параметр.ОтобранныеПоказатели.Количество() > 0 Тогда
	    Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");
		Если ТипЗнч(Параметр.ОтобранныеПоказатели[0]) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности") Тогда
			//++ТИД 22.09.2023: добавлено поле ШкалаПоказателей
			РеквизитыПоказателей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Параметр.ОтобранныеПоказатели,
												"ВидРасценки, ЕдиницаИзмерения, Наименование, ТипПоказателя, ШкалаПоказателей");
			//--ТИД 22.09.2023
			МассивТиповПоказателей = ПолучитьМассивТиповИзСпискаПоказателей(ДеревоПоказателей.ПолучитьЭлементы());
			РеквизитыТипов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивТиповПоказателей, "Матричный, ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы");
		КонецЕсли;
		
		Для каждого ЭлементМассива Из Параметр.ОтобранныеПоказатели Цикл
			Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.УБ_ТипыПоказателей") Тогда		
				НовыйТипПоказателя = Дерево.Строки.Добавить();
				НовыйТипПоказателя.Показатель = ЭлементМассива;
				ЗаполнитьЗначенияСвойств(НовыйТипПоказателя,ЭлементМассива);
				НовыйТипПоказателя.ФормулаИзменена = Ложь;
				НовыйТипПоказателя.Формула = ЭлементМассива.ФормулаРасчета;
				НовыйТипПоказателя.УровеньГруппировки = 0;
			ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности") Тогда	
				РеквизитыПоказателя = РеквизитыПоказателей.Получить(ЭлементМассива);
				РеквизитыТипа		= РеквизитыТипов.Получить(РеквизитыПоказателя.ТипПоказателя);	//предполагается, что показатели выбираются только из уже определенных типов
				Если Показатель = Неопределено Тогда
					СтрокаТипаПоказателя = Дерево.Строки[0];
					НовыйПоказатель = СтрокаТипаПоказателя.Строки.Добавить();
				Иначе	
					Отбор = Новый Структура("Показатель", РеквизитыПоказателя.ТипПоказателя);
					СтрокаТипаПоказателя = Дерево.Строки.НайтиСтроки(Отбор)[0];
					Если СтрокаТипаПоказателя.Строки.Количество() = 0 Тогда
						ВидРасценкиТипаПоказателя = РеквизитыПоказателя.ВидРасценки;   
					Иначе
						ВидРасценкиТипаПоказателя = СтрокаТипаПоказателя.Строки[0].ВидРасценки;   	
					КонецЕсли;                                                                      
					Если	(Не РеквизитыТипа.Матричный
							 и Не РеквизитыТипа.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы)
							 и ВидРасценкиТипаПоказателя <> РеквизитыПоказателя.ВидРасценки Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Вид расценки показателя %1 (%2) не соответствует другим показателям типа %3 (%4), он будет пропущен.'"), 
														РеквизитыПоказателя.Наименование, 
														РеквизитыПоказателя.ВидРасценки,
														Показатель.Наименование,
														ВидРасценкиТипаПоказателя);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭлементМассива,,, Истина);
						Продолжить;
					КонецЕсли;
					НовыйПоказатель = СтрокаТипаПоказателя.Строки.Добавить();
				КонецЕсли;	     
				
				НовыйПоказатель.Показатель = ЭлементМассива;              
				
				ЗаполнитьЗначенияСвойств(НовыйПоказатель, ЭлементМассива);
				ЗаполнитьЗначенияСвойств(НовыйПоказатель, РеквизитыПоказателя);
				
				НовыйПоказатель.ЕдиницаЭффективности = РеквизитыПоказателя.ЕдиницаИзмерения;
				//++ТИД 22.09.2023: добавлена строка
				НовыйПоказатель.ШкалаПоказателя = РеквизитыПоказателя.ШкалаПоказателей;
				//--ТИД 22.09.2023
				НовыйПоказатель.ФормулаИзменена = Ложь;
				НовыйПоказатель.ТипРодитель = Показатель;
				НовыйПоказатель.УровеньГруппировки = 1;
				НастройкиПоказателей = НастройкиПоказателей(НовыйПоказатель.Показатель);
		
				НастройкиТекущегоПоказателя = НастройкиПоказателей.Получить(НовыйПоказатель.Показатель);
			
				Если Не НастройкиТекущегоПоказателя = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НовыйПоказатель, НастройкиТекущегоПоказателя);
				КонецЕсли;
				
				НовыйПоказатель.ТипРодитель = Показатель;
				НовыйПоказатель.Матричный = Показатель.Матричный;
				СтрокаТипаПоказателя.Вес = СтрокаТипаПоказателя.Строки.Итог("Вес");
					
				Для каждого Формула из ЭлементМассива.ФормулыРасчета Цикл
					НоваяФормула = ФормулыПоказателей.Добавить();
					НоваяФормула.Показатель = НовыйПоказатель.Показатель;
					НоваяФормула.ТипПоказателя = НовыйПоказатель.ТипРодитель;
					НоваяФормула.Ячейка = Формула.Ячейка;
					НоваяФормула.Формула = Формула.Формула;
				КонецЦикла;	
			КонецЕсли;		
		КонецЦикла;
		ПроверитьЗаполненостьПараметров(Дерево);
		ДеревоПустое = Не ЗначениеЗаполнено(Дерево.Строки);
		ЗначениеВРеквизитФормы(Дерево, "ДеревоПоказателей");
	КонецЕсли;
	
	ДоступностьДобавленияПоказателя();

	
	//Если Параметр.ОтобранныеПоказатели.Количество() > 0 Тогда
	//    Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");  
	//	
	//	//получаем значения реквизитов всех подобранных Показателей
	//	РеквизитыПоказателей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Параметр.ОтобранныеПоказатели, "ВидРасценки, ЕдиницаИзмерения, Наименование");	
	//	
	//	Для каждого ЭлементМассива Из Параметр.ОтобранныеПоказатели Цикл
	//		
	//		Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.УБ_ТипыПоказателей") Тогда		
	//			НовыйТипПоказателя = Дерево.Строки.Добавить();
	//			НовыйТипПоказателя.Показатель = ЭлементМассива;
	//			ЗаполнитьЗначенияСвойств(НовыйТипПоказателя,ЭлементМассива);
	//			НовыйТипПоказателя.ФормулаИзменена = Ложь;
	//			НовыйТипПоказателя.Формула = ЭлементМассива.ФормулаРасчета;
	//			НовыйТипПоказателя.УровеньГруппировки = 0;
	//		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности") Тогда	
	//			//реквизиты нового показателя
	//			
	//			РеквизитыТипа = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементМассива, "ТипПоказателя"),
	//																		"Матричный, ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы");
	//			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РеквизитыПоказателя, РеквизитыТипа);
	//			
	//			Если Показатель = Неопределено Тогда
	//				СтрокаТипаПоказателя = Дерево.Строки[0];
	//				НовыйПоказатель = СтрокаТипаПоказателя.Строки.Добавить();
	//			Иначе	
	//				Отбор = Новый Структура("Показатель", Показатель);
	//				СтрокаТипаПоказателя = Дерево.Строки.НайтиСтроки(Отбор)[0];
	//				Если СтрокаТипаПоказателя.Строки.Количество() = 0 Тогда
	//					ВидРасценкиТипаПоказателя = РеквизитыПоказателя.ВидРасценки;   
	//				Иначе
	//					ВидРасценкиТипаПоказателя = СтрокаТипаПоказателя.Строки[0].ВидРасценки;   	
	//				КонецЕсли;                                                                      
	//				Если	(Не РеквизитыПоказателя.Матричный
	//						 и Не РеквизитыПоказателя.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы)
	//						 и ВидРасценкиТипаПоказателя <> РеквизитыПоказателя.ВидРасценки Тогда
	//					ТекстСообщения = СтрШаблон(НСтр("ru = 'Вид расценки показателя %1 (%2) не соответствует другим показателям типа %3 (%4), он будет пропущен.'"), 
	//													РеквизитыПоказателя.Наименование, 
	//													РеквизитыПоказателя.ВидРасценки,
	//													Показатель.Наименование,
	//													ВидРасценкиТипаПоказателя);
	//					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭлементМассива,,, Истина);
	//					Продолжить;
	//				КонецЕсли;
	//				НовыйПоказатель = СтрокаТипаПоказателя.Строки.Добавить();
	//			КонецЕсли;	     
	//			
	//			НовыйПоказатель.Показатель = ЭлементМассива;              
	//			
	//			ЗаполнитьЗначенияСвойств(НовыйПоказатель, ЭлементМассива);
	//			ЗаполнитьЗначенияСвойств(НовыйПоказатель, РеквизитыПоказателя);
	//			
	//			НовыйПоказатель.ЕдиницаЭффективности = РеквизитыПоказателя.ЕдиницаИзмерения;
	//			НовыйПоказатель.ФормулаИзменена = Ложь;
	//			НовыйПоказатель.ТипРодитель = Показатель;
	//			НовыйПоказатель.УровеньГруппировки = 1;
	//			НастройкиПоказателей = НастройкиПоказателей(НовыйПоказатель.Показатель);
	//	
	//			НастройкиТекущегоПоказателя = НастройкиПоказателей.Получить(НовыйПоказатель.Показатель);
	//		
	//			Если Не НастройкиТекущегоПоказателя = Неопределено Тогда
	//				ЗаполнитьЗначенияСвойств(НовыйПоказатель, НастройкиТекущегоПоказателя);
	//			КонецЕсли;
	//			
	//			НовыйПоказатель.ТипРодитель = Показатель;
	//			НовыйПоказатель.Матричный = Показатель.Матричный;
	//			СтрокаТипаПоказателя.Вес = СтрокаТипаПоказателя.Строки.Итог("Вес");
	//				
	//			Для каждого Формула из ЭлементМассива.ФормулыРасчета Цикл
	//				НоваяФормула = ФормулыПоказателей.Добавить();
	//				НоваяФормула.Показатель = НовыйПоказатель.Показатель;
	//				НоваяФормула.ТипПоказателя = НовыйПоказатель.ТипРодитель;
	//				НоваяФормула.Ячейка = Формула.Ячейка;
	//				НоваяФормула.Формула = Формула.Формула;
	//			КонецЦикла;	
	//		КонецЕсли;		
	//	КонецЦикла;
	//	ПроверитьЗаполненостьПараметров(Дерево);
	//	ДеревоПустое = Не ЗначениеЗаполнено(Дерево.Строки);
	//	ЗначениеВРеквизитФормы(Дерево, "ДеревоПоказателей");
	//КонецЕсли;
	//
	//ДоступностьДобавленияПоказателя();

КонецПроцедуры

&НаСервере
Функция СформироватьСписокТипов()
	
	Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");
	Массив = Новый Массив;
	Для каждого Строка из Дерево.Строки Цикл
		Массив.Добавить(Строка.Показатель);	
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции	

&НаСервере
Функция СформироватьСписокПоказателей()
	
	Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");
	Массив = Новый Массив;
	Для каждого СтрокаТипаПоказателя из Дерево.Строки Цикл 
		Для каждого Строка из СтрокаТипаПоказателя.Строки Цикл
			Массив.Добавить(Строка.Показатель);	
		КонецЦикла;
	КонецЦикла;	
	
	Возврат Массив;
	
КонецФункции	     

&НаСервере
Процедура СФормироватьСписокФормулДерева(ПараметрыФормы, ПоказательЭффективности,ТипПоказателя)
	
	МассивФормул = Новый Массив;
	МассивЯчеек = Новый Массив;
	Отбор = Новый Структура;
	Отбор.Вставить("Показатель",ПоказательЭффективности);
	Отбор.Вставить("ТипПоказателя",ТипПоказателя);
	Найденные = ФормулыПоказателей.НайтиСтроки(Отбор);
	Для каждого Строка из Найденные Цикл
		МассивЯчеек.Добавить(Строка.Ячейка);
		МассивФормул.Добавить(Строка.Формула);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("МассивФормул", МассивФормул);
	ПараметрыФормы.Вставить("МассивЯчеек", МассивЯчеек);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьПараметрыДерева(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда 
		ЗаполнитьПараметрыДереваНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоПоказателей",,Истина);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПараметрыДереваНаСервере(Результат, ДополнительныеПараметры)
	
	Дерево = РеквизитФормыВЗначение("ДеревоПоказателей");
	ПериодыИспользованияПоказателейТаблица = РеквизитФормыВЗначение("ПериодыИспользованияПоказателей");
	ФормулыТаблица = РеквизитФормыВЗначение("ФормулыПоказателей");
	Для каждого ТипПоказателя из Дерево.Строки Цикл
		Если ТипПоказателя.Показатель = ДополнительныеПараметры.Показатель Тогда
			//ЗаполнитьЗначенияСвойств(ТипПоказателя, Результат);
			ТипПоказателя.ШкалаПоказателя = Результат.ШкалаПоказателя;
			ТипПоказателя.ФормулаИзменена = Результат.ФормулаИзменена;
			ТипПоказателя.Формула = Результат.Формула;
		КонецЕсли;
		Если ТипПоказателя.Показатель = ДополнительныеПараметры.ТипПоказателя Тогда
			Для каждого Показатель Из ТипПоказателя.Строки Цикл
				Если Показатель.Показатель = ДополнительныеПараметры.Показатель Тогда
					//ЗаполнитьЗначенияСвойств(Показатель, Результат);
					Показатель.КритическоеЗначение = Результат.КритическоеЗначение;
					Показатель.ШкалаПоказателя = Результат.ШкалаПоказателя;
					Показатель.МинимальноеЗначениеРезультата = Результат.МинимальноеЗначение;
					Показатель.МаксимальноеЗначениеРезультата = Результат.МаксимальноеЗначение;
					Показатель.ФормулаИзменена = Результат.ФормулаИзменена;
					Показатель.ВидРасценки = Результат.ВидРасценки;
					Показатель.РассчитыватьРезультатОтФакта = Результат.РассчитыватьРезультатОтФакта;
					Показатель.Фиксированный = Результат.Фиксированный;
					Показатель.НегативноеОтклонениеНормыДо = Результат.НегативноеОтклонениеНормыДо;
					Показатель.ПограничноеОтклонениеНормыОт = Результат.ПограничноеОтклонениеНормыОт;
					Показатель.ПограничноеОтклонениеНормыДо = Результат.ПограничноеОтклонениеНормыДо;
					Показатель.ПозитивноеОтклонениеНормыОт = Результат.ПозитивноеОтклонениеНормыОт;
					Показатель.ОграничиватьМинимальноеЗначениеРезультата = Результат.ОграничиватьМинимальноеЗначениеРезультата;
					Показатель.ОграничиватьМаксимальноеЗначениеРезультата = Результат.ОграничиватьМаксимальноеЗначениеРезультата;
					Показатель.ПериодичностьРасчета = Результат.ПериодичностьРасчета;
					
					Отбор = Новый Структура;
					Отбор.Вставить("Показатель",ДополнительныеПараметры.Показатель);
					Отбор.Вставить("ТипПоказателя", ДополнительныеПараметры.ТипПоказателя);
					Найденные = ФормулыТаблица.НайтиСтроки(Отбор);
					Номер = 1;
					Пока Найденные.Количество()>0 Цикл
						ФормулыТаблица.Удалить(ФормулыТаблица.Индекс(Найденные[0]));
						Найденные.Удалить(0);
					КонецЦикла;	
					
					Номер = 0;	
					Пока Номер<Результат.МассивФормул.Количество() Цикл
					    НоваяСтрока = ФормулыТаблица.Добавить();
						НоваяСтрока.Показатель = ДополнительныеПараметры.Показатель;
						НоваяСтрока.ТипПоказателя = ДополнительныеПараметры.ТипПоказателя;
						НоваяСтрока.Ячейка = Результат.МассивЯчеек[Номер];
						НоваяСтрока.Формула = Результат.МассивФормул[Номер];
						НоваяСтрока.НомерСтроки = ФормулыТаблица.Количество();
						Номер = Номер+1;
					КонецЦикла;
					
					
					Номер = 1;
					Найденные = ПериодыИспользованияПоказателейТаблица.НайтиСтроки(Отбор);
					Пока Найденные.Количество()>0 Цикл
						ПериодыИспользованияПоказателейТаблица.Удалить(ПериодыИспользованияПоказателейТаблица.Индекс(Найденные[0]));
						Найденные.Удалить(0);
					КонецЦикла;	
					
						
					Для каждого Период из Результат.МассивМесяцев Цикл
					    НоваяСтрока = ПериодыИспользованияПоказателейТаблица.Добавить();
						НоваяСтрока.Показатель = ДополнительныеПараметры.Показатель;
						НоваяСтрока.ТипПоказателя = ДополнительныеПараметры.ТипПоказателя;
						НоваяСтрока.Месяц = Период; 
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	ПроверитьЗаполненостьПараметров(Дерево);
	ДеревоПустое = Не ЗначениеЗаполнено(Дерево.Строки);
	ЗначениеВРеквизитФормы(ПериодыИспользованияПоказателейТаблица, "ПериодыИспользованияПоказателей");
	ЗначениеВРеквизитФормы(ФормулыТаблица, "ФормулыПоказателей");
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПоказателей");
	
	ДоступностьДобавленияПоказателя();
	
КонецПроцедуры	

&НаКлиенте
Функция СформироватьДопПараметры(Данные)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Показатель", Данные.Показатель);
	ДопПараметры.Вставить("ТипПоказателя", Данные.ТипРодитель);
	ДопПараметры.Вставить("КритическоеЗначение", Данные.КритическоеЗначение);
	ДопПараметры.Вставить("ВидРасценки",Данные.ВидРасценки);
	ДопПараметры.Вставить("РассчитыватьРезультатОтФакта", Данные.РассчитыватьРезультатОтФакта);
	ДопПараметры.Вставить("Фиксированный", Данные.Фиксированный);
	ДопПараметры.Вставить("НегативноеОтклонениеНормыДо", Данные.НегативноеОтклонениеНормыДо);
	ДопПараметры.Вставить("ПограничноеОтклонениеНормыДо", Данные.ПограничноеОтклонениеНормыДо);
	ДопПараметры.Вставить("ПограничноеОтклонениеНормыОт", Данные.ПограничноеОтклонениеНормыОт);
	ДопПараметры.Вставить("ПозитивноеОтклонениеНормыОт", Данные.ПозитивноеОтклонениеНормыОт);
	ДопПараметры.Вставить("Формула", Данные.Формула);
	ДопПараметры.Вставить("ФормулаИзменена", Данные.ФормулаИзменена);
	ДопПараметры.Вставить("МассивФормул", ПолучитьМассивФормул(Данные.Показатель,Данные.ТипРодитель));
	ДопПараметры.Вставить("МассивЯчеек", ПолучитьМассивЯчеек(Данные.Показатель,Данные.ТипРодитель));
	ДопПараметры.Вставить("ШкалаПоказателя", Данные.ШкалаПоказателя);
	ДопПараметры.Вставить("ПериодичностьРасчета", Данные.ПериодичностьРасчета);
	ДопПараметры.Вставить("МассивМесяцев", ПолучитьМассивМесяцев(Данные.Показатель,Данные.ТипРодитель));
	ДопПараметры.Вставить("МаксимальноеЗначение", Данные.МаксимальноеЗначениеРезультата);
	ДопПараметры.Вставить("МинимальноеЗначение", Данные.МинимальноеЗначениеРезультата);
	ДопПараметры.Вставить("УровеньГруппировки", Данные.УровеньГруппировки);
	ДопПараметры.Вставить("РазрешенныеПоказатели", СобратьМассивДоступныхЗначенийИзДерева());
	ДопПараметры.Вставить("Статус", Объект.Статус);
	
	Возврат ДопПараметры;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивФормул(Показатель, ТипПоказателя)
	
	МассивФормул = Новый Массив;
    Отбор = Новый Структура;
	Отбор.Вставить("Показатель",Показатель);
	Отбор.Вставить("ТипПоказателя", ТипПоказателя);
	Найденные = ФормулыПоказателей.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(Найденные) Тогда
		Для каждого строка из Найденные Цикл
			МассивФормул.Добавить(Строка.Формула);
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат МассивФормул;
	
КонецФункции	

&НаСервере
Функция ПолучитьМассивЯчеек(Показатель, ТипПоказателя)
	
	МассивЯчеек = Новый Массив;
    Отбор = Новый Структура;
	Отбор.Вставить("Показатель",Показатель);
	Отбор.Вставить("ТипПоказателя", ТипПоказателя);
	Найденные = ФормулыПоказателей.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(Найденные) Тогда
		Для каждого строка из Найденные Цикл
			МассивЯчеек.Добавить(Строка.Ячейка);
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат МассивЯчеек;
	
КонецФункции	

&НаСервере
Функция ПолучитьМассивМесяцев(Показатель, ТипПоказателя)
	
	МассивМесяцев = Новый Массив;
	Отбор = Новый Структура;
	Отбор.Вставить("Показатель",Показатель);
	Отбор.Вставить("ТипПоказателя", ТипПоказателя);
	Найденные = ПериодыИспользованияПоказателей.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(Найденные) Тогда
		Для каждого Строка из Найденные Цикл
			МассивМесяцев.Добавить(Строка.Месяц);
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат МассивМесяцев;
	
КонецФункции	

&НаКлиенте
Процедура ДеревоПоказателейОсновныеПараметрыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПоказателей.ТекущиеДанные;
	
	ДопПараметры = СформироватьДопПараметры(ТекущиеДанные);
	ДопПараметры.Вставить("ОснПараметры", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПараметрыДерева",ЭтотОбъект,ДопПараметры);
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаПараметров", ДопПараметры, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейФормулаИзмененаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПоказателей.ТекущиеДанные;
	
	ДопПараметры = СформироватьДопПараметры(ТекущиеДанные);
	ДопПараметры.Вставить("ДопПараметры", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПараметрыДерева",ЭтотОбъект,ДопПараметры);
	ОткрытьФорму("Документ.УБ_УтверждениеГрейда.Форма.ФормаПараметров", ДопПараметры, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоПоказателей.ТекущиеДанные;
	
	УдалитьПоказатель(ТекущиеДанные.Показатель, ТекущиеДанные.ТипРодитель);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПоказатель(Показатель, ТипПоказателя)
	
	Если ТипЗнч(Показатель) = Тип("СправочникСсылка.УБ_ПоказателиЭффективности") Тогда
		ФормулыПоказателейТаблица = РеквизитФормыВЗначение("ФормулыПоказателей");
		Отбор = Новый Структура;
		Отбор.Вставить("Показатель",Показатель);
		Отбор.Вставить("ТипПоказателя",ТипПоказателя);
		Найденные = ФормулыПоказателейТаблица.НайтиСтроки(Отбор);
		Для каждого Строка из Найденные Цикл
			ФормулыПоказателейТаблица.Удалить(ФормулыПоказателейТаблица.Индекс(Строка));
		КонецЦикла;
		ЗначениеВРеквизитФормы(ФормулыПоказателейТаблица,"ФормулыПоказателей");
		ПериодыИспользованияПоказателейТаблица = РеквизитФормыВЗначение("ПериодыИспользованияПоказателей");
		Отбор = Новый Структура;
		Отбор.Вставить("Показатель",Показатель);
		Отбор.Вставить("ТипПоказателя",ТипПоказателя);
		Найденные = ПериодыИспользованияПоказателейТаблица.НайтиСтроки(Отбор);
		Для каждого Строка из Найденные Цикл
			ПериодыИспользованияПоказателейТаблица.Удалить(ПериодыИспользованияПоказателейТаблица.Индекс(Строка));
		КонецЦикла;
		ЗначениеВРеквизитФормы(ПериодыИспользованияПоказателейТаблица,"ПериодыИспользованияПоказателей");
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ПроверитьУникальностьСтандарта(Стандарт)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Стандарт",Стандарт);
	Найденные = Объект.Стандарты.НайтиСтроки(Отбор);
	Если Найденные.Количество()>1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура СтандартыСтандартПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Стандарты.ТекущиеДанные;
	Заменить = ПроверитьУникальностьСтандарта(ТекущиеДанные.Стандарт);
	Если Заменить Тогда
		ТекущиеДанные.Стандарт = ПредопределенноеЗначение("Справочник.УБ_Стандарты.ПустаяСсылка");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейВесПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПоказателей.ТекущиеДанные;
	
	ПересчитатьВесТипаПоказателя(ТекущиеДанные.ТипРодитель);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВесТипаПоказателя(ТипПоказателя)
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоПоказателей");
	
	Для каждого Строка из ДеревоОбъект.Строки Цикл
		Если Строка.Показатель = ТипПоказателя Тогда
			Строка.Вес = Строка.Строки.Итог("Вес");
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ДоступностьДобавленияПоказателя()
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоПоказателей");
	Элементы.ПодборПоказателейВДерево.Доступность = ДеревоОбъект.Строки.Количество()>0 И Объект.Статус = Перечисления.УБ_СтатусыМоделейПланирования.Планируется;
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоПоказателейПослеУдаления(Элемент)
	
	ДоступностьДобавленияПоказателя();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПланированияЭффективностиСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УБ_СобытияФормКлиент.СозданиеМоделиММ(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура МодельПланированияЭффективностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Отбор");
	Отбор = Новый Структура("Организация, Подразделение", Объект.Организация, Объект.Подразделение);
	
КонецПроцедуры

#КонецОбласти



