#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УБ_УтверждениеГрейда") Тогда
		
		ИсключаяСвойства = "Номер, Дата, Проведен, ПометкаУдаления, ВерсияГрейда, Статус, ДатаУтверждения, Ответственный, Комментарий";
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,, ИсключаяСвойства);
		
		Для Каждого СтрокаПоказатели Из ДанныеЗаполнения.Показатели Цикл
			НоваяСтрока = Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказатели);
		КонецЦикла;
		
		Для Каждого СтрокаСтандарты Из ДанныеЗаполнения.Стандарты Цикл
			НоваяСтрока = Стандарты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтандарты);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Организация") Тогда
			Организация = ДанныеЗаполнения.Организация;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Подразделение") Тогда
			Подразделение = ДанныеЗаполнения.Подразделение;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("МодельПланированияЭффективности") Тогда
			МодельПланированияЭффективности = ДанныеЗаполнения.МодельПланированияЭффективности;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			Если Не ЗначениеЗаполнено(Организация)
				Или Организация <> Подразделение.Владелец Тогда
				Организация = Подразделение.Владелец;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МодельПланированияЭффективности) Тогда
			
			Если Не ЗначениеЗаполнено(Подразделение)
				Или Подразделение <> МодельПланированияЭффективности.ШтатноеРасписание.Подразделение Тогда
				Подразделение = МодельПланированияЭффективности.ШтатноеРасписание.Подразделение;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Организация)
				Или Организация = МодельПланированияЭффективности.ШтатноеРасписание.Владелец Тогда
				Организация = МодельПланированияЭффективности.ШтатноеРасписание.Владелец;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Грейд") Тогда
			Грейд = ДанныеЗаполнения.Грейд;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВерсияГрейда") Тогда
			ВерсияГрейда = ДанныеЗаполнения.ВерсияГрейда;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УБ_ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.УБ_УтверждениеГрейда.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	УБ_ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	РегистрыСведений.УБ_СоставПоказателейМоделейПланирования.ОтразитьСоставПоказателейМоделейПланирования(ДополнительныеСвойства, Движения, Отказ);
	РегистрыСведений.УБ_СоставСтандартовМоделейПланирования.ОтразитьСоставСтандартовМоделейПланирования(ДополнительныеСвойства, Движения, Отказ);
	РегистрыСведений.УБ_ВерсииГрейдов.ОтразитьВерсииГрейдов(ДополнительныеСвойства, Движения, Отказ);
	РегистрыСведений.УБ_РасценкиПоказателейЭффективности.ОтразитьРасценкиПоказателейЭффективности(ДополнительныеСвойства, Движения, Отказ);
	УБ_ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	УБ_ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	РегистрыСведений.УБ_ФормулыПоказателейЭффективности.ОтразитьФормулыПоказателейЭффективности(Ссылка);
	РегистрыСведений.УБ_УстановленныеШкалыПоказателей.ОтразитьШкалыПоказателей(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивТиповПоказателей = Новый Массив;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		Если МассивТиповПоказателей.Найти(СтрокаПоказатель.ТипПоказателя) = Неопределено Тогда
			МассивТиповПоказателей.Добавить(СтрокаПоказатель.ТипПоказателя);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТипПоказателя Из МассивТиповПоказателей Цикл
		
		Если Не ТипПоказателя.Матричный Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщийВесПоказателей = 0;
		НомерСтрокиПоказателя = 0;
		
		Для Каждого СтрокаПоказатель Из Показатели Цикл
			Если СтрокаПоказатель.ТипПоказателя <> ТипПоказателя Тогда
				Продолжить;
			КонецЕсли;
			ОбщийВесПоказателей = ОбщийВесПоказателей + СтрокаПоказатель.Вес;
			НомерСтрокиПоказателя = ?(НомерСтрокиПоказателя <> 0, НомерСтрокиПоказателя, СтрокаПоказатель.НомерСтроки);
		КонецЦикла;
		
		Если ОбщийВесПоказателей <> 100 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Общий вес показателей типа ""%1"" должен равняться ""100""'"),
				ТипПоказателя);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Показатели", НомерСтрокиПоказателя, "Вес"),
				,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		
		Если СтрокаПоказатель.ПоказательЭффективности.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзМодели
			И Не ЗначениеЗаполнено(СтрокаПоказатель.План) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""План"" в строке %1 списка ""Показатели""'"),
				СтрокаПоказатель.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Показатели", СтрокаПоказатель.НомерСтроки, "План"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если СтрокаПоказатель.ПоказательЭффективности.ВариантРасчетаЗначенияПлана = Перечисления.УБ_ВариантыРасчетаЗначенийПоказателя.ИзМодели Тогда
			
			Если СтрокаПоказатель.ПоказательЭффективности.ТипРасчета = Перечисления.УБ_ТипыРасчета.Прямой
				И СтрокаПоказатель.План <= СтрокаПоказатель.КритическоеЗначение Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке %1 у показателя с типом расчета ""Прямой"" критическое значение должно быть меньше значения плана'"),
					СтрокаПоказатель.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Показатели", СтрокаПоказатель.НомерСтроки, "КритическоеЗначение"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если СтрокаПоказатель.ПоказательЭффективности.ТипРасчета = Перечисления.УБ_ТипыРасчета.Обратный
				И СтрокаПоказатель.План >= СтрокаПоказатель.КритическоеЗначение Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке %1 у показателя с типом расчета ""Обратный"" критическое значение должно быть больше значения плана'"),
					СтрокаПоказатель.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Показатели", СтрокаПоказатель.НомерСтроки, "КритическоеЗначение"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаПоказатель.ОграничиватьМаксимальноеЗначениеРезультата
			И Не ЗначениеЗаполнено(СтрокаПоказатель.МаксимальноеЗначениеРезультата) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Максимальное значение результата"" в строке %1 списка ""Показатели""'"),
				СтрокаПоказатель.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Показатели", СтрокаПоказатель.НомерСтроки, "МаксимальноеЗначениеРезультата"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если СтрокаПоказатель.ОграничиватьМинимальноеЗначениеРезультата
			И СтрокаПоказатель.ОграничиватьМаксимальноеЗначениеРезультата
			И СтрокаПоказатель.МинимальноеЗначениеРезультата >= СтрокаПоказатель.МаксимальноеЗначениеРезультата Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Минимальное значение результата должно быть меньше максимального'"),
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Показатели", СтрокаПоказатель.НомерСтроки, "МинимальноеЗначениеРезультата"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если СтрокаПоказатель.ПоказательЭффективности.СостояниеПоказателя = Перечисления.УБ_СостоянияПоказателейЭффективности.Архивный Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Показатель ""%1"" находится в архиве, утверждение грейда невозможно'"),
					СтрокаПоказатель.ПоказательЭффективности);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Показатели", СтрокаПоказатель.НомерСтроки, "ПоказательЭффективности"),
					,
					Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Стандарты.Количество() И Стандарты.Итог("Вес") <> 100 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Общий вес стандартов должен равняться ""100""'"),
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Стандарты", 1, "Вес"),
			,
			Отказ);
	КонецЕсли;
	
	ИспользуетсяБезокладнаяСистемаПоказателей = ПолучитьФункциональнуюОпцию("УБ_ИспользоватьБезокладнуюСистемуПоказателей");
	Если ИспользуетсяБезокладнаяСистемаПоказателей Тогда
		
		ЕстьТипПоказателяДляРасчетаКоэффициентовРаспределения = Ложь;
		Для Каждого ТипПоказателя Из МассивТиповПоказателей Цикл
			Если ТипПоказателя.ИспользоватьДляРаспределенияКоэффициентовБезокладнойСистемы Тогда
				ЕстьТипПоказателяДляРасчетаКоэффициентовРаспределения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьТипПоказателяДляРасчетаКоэффициентовРаспределения Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты,
				"ПоказательРасчетаЗарплатыПриБезокладнойСистеме");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты,
			"ПоказательРасчетаЗарплатыПриБезокладнойСистеме");
	КонецЕсли;
	
	Если Не ГрейдЗакрыт Тогда 
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаЗакрытия");	
	КонецЕсли;
	
	Если Грейд.ВАрхиве Тогда
			ТекстСообщения = НСтр("ru = 'Грейд не утверждён! Грейд находится в архиве!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);			
			Возврат;
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииГрейдов.Регистратор.ДатаУтверждения КАК ДатаУтвержденияАктивногоГрейда,
		|	ВерсииГрейдов.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.УБ_ВерсииГрейдов.СрезПоследних(, Грейд = &Грейд) КАК ВерсииГрейдов";
	
	Запрос.УстановитьПараметр("Грейд", Грейд); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
			
		Если Выборка.ДатаУтвержденияАктивногоГрейда > ДатаУтверждения И Не Выборка.Регистратор = Ссылка Тогда
			ТекстСообщения = НСтр("ru = 'Грейд не утверждён! Существует грейд, утвержденный более поздней датой. Измените дату утверждения'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УБ_ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	УБ_ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	УБ_ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	УБ_ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ИспользуетсяБезокладнаяСистемаПоказателей = ПолучитьФункциональнуюОпцию("УБ_ИспользоватьБезокладнуюСистемуПоказателей");
	Если Не ИспользуетсяБезокладнаяСистемаПоказателей И ЗначениеЗаполнено(ПоказательРасчетаЗарплатыПриБезокладнойСистеме) Тогда
		ПоказательРасчетаЗарплатыПриБезокладнойСистеме = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("ПоказательРасчетаЗарплаты");
	КонецЕсли;
	
	ПараметрыВерсииГрейда = УБ_РаботаСВерсиямиГрейдов.ПараметрыЗаполненияВерсииГрейда();
	ПараметрыВерсииГрейда.ДатаВерсии = ДатаУтверждения;
	ПараметрыВерсииГрейда.ВАрхиве = (Статус = Перечисления.УБ_СтатусыМоделейПланирования.Закрыто);
	
	Если Не ЗначениеЗаполнено(ВерсияГрейда) Тогда
		ВерсияГрейда = УБ_РаботаСВерсиямиГрейдов.СоздатьНовуюВерсиюГрейда(Грейд, ПараметрыВерсииГрейда, Ссылка);
	ИначеЕсли ЗначениеЗаполнено(ВерсияГрейда) Тогда
		УБ_РаботаСВерсиямиГрейдов.ОбновитьДанныеВерсииГрейда(ВерсияГрейда, ПараметрыВерсииГрейда);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.ВерсияГрейда) И Ссылка.ВерсияГрейда <> ВерсияГрейда Тогда
		ПараметрыВерсииГрейда = УБ_РаботаСВерсиямиГрейдов.ПараметрыЗаполненияВерсииГрейда();
		ЗаполнитьЗначенияСвойств(ПараметрыВерсииГрейда, Ссылка.ВерсияГрейда);
		ПараметрыВерсииГрейда.ВАрхиве = Истина;
		УБ_РаботаСВерсиямиГрейдов.ОбновитьДанныеВерсииГрейда(Ссылка.ВерсияГрейда, ПараметрыВерсииГрейда);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус = Перечисления.УБ_СтатусыМоделейПланирования.Планируется;
	ДатаУтверждения = '00010101';
	ВерсияГрейда = Неопределено;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДатаУтверждения) Тогда
		ДатаУтверждения = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоказательРасчетаЗарплатыПриБезокладнойСистеме) Тогда
		ПоказательРасчетаЗарплатыПриБезокладнойСистеме = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("ПоказательРасчетаЗарплаты");
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли