#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - Настройки общей формы отчета (для изменения).
//       См. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Булево - Признак отказа от создания формы.
//      См. описание одноименного параметра "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//      См. описание одноименного параметра "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// См. также:
//   Процедура для вывода добавленных команд в форму: ОтчетыСервер.ВывестиКоманду().
//   Глобальный обработчик этого события: ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
// Пример добавления команды:
//    Команда = Форма.Команды.Добавить("<ИмяКоманды>");
//    Команда.Действие  = "Подключаемый_Команда";
//    Команда.Заголовок = НСтр("ru = '<Представление команды...>'");
//    ОтчетыСервер.ВывестиКоманду(Форма, Команда, "<ВидГруппы>");
// Обработчик команды пишется в процедуре ОтчетыКлиентПереопределяемый.ОбработчикКоманды.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		СформироватьПараметрыОтчета(Параметры.ПараметрКоманды, Форма.ФормаПараметры, Параметры);
	КонецЕсли;     
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции      


Процедура ИнициализироватьОтчет(КлючВарианта = Неопределено) Экспорт
	
	ДополнительныеПоляПредставлений = Новый Структура;
	ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыОбщиеНаборыДанных");
	тДополнительныеПоляПредставлений = ОбщийМодуль.ПустаяТаблицаДополнительныхПолейПредставлений();
	
	ПутьКПолямСотрудника = "Работа";
	ОписаниеПоля = тДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Сотрудник";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".Сотрудник";
	
	ОписаниеПоля = тДополнительныеПоляПредставлений.Добавить();
	ОписаниеПоля.ИмяПоля = "Подразделение";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".Подразделение";
	
	ДополнительныеПоляПредставлений.Вставить("Представления_КадровыеДанныеСотрудников", тДополнительныеПоляПредставлений);
	ОбщийМодуль.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект,ДополнительныеПоляПредставлений);
		
КонецПроцедуры 

Функция ТекстЗапросаУТ_КА()

	Возврат
         "ВЫБРАТЬ
         |	УБ_ДанныеПоказателейРасчетаЗарплаты.Подразделение КАК Подразделение,
         |	УБ_ДанныеПоказателейРасчетаЗарплаты.Организация КАК Организация,
		 |	УБ_ДанныеПоказателейРасчетаЗарплаты.Показатель КАК Показатель,
         |	УБ_ДанныеПоказателейРасчетаЗарплаты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
         |	УБ_ДанныеПоказателейРасчетаЗарплаты.Сотрудник КАК Сотрудник,
         |	УБ_ДанныеПоказателейРасчетаЗарплаты.Регистратор КАК Регистратор,
        // |	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.ТипПоказателя КАК ТипПоказателя,
       //  |	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.ТипПоказателя.ПоказательРасчетаЗарплаты КАК Показатель,
         //|	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.СуммаОборот + УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.ПроцентПремииОборот КАК Значение,
		 |	УБ_ДанныеПоказателейРасчетаЗарплаты.ЗначениеОборот КАК Значение,
         |	УБ_ДанныеПоказателейРасчетаЗарплаты.ПериодМесяц КАК Период
         |ПОМЕСТИТЬ Расчет
         |ИЗ
         |	РегистрНакопления.УБ_ДанныеПоказателейРасчетаЗарплаты.Обороты(, , Авто, ) КАК УБ_ДанныеПоказателейРасчетаЗарплаты
         |;
         |
         |////////////////////////////////////////////////////////////////////////////////
         |ВЫБРАТЬ
         |	""Данные расчета"" КАК Поле1,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Сотрудник КАК Сотрудник,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Организация КАК Организация,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.ПериодДействия КАК Период,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Регистратор КАК Регистратор,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Показатель КАК Показатель,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Значение КАК Значение
         |ПОМЕСТИТЬ ДанныеРазовыхПоказателей
         |ИЗ
         |	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников
         |ГДЕ
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.ПериодДействия МЕЖДУ &НачалоПериода И &КонецПериода
         |;
         |
         |////////////////////////////////////////////////////////////////////////////////
         |ВЫБРАТЬ
         |	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
         |	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
         |	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение
         |ПОМЕСТИТЬ Представления_КадровыеДанныеСотрудников
         |ИЗ
         |	ДанныеРазовыхПоказателей КАК ДанныеРазовыхПоказателей
         |;
         |
         |////////////////////////////////////////////////////////////////////////////////
         |ВЫБРАТЬ
         |	Расчет.Подразделение КАК Подразделение,
         |	Расчет.Сотрудник КАК Сотрудник,
         |	Расчет.Организация КАК Организация,
         |	Расчет.Период КАК Период,
         |	Расчет.Регистратор КАК Регистратор,
         |	Расчет.ФизическоеЛицо КАК ФизическоеЛицо,
         |	Расчет.Показатель КАК Показатель,
         |	Расчет.Значение КАК ЗначениеУБ,
         |	0 КАК ЗначениеЗП
         |{ВЫБРАТЬ
         |	Подразделение.*,
         |	Сотрудник.*,
         |	Организация.*,
         |	Период,
         |	Регистратор.*,
         |	ФизическоеЛицо.*,
         |	Показатель.*,
         |	ЗначениеУБ,
         |	ЗначениеЗП}
         |ИЗ
         |	Расчет КАК Расчет
         |
         |ОБЪЕДИНИТЬ ВСЕ
         |
         |ВЫБРАТЬ
         |	Представления_КадровыеДанныеСотрудников.Подразделение,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Сотрудник,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Организация,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.ПериодДействия,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Регистратор,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.ФизическоеЛицо,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Показатель,
         |	0,
         |	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Значение
         |ИЗ
         |	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников
         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Представления_КадровыеДанныеСотрудников КАК Представления_КадровыеДанныеСотрудников
         |		ПО ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.ПериодДействия = Представления_КадровыеДанныеСотрудников.Период
         |			И ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Сотрудник = Представления_КадровыеДанныеСотрудников.Сотрудник";
	
КонецФункции

Функция ТекстЗапросаУБ()

	Возврат 
	
	 "ВЫБРАТЬ
	 |	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.Организация КАК Организация,
	 |	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.Подразделение КАК Подразделение,
	 |	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	 |	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.Сотрудник КАК Сотрудник,
	 |	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.Показатель КАК Показатель,
	 |	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.ЗначениеОборот КАК ЗначениеУБ,
	 |	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.ЗначениеОборот КАК ЗначениеЗП,
	 |	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.ПериодМесяц КАК Период,
	 |	УБ_ДанныеПоказателейРасчетаЗарплатыОбороты.Регистратор КАК Регистратор
	 |ИЗ
	 |	РегистрНакопления.УБ_ДанныеПоказателейРасчетаЗарплаты.Обороты(, , Авто, ) КАК УБ_ДанныеПоказателейРасчетаЗарплатыОбороты"
	
	 // "ВЫБРАТЬ
	 //|	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.Подразделение КАК Подразделение,
	 //|	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.Организация КАК Организация,
	 //|	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	 //|	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.Сотрудник КАК Сотрудник,
	 //|	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.Регистратор КАК Регистратор,
	 //|	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.ТипПоказателя.ПоказательРасчетаЗарплаты КАК Показатель,
	 //|	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.СуммаОборот + УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.ПроцентПремииОборот КАК ЗначениеУБ,
	 //|	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.СуммаОборот + УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.ПроцентПремииОборот КАК ЗначениеЗП,
	 //|	УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты.ПериодМесяц КАК Период
	 //|ИЗ
	 //|	РегистрНакопления.УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудников.Обороты(, , Авто, ) КАК УБ_ДанныеИтоговыхНачисленийРасчетаЭффективностиСотрудниковОбороты";
	
КонецФункции

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
КонецПроцедуры


// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт

	Набор = СхемаКомпоновкиДанных.НаборыДанных[0];	 
	Если КлючСхемы <> КлючВарианта  Тогда
		Если  УБ_ОбщегоНазначенияПовтИсп.ИспользоватьСправочникиКАУП() Тогда                             
			КлючВарианта = "СверкаДанныхПередаваемыхВРасчетныйОтдел"; 
			Набор.Запрос = ТекстЗапросаУТ_КА();
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыОтчеты");        
			ОбщийМодуль.ИнициализироватьОтчетПечатнойФормы(Контекст, ЭтотОбъект, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
			ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючВарианта);
			
		Иначе        
			КлючВарианта = "ДанныеПередаваемыеВРасчетныйОтдел";
			Набор.Запрос = ТекстЗапросаУБ();       
			ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючВарианта);
		КонецЕсли; 	
	КонецЕсли;
	
	Вариант = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючВарианта);

КонецПроцедуры

Процедура СформироватьПараметрыОтчета(ПараметрКоманды, ПараметрыФормы, Параметры)
	
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = НачалоМесяца(ДобавитьМесяц(ПараметрКоманды.НачалоПериода, -2));
	Период.ДатаОкончания = КонецМесяца(ПараметрКоманды.КонецПериода);
	
	ПараметрыФормы.Отбор.Вставить("Сотрудник", ПараметрКоманды.Сотрудник);
	ПараметрыФормы.Отбор.Вставить("Подразделение", ПараметрКоманды.Подразделение);
	ПараметрыФормы.Отбор.Вставить("Период", Период);
	
	ПараметрыФормы.КлючНазначенияИспользования = ПараметрКоманды;
	Параметры.КлючНазначенияИспользования = ПараметрКоманды;
	
КонецПроцедуры

Функция СведенияОВнешнейОбработке() Экспорт

 	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.3.1.73");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Анализ выплат сотрудникам'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = "1.5";
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Анализ выплат сотрудникам'");
	Команда.Идентификатор = "АнализВыплатСотрудникам";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации

КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПолучитьДанныеНаОснованииСКД(СхемаКомпоновкиДанных, Настройки, ДокументРезультат,, ДанныеРасшифровки);
	
	ОбъединитьЯчейкиВТабличномДокументе(ДокументРезультат, "#");

КонецПроцедуры

// Заполняет переданный объект на основани СКД
//
// Параметры
//
//  СКД – собствеено настройки СКД
//
//  ОбъектДляЗагрузки – объект в который выгружаются данные, таблица значений, дерево значений, табличный документ
//
//  ИсполняемыеНастройки – Пользовательские настройки СКД если не указаны будут использованы настроки СКД по умолчанию
//
//  СтруктураПараметров - Структура – Передаваемые для СКД параметры
//
//  краткий лекбез, поправлю позже
//
Процедура ПолучитьДанныеНаОснованииСКД(СКД, ИсполняемыеНастройки = Неопределено, ОбъектДляЗагрузки, СтруктураПараметров = Неопределено, РасшифровкаСКД = Неопределено, МакетКомпоновки = Неопределено, ВнешниеНаборыДанных = Неопределено) Экспорт

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    Если ТипЗнч(ОбъектДляЗагрузки) = Тип("ТабличныйДокумент") Тогда
        ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
    Иначе
        ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
    КонецЕсли;

    Если ИсполняемыеНастройки = Неопределено Тогда
        ИсполняемыеНастройки = СКД.НастройкиПоУмолчанию;
    КонецЕсли;

    Если СтруктураПараметров <> Неопределено Тогда
        КоллекцияЗначенийПараметров = ИсполняемыеНастройки.ПараметрыДанных.Элементы;
        Для каждого Параметр Из СтруктураПараметров Цикл
            НайденноеЗначениеПараметра = КоллекцияЗначенийПараметров.Найти(Параметр.Ключ);
            Если НайденноеЗначениеПараметра <> Неопределено Тогда
                НайденноеЗначениеПараметра.Использование = Истина;
                НайденноеЗначениеПараметра.Значение = Параметр.Значение;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

    МакетКомпоновкиСКД = КомпоновщикМакета.Выполнить(СКД, ИсполняемыеНастройки, РасшифровкаСКД, МакетКомпоновки, ТипГенератора);
    ПроцессорКомпановки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпановки.Инициализировать(МакетКомпоновкиСКД, ВнешниеНаборыДанных, РасшифровкаСКД, Истина);
    Если ТипЗнч(ОбъектДляЗагрузки) = Тип("ТабличныйДокумент") Тогда
        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
        ПроцессорВывода.УстановитьДокумент(ОбъектДляЗагрузки);
    Иначе
        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
        ПроцессорВывода.УстановитьОбъект(ОбъектДляЗагрузки);
    КонецЕсли;

    ПроцессорВывода.ОтображатьПроцентВывода = Истина;
    ПроцессорВывода.Вывести(ПроцессорКомпановки, Истина);

КонецПроцедуры // ПолучитьДанныеНаОснованииСКД()

Процедура ОбъединитьЯчейкиВТабличномДокументе(ТабличныйДокумент, МаркерОбъединения) Экспорт
	// Находит ячейки, содержащие в тексте МаркерОбъединения
	// Объединяет ячейки, располагающиеся рядом, содержащие одинаковый текст и маркер объединения 
	
	ОбъединяемыеЯчейки = НайтиОбластиТабличногоДокументаПоВхождениюПодстроки(ТабличныйДокумент, МаркерОбъединения);
	ОбъединяемыеЯчейки.Колонки.Добавить("Диапазон");
	ОбъединяемыеЯчейки.Сортировать("Верх,Лево");
	
	Для Каждого Строка из ОбъединяемыеЯчейки Цикл
		Отбор = Новый Структура("Текст,Верх,Лево", Строка.Текст, Строка.Верх-1, Строка.Лево);
		НайденныеСтроки = ОбъединяемыеЯчейки.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Строка.Диапазон = НайденныеСтроки[0].Диапазон;
			Строка.Диапазон.Низ = Макс(Строка.Диапазон.Низ, Строка.Верх);
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Текст,Верх,Лево", Строка.Текст, Строка.Верх, Строка.Лево-1); // !!! второй парамет равен количеству столбцов ресурсов
		НайденныеСтроки = ОбъединяемыеЯчейки.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Строка.Диапазон = НайденныеСтроки[0].Диапазон;
			Строка.Диапазон.Право = Макс(Строка.Диапазон.Право, Строка.Лево);
			Продолжить;
		КонецЕсли;
		
		Строка.Диапазон = Новый Структура("Текст,Верх,Лево,Низ,Право", Строка.Текст, Строка.Верх, Строка.Лево, Строка.Верх, Строка.Лево);
	КонецЦикла;
	
	ОбъединяемыеЯчейки.Свернуть("Диапазон");
	Для Каждого Строка Из ОбъединяемыеЯчейки Цикл
		Диапазон = Строка.Диапазон;
		Область = ТабличныйДокумент.Область(Диапазон.Верх, Диапазон.Лево, Диапазон.Низ, Диапазон.Право);
		Область.Объединить();
		
		// Удалим маркер объединения из текст ячейки
		Область.Текст = СтрЗаменить(Область.Текст, МаркерОбъединения, "");
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиОбластиТабличногоДокументаПоВхождениюПодстроки(ТабличныйДокумент, ПодстрокаПоиска) Экспорт
	
	НайденныеОбласти = Новый ТаблицаЗначений;
	НайденныеОбласти.Колонки.Добавить("Область");
	НайденныеОбласти.Колонки.Добавить("Текст");
	НайденныеОбласти.Колонки.Добавить("Верх");
	НайденныеОбласти.Колонки.Добавить("Лево");
	
	НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(ПодстрокаПоиска);
	
	Пока НЕ НайденнаяОбласть = Неопределено Цикл
		
		НоваяСтрока = НайденныеОбласти.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяОбласть);
		НоваяСтрока.Область = НайденнаяОбласть;
		
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(ПодстрокаПоиска, НайденнаяОбласть);
		
	КонецЦикла;
	
	Возврат НайденныеОбласти;
	
КонецФункции


#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли