#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
// todo не стоит выбирать все кадровые данные всегда, нужна какая-то аналитика
перем ЦветоваяГамма;	
перем ЦветоваяГаммаШрифтов;	    
перем Линии;

перем ОбластьОрганизацияАдрес;
перем ОбластьПодразделениеАдрес;
перем ОбластьСотрудникАдрес;
перем ОбластьРуководительПодразделенияАдрес;
перем ОбластьЗаголовокЦелиАдрес;
перем ОбластьСотрудникиАдрес;
перем ОбластьЧертаСлеваАдрес;
перем ОбластьСплошнаяЧертаСлеваАдрес;
перем ОбластьСплошнойУголАдрес;
перем ОбластьЧертаСнизуАдрес;
перем ОбластьСплошнаяЧертаСнизуАдрес;
перем ОбластьУголАдрес;
перем ОбластьПустойБлокАдрес;
перем ОбластьЦелиПодразделенияЗаголовокАдрес;
перем Макет;
перем ПиктограммаТрендаРостУлучшается;
перем ПиктограммаТрендаПадениеУхудшается;
	
#Область ОбработчикиСобытий          

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Глубина = 50;   //на будущее задел
	СтандартнаяОбработка = Ложь;
		
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ДокументРезультат.Очистить();
	ОтчетПустой = Истина;	
	
	// Параметры документа
	ДокументРезультат.ТолькоПросмотр = Истина;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КартаЦелейКомпании";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ДанныеОтчета = Новый ДеревоЗначений;
	
	МакетКомпоновки = МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	
	// Обозначим начало вывода
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина); 
	ОтчетПустой = ДанныеОтчета.Строки.Количество() = 0;                               
	Если НЕ ОтчетПустой Тогда
		ВывестиМакетКартаЦелей(ДокументРезультат, ДанныеОтчета, ДатаОтчета);    
	КонецЕсли;
	ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры   

#КонецОбласти

#Область СлужебныеПроцедурыИФункции           


Процедура ВывестиМакетКартаЦелей(ДокументРезультат, ДанныеОтчета, ДатаОтчета)
 
	ДополнительныеПараметры = ПараметрыОтчета(ДанныеОтчета, ДатаОтчета, Истина);
	ПараметрыМакета = ДополнительныеПараметры.ПараметрыМакета;
	
	Для Каждого ДанныеКомпании Из ДанныеОтчета.Строки Цикл     
		
		ОбластьПодразделение 		= Макет.ПолучитьОБласть(ОбластьОрганизацияАдрес);
		ОбластьСотрудники 			= Макет.ПолучитьОБласть(ОбластьСотрудникиАдрес);
		ОбластьЧертаСлева 			= Макет.ПолучитьОБласть(ОбластьЧертаСлеваАдрес);
		ОбластьСплошнаяЧертаСлева 	= Макет.ПолучитьОБласть(ОбластьСплошнаяЧертаСлеваАдрес);
		ОбластьЧертаСнизу 			= Макет.ПолучитьОБласть(ОбластьЧертаСнизуАдрес);
		ОбластьСплошнаяЧертаСнизу 	= Макет.ПолучитьОБласть(ОбластьСплошнаяЧертаСнизуАдрес);
		ОбластьСплошнойУгол			= Макет.ПолучитьОБласть(ОбластьСплошнойУголАдрес);
		ОбластьУгол 				= Макет.ПолучитьОБласть(ОбластьУголАдрес);
		ОбластьПустойБлок 			= Макет.ПолучитьОБласть(ОбластьПустойБлокАдрес);

		
		Если НЕ ЗначениеЗаполнено(ДанныеКомпании.Компания) Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ВывестиДанныеОрганизации(ТабличныйДокумент, ДанныеКомпании, ДанныеКомпании.Компания, ДополнительныеПараметры);   
		
		ДокументРезультат.Вывести(ОбластьПустойБлок);
		ДокументРезультат.Вывести(ОбластьПустойБлок);    
		
		ДополнительныеПараметры.Вставить("Индекс",ДанныеКомпании.Уровень());
		ДополнительныеПараметры.Вставить("ЗаголовокЦели", "компании");
		ОбластьПодчиненныеПозиции = Новый ТабличныйДокумент;
		СписокЦелей = Новый Массив;                             //ее цели
		ЗаполнитьСписокЦелейНазначения(ДанныеКомпании, "Назначение", ДанныеКомпании.Компания, СписокЦелей);
		ВывестиДанныеЦелей(ОбластьПодчиненныеПозиции, СписокЦелей, Ложь, ДополнительныеПараметры);
		
		ОбластьПодразделение.Параметры.ПодразделениеНаименование = ДанныеКомпании.Компания;
		ОбластьПодразделение.Параметры.Подразделение = ДанныеКомпании.Компания;
		Для каждого ВыдОбл Из ОбластьПодразделение.ВыделенныеОбласти Цикл            
			ВыдОбл.ЦветФона = ЦветоваяГамма[0];
			ВыдОбл.ЦветТекста = WebЦвета.Белый;
			ВыдОбл.ГраницаСнизу = Линии.СплошнаяТонкая;
		КонецЦикла;

		Если ОбластьПодчиненныеПозиции.ВысотаТаблицы > 0 Тогда 
			ОбластьПодразделение.Вывести(ОбластьПодчиненныеПозиции.ПолучитьОбласть(1, 1, ОбластьПодчиненныеПозиции.ВысотаТаблицы, ОбластьПодчиненныеПозиции.ШиринаТаблицы));
		КонецЕсли;

				
		ДокументРезультат.Присоединить(ОбластьПодразделение);   //вывод нулевого уровня
		ОбластьЯчеек = ДокументРезультат.Вывести(ТабличныйДокумент.ПолучитьОбласть(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы));
		ОбластьЯчеек.ШиринаКолонки = 6;
		
		ДокументРезультат.Вывести(ОбластьПустойБлок);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;
	

КонецПроцедуры      

Процедура ВывестиДанныеОрганизации(ДокументРезультат, ДанныеОтчета, ТекущаяКомпания, ДополнительныеПараметры)
	
	ПараметрыМакета = ДополнительныеПараметры.ПараметрыМакета;
	НастройкиОтчета = ДополнительныеПараметры.НастройкиОтчета;
	
	ОбластьПодразделение 				= Макет.ПолучитьОбласть(ОбластьПодразделениеАдрес);
	ОбластьРуководительПодразделения 	= Макет.ПолучитьОбласть(ОбластьРуководительПодразделенияАдрес);
	ОбластьЧертаСлева 					= Макет.ПолучитьОбласть(ОбластьЧертаСлеваАдрес);
	ОбластьСплошнаяЧертаСлева 			= Макет.ПолучитьОбласть(ОбластьСплошнаяЧертаСлеваАдрес);
	ОбластьЧертаСнизу 					= Макет.ПолучитьОбласть(ОбластьЧертаСнизуАдрес);

	ОбластьСплошнаяЧертаСнизу 			= Макет.ПолучитьОбласть(ОбластьСплошнаяЧертаСнизуАдрес);
	ОбластьСплошнойУгол					= Макет.ПолучитьОбласть(ОбластьСплошнойУголАдрес);
	ОбластьУгол 						= Макет.ПолучитьОбласть(ОбластьУголАдрес);
	ОбластьПустойБлок 					= Макет.ПолучитьОбласть(ОбластьПустойБлокАдрес);
	КоличествоОрганизаций = 0;
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл 
		Если ЗначениеЗаполнено(ДанныеОрганизации.Организация) Тогда //а компания всегда одна, это корневая позиция
			КоличествоОрганизаций = КоличествоОрганизаций + 1;
		КонецЕсли;
	КонецЦикла;
	
	НомерОрганизации = 1;
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл 
		Если НЕ ЗначениеЗаполнено(ДанныеОрганизации.Организация) Тогда
			Продолжить;
		КонецЕсли;
	
		МаксимальныйИндекс = 0;
		ЕстьПодчиненныеПодразделения = ДанныеОрганизации.Строки.Количество()>0;
		
		ОбластьПодчиненныеПозиции = Новый ТабличныйДокумент;
		СписокЦелей = Новый Массив;
		ЗаполнитьСписокЦелейНазначения(ДанныеОрганизации,"Назначение", ДанныеОрганизации.Организация, СписокЦелей);


		ДополнительныеПараметры.Вставить("Индекс",ДанныеОрганизации.Уровень());
		ДополнительныеПараметры.Вставить("ЕстьПодчиненные", СписокЦелей.Количество()>0);
		ДополнительныеПараметры.Вставить("Подразделение",ДанныеОрганизации.Организация); 
		ДополнительныеПараметры.Вставить("ЗаголовокЦели", "организации");                                           
		ВывестиДанныеЦелей(ОбластьПодчиненныеПозиции, СписокЦелей, Не ЕстьПодчиненныеПодразделения, ДополнительныеПараметры);
		ОбластьПодчиненныеПодразделения = Новый ТабличныйДокумент;
		ДополнительныеПараметры.Вставить("ЕстьПодчиненныеПодразделения", ЕстьПодчиненныеПодразделения);
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент = Новый ТабличныйДокумент;	
		ВывестиДанныеПодразделенияВерхнегоУровня(ТабличныйДокумент, ДанныеОрганизации, ДанныеОрганизации.Организация, ДополнительныеПараметры);
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ЛеваяКолонка = Новый ТабличныйДокумент;
			ОбластьПодчиненныеПодразделения.Вывести(ЛеваяКолонка.ПолучитьОбласть(1, 1, ЛеваяКолонка.ВысотаТаблицы, 1));
			ОбластьПодчиненныеПодразделения.Присоединить(ТабличныйДокумент.ПолучитьОбласть(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы));
		КонецЕсли;
		
		ОбластьПодразделениеВерхнегоУровня = Новый ТабличныйДокумент;

		ВыводимаяОбласть = ?(НомерОрганизации = 1, ОбластьПустойБлок, ОбластьЧертаСнизу);
		ОбластьПодразделениеВерхнегоУровня.Вывести(ВыводимаяОбласть);
		Индекс = Цел(ДанныеОрганизации.Уровень()+1/ЦветоваяГамма.Количество());
		Для Сч = 1 По 3 Цикл
			ОбластьПодразделениеВерхнегоУровня.Присоединить(ВыводимаяОбласть);
		КонецЦикла;	
		
		Если КоличествоОрганизаций > 1 Тогда
			Если НомерОрганизации <> КоличествоОрганизаций Тогда
				ОбластьПодразделениеВерхнегоУровня.Присоединить(?(НомерОрганизации = 1, ОбластьУгол, ОбластьЧертаСнизу));
				ШиринаТаблицы = Макс(ОбластьПодчиненныеПодразделения.ШиринаТаблицы, ОбластьПодчиненныеПозиции.ШиринаТаблицы, ОбластьПодразделение.ШиринаТаблицы, 5);
				Для Сч = 4 По ШиринаТаблицы Цикл 
					ОбластьПодразделениеВерхнегоУровня.Присоединить(ОбластьЧертаСнизу);
				КонецЦикла;
			КонецЕсли;
		Иначе                                                         
			ОбластьПодразделениеВерхнегоУровня.Присоединить(ОбластьЧертаСлева);      //вертикальная от центра блока
		КонецЕсли;      
		
		ОбластьПодразделениеВерхнегоУровня.Вывести(ОбластьПустойБлок);
		Для Сч = 1 По 3 Цикл 
			ОбластьПодразделениеВерхнегоУровня.Присоединить(ОбластьПустойБлок); //смещаем к центру вертикальную черту
		КонецЦикла;	
		ОбластьПодразделениеВерхнегоУровня.Присоединить(ОбластьЧертаСлева);
		
		ОбластьПустаяКолонка = Новый ТабличныйДокумент;
		Для Сч = 1 По ОбластьПодчиненныеПодразделения.ВысотаТаблицы + 2 Цикл 
			ОбластьПустаяКолонка.Вывести(ОбластьПустойБлок);
		КонецЦикла;
		ОбластьПодразделениеВерхнегоУровня.Вывести(ОбластьПустаяКолонка.ПолучитьОбласть(1, 1, ОбластьПустаяКолонка.ВысотаТаблицы, 1));
		ОбластьДанныеПодразделения = Новый ТабличныйДокумент;
		ОбластьПодразделение.Параметры.ПодразделениеНаименование = ДанныеОрганизации.ОрганизацияНаименование;
		ОбластьПодразделение.Параметры.Подразделение = ДанныеОрганизации.Организация;
		
		ВыводимаяОбласть = ОбластьПодразделение.Область(1, 1, ОбластьПодразделение.ВысотаТаблицы, ОбластьПодразделение.ШиринаТаблицы);
		ВыводимаяОбласть.ЦветФона = ЦветоваяГамма[Индекс];
		ОбластьДанныеПодразделения.Вывести(ОбластьПодразделение);
						
		Если ОбластьПодчиненныеПозиции.ВысотаТаблицы > 0 Тогда 
			ОбластьДанныеПодразделения.Вывести(ОбластьПодчиненныеПозиции.ПолучитьОбласть(1, 1, ОбластьПодчиненныеПозиции.ВысотаТаблицы, ОбластьПодчиненныеПозиции.ШиринаТаблицы));
		КонецЕсли;

		Если ОбластьПодчиненныеПодразделения.ВысотаТаблицы > 0 Тогда 
			ОбластьДанныеПодразделения.Вывести(ОбластьПодчиненныеПодразделения.ПолучитьОбласть(1, 1, ОбластьПодчиненныеПодразделения.ВысотаТаблицы, ОбластьПодчиненныеПодразделения.ШиринаТаблицы));
		КонецЕсли;
		
		
		ОбластьПодразделениеВерхнегоУровня.Присоединить(ОбластьДанныеПодразделения.ПолучитьОбласть(1, 1, ОбластьДанныеПодразделения.ВысотаТаблицы, ОбластьДанныеПодразделения.ШиринаТаблицы));
			
		ВысотаОбласти = ОбластьПодразделениеВерхнегоУровня.ВысотаТаблицы;
		ШиринаОбласти = ОбластьПодразделениеВерхнегоУровня.ШиринаТаблицы;                                                     
		
		Если НомерОрганизации = 1 Тогда
			ДокументРезультат.Вывести(ОбластьПодразделениеВерхнегоУровня.ПолучитьОбласть(1, 1, ВысотаОбласти, ШиринаОбласти));
		Иначе                              
			ДокументРезультат.Присоединить(ОбластьПодразделениеВерхнегоУровня.ПолучитьОбласть(1, 1, ВысотаОбласти, ШиринаОбласти));
		КонецЕсли;                     
		
		НомерОрганизации = НомерОрганизации + 1;
		
	КонецЦикла;
	
	
		
КонецПроцедуры      

Процедура ВывестиДанныеПодразделенияВерхнегоУровня(ДокументРезультат, ДанныеОрганизации, ТекущееПодразделение, ДополнительныеПараметры)
	
	ПараметрыМакета = ДополнительныеПараметры.ПараметрыМакета;
	НастройкиОтчета = ДополнительныеПараметры.НастройкиОтчета;
	Руководители = ДополнительныеПараметры.РуководителиПодразделений;
	
	ОбластьПодразделение 				= Макет.ПолучитьОбласть(ОбластьПодразделениеАдрес);
	ОбластьРуководительПодразделения 	= Макет.ПолучитьОбласть(ОбластьРуководительПодразделенияАдрес);
	ОбластьЧертаСлева 					= Макет.ПолучитьОбласть(ОбластьЧертаСлеваАдрес);
	ОбластьСплошнаяЧертаСлева 			= Макет.ПолучитьОбласть(ОбластьСплошнаяЧертаСлеваАдрес);
	ОбластьЧертаСнизу 					= Макет.ПолучитьОбласть(ОбластьЧертаСнизуАдрес);

	ОбластьСплошнаяЧертаСнизу 			= Макет.ПолучитьОбласть(ОбластьСплошнаяЧертаСнизуАдрес);
	ОбластьСплошнойУгол					= Макет.ПолучитьОбласть(ОбластьСплошнойУголАдрес);
	ОбластьУгол 						= Макет.ПолучитьОбласть(ОбластьУголАдрес);
	ОбластьПустойБлок 					= Макет.ПолучитьОбласть(ОбластьПустойБлокАдрес);
	КоличествоПодразделений = 0;
	Для Каждого ДанныеПодразделенияВерхнегоУровня Из ДанныеОрганизации.Строки Цикл 
		Если ЗначениеЗаполнено(ДанныеПодразделенияВерхнегоУровня.Подразделение) и ДанныеПодразделенияВерхнегоУровня.Подразделение <> ТекущееПодразделение Тогда 
			КоличествоПодразделений = КоличествоПодразделений + 1;
		КонецЕсли;
	КонецЦикла;
	
	НомерПодразделения = 1;
	
	Для Каждого ДанныеПодразделенияВерхнегоУровня Из ДанныеОрганизации.Строки Цикл 
		Если НЕ ЗначениеЗаполнено(ДанныеПодразделенияВерхнегоУровня.Подразделение) Тогда
			Продолжить;
		КонецЕсли;
	
		Если ДанныеПодразделенияВерхнегоУровня.Подразделение = ТекущееПодразделение 
			//отбор по уровню проще наложить здесь, чем в СКД
			или ДанныеПодразделенияВерхнегоУровня.СистемныеПоляУровень > Глубина+1 Тогда 
			Продолжить;
		КонецЕсли;
		
		МаксимальныйИндекс = 0;
		ЕстьПодчиненныеПодразделения = Ложь;
		
		Для Каждого ДанныеПодразделения Из ДанныеПодразделенияВерхнегоУровня.Строки Цикл 
			Если ДанныеПодразделения.Подразделение <> ДанныеПодразделенияВерхнегоУровня.Подразделение Тогда 
				МаксимальныйИндекс = ДанныеПодразделенияВерхнегоУровня.Строки.Индекс(ДанныеПодразделения);
				ЕстьПодчиненныеПодразделения = Истина;
			КонецЕсли;
		КонецЦикла;
		
		
		ОбластьПодчиненныеПозиции = Новый ТабличныйДокумент;
		СписокЦелей = Новый Массив;
		ЗаполнитьСписокЦелейНазначения(ДанныеПодразделенияВерхнегоУровня,"Назначение", ДанныеПодразделенияВерхнегоУровня.Подразделение, СписокЦелей);


		ДополнительныеПараметры.Вставить("Индекс",ДанныеПодразделенияВерхнегоУровня.Уровень());
		ДополнительныеПараметры.Вставить("ЕстьПодчиненные", СписокЦелей.Количество()>0);
		ДополнительныеПараметры.Вставить("Подразделение",ДанныеПодразделенияВерхнегоУровня.Подразделение); 
		СтрокаСИтогамиПодразделения = ДанныеПодразделенияВерхнегоУровня.Строки.НайтиСтроки(Новый Структура("Подразделение, НомерТаблицы", ДанныеПодразделенияВерхнегоУровня.Подразделение, 3)); // ШОО 3 - если	выводим Количество сотрудников, и 2 - если	нужно Количество ставок
		ДополнительныеПараметры.Вставить("ЗаголовокЦели", "подразделения");                                           
		Если НЕ СтрокаСИтогамиПодразделения = Неопределено и СтрокаСИтогамиПодразделения.Количество() >0 Тогда
			ВывестиДанныеПоСотрудникам(ОбластьПодчиненныеПозиции, 
									   СтрокаСИтогамиПодразделения[0], 
									   ДополнительныеПараметры);
			ВывестиДанныеЦелей(ОбластьПодчиненныеПозиции, СписокЦелей, Не ЕстьПодчиненныеПодразделения, ДополнительныеПараметры);
		Иначе
			ВывестиДанныеПоСотрудникам(ОбластьПодчиненныеПозиции, Неопределено, ДополнительныеПараметры);
			ВывестиДанныеЦелей(ОбластьПодчиненныеПозиции, СписокЦелей, Не ЕстьПодчиненныеПодразделения, ДополнительныеПараметры);
		КонецЕсли;  
		ОбластьПодчиненныеПодразделения = Новый ТабличныйДокумент;
		ДополнительныеПараметры.Вставить("ЕстьПодчиненныеПодразделения", ЕстьПодчиненныеПодразделения);
		ВывестиДанныеСотрудников(ОбластьПодчиненныеПодразделения, ДанныеПодразделенияВерхнегоУровня, ДанныеПодразделенияВерхнегоУровня.Подразделение, ДополнительныеПараметры);
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Для Каждого ДанныеПодразделения Из ДанныеПодразделенияВерхнегоУровня.Строки Цикл 
			
			Если ДанныеПодразделения.Подразделение = ДанныеПодразделенияВерхнегоУровня.Подразделение 
				или ДанныеПодразделения.СистемныеПоляУровень > Глубина+1 Тогда 
				Продолжить;
			КонецЕсли;
			
			ТабличныйДокумент = Новый ТабличныйДокумент;	
			ВывестиДанныеПодразделения(ТабличныйДокумент, ДанныеПодразделения, ДанныеПодразделения.Подразделение, ДополнительныеПараметры);
			Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
				ЛеваяКолонка = Новый ТабличныйДокумент;
				ЛеваяКолонка.Вывести(ОбластьЧертаСлева);
				ЛеваяКолонка.Вывести(ОбластьУгол);
				
				Если ДанныеПодразделенияВерхнегоУровня.Строки.Индекс(ДанныеПодразделения) < МаксимальныйИндекс Тогда 
					КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - 1;
					Для Сч = 1 По КоличествоСтрок Цикл 
						ЛеваяКолонка.Вывести(ОбластьЧертаСлева);
					КонецЦикла;
				КонецЕсли;
	
				ОбластьПодчиненныеПодразделения.Вывести(ЛеваяКолонка.ПолучитьОбласть(1, 1, ЛеваяКолонка.ВысотаТаблицы, 1));
				ОбластьПодчиненныеПодразделения.Присоединить(ТабличныйДокумент.ПолучитьОбласть(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы));
			КонецЕсли;
		КонецЦикла;
			
		
		ОбластьПодразделениеВерхнегоУровня = Новый ТабличныйДокумент;

		ВыводимаяОбласть = ?(НомерПодразделения = 1, ОбластьПустойБлок, ОбластьЧертаСнизу);
		ОбластьПодразделениеВерхнегоУровня.Вывести(ВыводимаяОбласть);
		Индекс = Цел(ДанныеПодразделенияВерхнегоУровня.Уровень()+1/ЦветоваяГамма.Количество());
		Для Сч = 1 По 3 Цикл
			ОбластьПодразделениеВерхнегоУровня.Присоединить(ВыводимаяОбласть);
		КонецЦикла;	
		
		Если КоличествоПодразделений > 1 Тогда
			Если НомерПодразделения <> КоличествоПодразделений Тогда
				ОбластьПодразделениеВерхнегоУровня.Присоединить(?(НомерПодразделения = 1, ОбластьУгол, ОбластьЧертаСнизу));
				ШиринаТаблицы = Макс(ОбластьПодчиненныеПодразделения.ШиринаТаблицы, ОбластьПодчиненныеПозиции.ШиринаТаблицы, ОбластьПодразделение.ШиринаТаблицы, 5);
				Для Сч = 4 По ШиринаТаблицы Цикл 
					ОбластьПодразделениеВерхнегоУровня.Присоединить(ОбластьЧертаСнизу);
				КонецЦикла;
			КонецЕсли;
		Иначе 
			ОбластьПодразделениеВерхнегоУровня.Присоединить(ОбластьЧертаСлева);
		КонецЕсли;      
		
		ОбластьПодразделениеВерхнегоУровня.Вывести(ОбластьПустойБлок);
		Для Сч = 1 По 3 Цикл 
			ОбластьПодразделениеВерхнегоУровня.Присоединить(ОбластьПустойБлок);
		КонецЦикла;	
		ОбластьПодразделениеВерхнегоУровня.Присоединить(ОбластьЧертаСлева);
		
		ОбластьПустаяКолонка = Новый ТабличныйДокумент;
		Для Сч = 1 По ОбластьПодчиненныеПодразделения.ВысотаТаблицы + 2 Цикл 
			ОбластьПустаяКолонка.Вывести(ОбластьПустойБлок);
		КонецЦикла;
		ОбластьПодразделениеВерхнегоУровня.Вывести(ОбластьПустаяКолонка.ПолучитьОбласть(1, 1, ОбластьПустаяКолонка.ВысотаТаблицы, 1));
		ОбластьДанныеПодразделения = Новый ТабличныйДокумент;
		ОбластьПодразделение.Параметры.ПодразделениеНаименование = ДанныеПодразделенияВерхнегоУровня.ПодразделениеНаименование;
		ОбластьПодразделение.Параметры.Подразделение = ДанныеПодразделенияВерхнегоУровня.Подразделение;
		ДанныеРуководителя = Руководители[ДанныеПодразделенияВерхнегоУровня.Подразделение];
		Если ДанныеРуководителя <> Неопределено Тогда 
			ОбластьПодразделение.Параметры.Руководитель = "рук. "+ДанныеРуководителя.РуководительПредставление;
			ОбластьПодразделение.Параметры.РуководительРасшифровка = ДанныеРуководителя.Руководитель;
		Иначе
			ОбластьПодразделение.Параметры.Руководитель = "не назначен";
		КонецЕсли;
		ВыводимаяОбласть = ОбластьПодразделение.Область(1, 1, ОбластьПодразделение.ВысотаТаблицы, ОбластьПодразделение.ШиринаТаблицы);
		ВыводимаяОбласть.ЦветФона = ЦветоваяГамма[Индекс];
		ОбластьДанныеПодразделения.Вывести(ОбластьПодразделение);
		
		Если ДанныеРуководителя <> Неопределено Тогда 
			ОбластьРуководительПодразделения.Параметры.ДолжностьРуководителя = ДанныеРуководителя.ДолжностьПредставление;
			ОбластьРуководительПодразделения.Параметры.Должность			= ДанныеРуководителя.ДолжностьПредставление;
			ВыводимаяОбласть = ОбластьРуководительПодразделения.Область(1, 1, ОбластьРуководительПодразделения.ВысотаТаблицы, ОбластьРуководительПодразделения.ШиринаТаблицы);
			ВыводимаяОбласть.ЦветФона = ЦветоваяГамма[ДанныеПодразделенияВерхнегоУровня.Уровень()];			
			ОбластьДанныеПодразделения.Вывести(ОбластьРуководительПодразделения);
		КонецЕсли;
		ДанныеРуководителя = Неопределено;
		
		Если ОбластьПодчиненныеПозиции.ВысотаТаблицы > 0 Тогда 
			ОбластьДанныеПодразделения.Вывести(ОбластьПодчиненныеПозиции.ПолучитьОбласть(1, 1, ОбластьПодчиненныеПозиции.ВысотаТаблицы, ОбластьПодчиненныеПозиции.ШиринаТаблицы));
		КонецЕсли;

		Если ОбластьПодчиненныеПодразделения.ВысотаТаблицы > 0 Тогда 
			ОбластьДанныеПодразделения.Вывести(ОбластьПодчиненныеПодразделения.ПолучитьОбласть(1, 1, ОбластьПодчиненныеПодразделения.ВысотаТаблицы, ОбластьПодчиненныеПодразделения.ШиринаТаблицы));
		КонецЕсли;
		
		ОбластьПодразделениеВерхнегоУровня.Присоединить(ОбластьДанныеПодразделения.ПолучитьОбласть(1, 1, ОбластьДанныеПодразделения.ВысотаТаблицы, ОбластьДанныеПодразделения.ШиринаТаблицы));
			
		ВысотаОбласти = ОбластьПодразделениеВерхнегоУровня.ВысотаТаблицы;
		ШиринаОбласти = ОбластьПодразделениеВерхнегоУровня.ШиринаТаблицы;                                                     

		Если НомерПодразделения = 1 Тогда
			ДокументРезультат.Вывести(ОбластьПодразделениеВерхнегоУровня.ПолучитьОбласть(1, 1, ВысотаОбласти, ШиринаОбласти));
		Иначе 
			ДокументРезультат.Присоединить(ОбластьПодразделениеВерхнегоУровня.ПолучитьОбласть(1, 1, ВысотаОбласти, ШиринаОбласти));
		КонецЕсли;
		
		НомерПодразделения = НомерПодразделения + 1;
		
	КонецЦикла;
	
КонецПроцедуры      

Процедура ВывестиДанныеПодразделения(ДокументРезультат, ДанныеВышестоящегоПодразделения, ТекущееПодразделение, Знач ДополнительныеПараметры)

	ПараметрыМакета = ДополнительныеПараметры.ПараметрыМакета;
	НастройкиОтчета = ДополнительныеПараметры.НастройкиОтчета;
	Руководители = ДополнительныеПараметры.РуководителиПодразделений;
	
	ОбластьПодразделение 				= Макет.ПолучитьОбласть(ОбластьПодразделениеАдрес);
	ОбластьРуководительПодразделения 	= Макет.ПолучитьОбласть(ОбластьРуководительПодразделенияАдрес);
	ОбластьЧертаСлева 					= Макет.ПолучитьОбласть(ОбластьЧертаСлеваАдрес);
	
	ОбластьСплошнаяЧертаСлева 			= Макет.ПолучитьОбласть(ОбластьСплошнаяЧертаСлеваАдрес);
	ОбластьУгол 						= Макет.ПолучитьОбласть(ОбластьУголАдрес);
	ОбластьСплошнойУгол					= Макет.ПолучитьОбласть(ОбластьСплошнойУголАдрес);
	ОбластьПустойБлок 					= Макет.ПолучитьОбласть(ОбластьПустойБлокАдрес);
	
	ДокументРезультат.Вывести(ОбластьПустойБлок);    
	
	Индекс = ДанныеВышестоящегоПодразделения.Уровень();
	ДанныеРуководителя = Руководители[ДанныеВышестоящегоПодразделения.Подразделение];
	
	ОбластьПодразделение.Параметры.ПодразделениеНаименование = ДанныеВышестоящегоПодразделения.ПодразделениеНаименование;
	ОбластьПодразделение.Параметры.Подразделение = ДанныеВышестоящегоПодразделения.Подразделение;
	Если ДанныеРуководителя <> Неопределено Тогда 
		ОбластьПодразделение.Параметры.Руководитель = "рук. "+ДанныеРуководителя.РуководительПредставление;
		ОбластьПодразделение.Параметры.РуководительРасшифровка = ДанныеРуководителя.Руководитель;
	Иначе
		ОбластьПодразделение.Параметры.Руководитель = "не назначен";
	КонецЕсли;
	ВыводимаяОбласть = ОбластьПодразделение.Область(1, 1, ОбластьПодразделение.ВысотаТаблицы, ОбластьПодразделение.ШиринаТаблицы);
	ВыводимаяОбласть.ЦветФона = ЦветоваяГамма[Индекс];			
	
	ДокументРезультат.Вывести(ОбластьПодразделение);
	
	Если ДанныеРуководителя <> Неопределено Тогда 
		ОбластьРуководительПодразделения.Параметры.ДолжностьРуководителя = ДанныеРуководителя.ДолжностьПредставление;
		ВыводимаяОбласть = ОбластьРуководительПодразделения.Область(1, 1, ОбластьРуководительПодразделения.ВысотаТаблицы, ОбластьРуководительПодразделения.ШиринаТаблицы);
		ВыводимаяОбласть.ЦветФона = ЦветоваяГамма[Индекс];			    
		ВыводимаяОбласть.ГраницаСнизу = Линии.СплошнаяТонкая;
		ДокументРезультат.Вывести(ОбластьРуководительПодразделения);    
	Иначе          
		//выведем пустую область
		ВыводимаяОбласть = ОбластьРуководительПодразделения.Область(1, 1, ОбластьРуководительПодразделения.ВысотаТаблицы, ОбластьРуководительПодразделения.ШиринаТаблицы);
		ВыводимаяОбласть.ЦветФона = ЦветоваяГамма[Индекс];			    
		ВыводимаяОбласть.ГраницаСнизу = Линии.СплошнаяТонкая;
		ДокументРезультат.Вывести(ОбластьРуководительПодразделения); 
	КонецЕсли;  
	ДанныеРуководителя = Неопределено;
	
	МаксимальныйИндекс = 0;
	ЕстьПодчиненныеПодразделения = Ложь;
	
	Для Каждого ДанныеПодразделения Из ДанныеВышестоящегоПодразделения.Строки Цикл 
		Если ДанныеПодразделения.Подразделение <> ТекущееПодразделение Тогда 
			МаксимальныйИндекс = ДанныеВышестоящегоПодразделения.Строки.Индекс(ДанныеПодразделения);
			ЕстьПодчиненныеПодразделения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СписокЦелей = Новый Массив;
	ЗаполнитьСписокЦелейНазначения(ДанныеВышестоящегоПодразделения, "Назначение", ДанныеВышестоящегоПодразделения.Подразделение, СписокЦелей);
	
	ОбластьПодчиненныеПозиции = Новый ТабличныйДокумент;                                               
	ДополнительныеПараметры.Вставить("Индекс", Индекс);     
	ДополнительныеПараметры.Вставить("ЗаголовокЦели", "подразделения");
	СтрокиСИтогамиПодразделения = ДанныеВышестоящегоПодразделения.Строки.НайтиСтроки(Новый Структура("Подразделение, НомерТаблицы", ДанныеВышестоящегоПодразделения.Подразделение, 3)); 
	КоличествоСотрудников =  0;
	Для каждого СтрокаСИтогамиПодразделения Из СтрокиСИтогамиПодразделения Цикл
		КоличествоСотрудников = Макс(КоличествоСотрудников, СтрокаСИтогамиПодразделения.КоличествоСотрудников);
	КонецЦикла;     
	
	СтрокаСИтогамиПодразделения = Неопределено; 
	СтрокиСИтогамиПодразделения = ДанныеВышестоящегоПодразделения.Строки.НайтиСтроки(Новый Структура("Подразделение, НомерТаблицы, КоличествоСотрудников", ДанныеВышестоящегоПодразделения.Подразделение, 3, КоличествоСотрудников));
	Если СтрокиСИтогамиПодразделения.Количество() Тогда
		СтрокаСИтогамиПодразделения = СтрокиСИтогамиПодразделения[0]; 
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ЕстьПодчиненные", СписокЦелей.Количество()>0);
	ДополнительныеПараметры.Вставить("Подразделение",ДанныеВышестоящегоПодразделения.Подразделение); 
	ВывестиДанныеПоСотрудникам(	ОбластьПодчиненныеПозиции,
								СтрокаСИтогамиПодразделения,
								ДополнительныеПараметры);

	ВывестиДанныеЦелей(ОбластьПодчиненныеПозиции, СписокЦелей, Ложь, ДополнительныеПараметры);	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДополнительныеПараметры.Вставить("ЕстьПодчиненныеПодразделения", ЕстьПодчиненныеПодразделения);
	ВывестиДанныеСотрудников(ОбластьПодчиненныеПозиции, ДанныеВышестоящегоПодразделения, ДанныеВышестоящегоПодразделения.Подразделение, ДополнительныеПараметры);
	
	Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
		
		ЛеваяКолонка = Новый ТабличныйДокумент;
		ЛеваяКолонка.Вывести(ОбластьЧертаСлева);
		ЛеваяКолонка.Вывести(ОбластьУгол);
		
		Если ДанныеВышестоящегоПодразделения.Строки.Индекс(ДанныеПодразделения) < МаксимальныйИндекс Тогда 
			КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - 2;
			Для Сч = 1 По КоличествоСтрок Цикл 
				ЛеваяКолонка.Вывести(ОбластьЧертаСлева);
			КонецЦикла;
		КонецЕсли;
		
		ОбластьПодчиненныеПозиции.Вывести(ЛеваяКолонка.ПолучитьОбласть(1, 1, ЛеваяКолонка.ВысотаТаблицы, 1));
		ОбластьПодчиненныеПозиции.Присоединить(ТабличныйДокумент.ПолучитьОбласть(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы));
		
	КонецЕсли;	

	Если ОбластьПодчиненныеПозиции.ВысотаТаблицы > 0 Тогда 
		ДокументРезультат.Вывести(ОбластьПодчиненныеПозиции.ПолучитьОбласть(1, 1, ОбластьПодчиненныеПозиции.ВысотаТаблицы, ОбластьПодчиненныеПозиции.ШиринаТаблицы));
	КонецЕсли;
	Для Каждого ДанныеПодразделения Из ДанныеВышестоящегоПодразделения.Строки Цикл 
		
		Если ДанныеПодразделения.Подразделение = ТекущееПодразделение 
			или ДанныеПодразделения.СистемныеПоляУровень > Глубина+1 Тогда 
			Продолжить;
		КонецЕсли;        
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ДополнительныеПараметры.Вставить("ЕстьПодчиненныеПодразделения", ЕстьПодчиненныеПодразделения);
		ВывестиДанныеСотрудников(ОбластьПодчиненныеПозиции, ДанныеВышестоящегоПодразделения, ДанныеВышестоящегоПодразделения.Подразделение, ДополнительныеПараметры);
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			
			ЛеваяКолонка = Новый ТабличныйДокумент;
			ЛеваяКолонка.Вывести(ОбластьЧертаСлева);
			ЛеваяКолонка.Вывести(ОбластьУгол);
			
			Если ДанныеВышестоящегоПодразделения.Строки.Индекс(ДанныеПодразделения) < МаксимальныйИндекс Тогда 
				КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - 2;
				Для Сч = 1 По КоличествоСтрок Цикл 
					ЛеваяКолонка.Вывести(ОбластьЧертаСлева);
				КонецЦикла;
			КонецЕсли;
			
			ДокументРезультат.Вывести(ЛеваяКолонка.ПолучитьОбласть(1, 1, ЛеваяКолонка.ВысотаТаблицы, 1));
			ДокументРезультат.Присоединить(ТабличныйДокумент.ПолучитьОбласть(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы));
			
		КонецЕсли;	
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ВывестиДанныеПодразделения(ТабличныйДокумент, ДанныеПодразделения, ДанныеПодразделения.Подразделение, ДополнительныеПараметры);
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			
			ЛеваяКолонка = Новый ТабличныйДокумент;
			ЛеваяКолонка.Вывести(ОбластьЧертаСлева);
			ЛеваяКолонка.Вывести(ОбластьУгол);
			
			Если ДанныеВышестоящегоПодразделения.Строки.Индекс(ДанныеПодразделения) < МаксимальныйИндекс Тогда 
				КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - 2;
				Для Сч = 1 По КоличествоСтрок Цикл 
					ЛеваяКолонка.Вывести(ОбластьЧертаСлева);
				КонецЦикла;
			КонецЕсли;
			
			ДокументРезультат.Вывести(ЛеваяКолонка.ПолучитьОбласть(1, 1, ЛеваяКолонка.ВысотаТаблицы, 1));
			ДокументРезультат.Присоединить(ТабличныйДокумент.ПолучитьОбласть(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы));
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

//выводит данные целей сотрудников, подчиненных подразделениям
Процедура ВывестиДанныеСотрудников(ОбластьПодчиненныеПодразделения, ДанныеВышестоящегоПодразделения, ТекущееПодразделение, Знач ДополнительныеПараметры)
	
	
	Если НЕ ДетализироватьДоСотрудников Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМакета 				= ДополнительныеПараметры.ПараметрыМакета;
	НастройкиОтчета 				= ДополнительныеПараметры.НастройкиОтчета;
	ЕстьПодчиненныеПодразделения 	= ДополнительныеПараметры.ЕстьПодчиненныеПодразделения;
	
	ОбластьМакетаСотрудник					= Макет.ПолучитьОбласть(ОбластьСотрудникАдрес);
	ОбластьЧертаСлева 					= Макет.ПолучитьОбласть(ОбластьЧертаСлеваАдрес);
	
	ОбластьСплошнаяЧертаСлева 			= Макет.ПолучитьОбласть(ОбластьСплошнаяЧертаСлеваАдрес);
	ОбластьУгол 						= Макет.ПолучитьОбласть(ОбластьУголАдрес);
	ОбластьСплошнойУгол					= Макет.ПолучитьОбласть(ОбластьСплошнойУголАдрес);
	ОбластьПустойБлок 					= Макет.ПолучитьОбласть(ОбластьПустойБлокАдрес);
	
	СписокЦелейПоСотрудникам = Новый Соответствие;
	Для Каждого ДанныеПодразделения Из ДанныеВышестоящегоПодразделения.Строки Цикл    
		
		Если НЕ ДанныеПодразделения.Подразделение = ТекущееПодразделение Тогда
			Продолжить;	
		КонецЕсли;   
		
		Для каждого ДанныеСотрудников Из  ДанныеПодразделения.Строки Цикл         
			Если НЕ ЗначениеЗаполнено(ДанныеСотрудников.Сотрудник) Тогда
				Продолжить;	
			КонецЕсли;                            
			
			СписокЦелей = СписокЦелейПоСотрудникам.Получить(ДанныеСотрудников.СотрудникНаименование);
			
			Если СписокЦелей = Неопределено Тогда
				СписокЦелей = Новый	Массив;
			КонецЕсли;			
			
			ЗаполнитьСписокЦелейНазначения(ДанныеСотрудников, "Сотрудник", ДанныеСотрудников.Сотрудник, СписокЦелей);
			Если СписокЦелей.Количество()>0 Тогда
				СписокЦелейПоСотрудникам.Вставить(ДанныеСотрудников.СотрудникНаименование, СписокЦелей);
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;                                     
	ДокументРезультат = Новый ТабличныйДокумент;
	Счетчик = 1;
	МаксимальныйИндекс = СписокЦелейПоСотрудникам.Количество();

	Если МаксимальныйИндекс >0 Тогда
		ДокументРезультат.Вывести(ОбластьЧертаСлева);	
		ДокументРезультат.Присоединить(ОбластьПустойБлок);    	
	КонецЕсли;
	
	Для каждого Элемент Из СписокЦелейПоСотрудникам Цикл   	
		
		СписокЦелей = Элемент.Значение;
		
		Если СписокЦелей.Количество() Тогда    
			
			Индекс = ДанныеПодразделения.Уровень();
			
			ОбластьМакетаСотрудник.Параметры.СотрудникНаименование = Элемент.Ключ;
			ОбластьМакетаСотрудник.Параметры.Сотрудник = Элемент.Ключ;
			ВыводимаяОбласть = ОбластьМакетаСотрудник.Область(1, 1, ОбластьМакетаСотрудник.ВысотаТаблицы, ОбластьМакетаСотрудник.ШиринаТаблицы);
			ВыводимаяОбласть.ЦветФона = ЦветоваяГамма[Индекс];			
			
			ОбластьСотрудник = Новый ТабличныйДокумент;
			ОбластьСотрудник.Вывести(ОбластьМакетаСотрудник);
			
			ДополнительныеПараметры.Вставить("Индекс", Индекс);     
			ДополнительныеПараметры.Вставить("ЗаголовокЦели", "сотрудника");
			ВывестиДанныеЦелей(ОбластьСотрудник, СписокЦелей, Истина, ДополнительныеПараметры);   
		
			Если ОбластьСотрудник.ВысотаТаблицы > 0 Тогда
				
				ЛеваяКолонка = Новый ТабличныйДокумент;
				ЛеваяКолонка.Вывести(ОбластьУгол);
				
				Если ЕстьПодчиненныеПодразделения или Счетчик < МаксимальныйИндекс Тогда 	 
					КоличествоСтрок = ОбластьСотрудник.ВысотаТаблицы - 1;
					Для Сч = 1 По КоличествоСтрок Цикл 
						ЛеваяКолонка.Вывести(ОбластьЧертаСлева);
					КонецЦикла; 
				КонецЕсли;
				ДокументРезультат.Вывести(ЛеваяКолонка.ПолучитьОбласть(1, 1, ЛеваяКолонка.ВысотаТаблицы, 1));
				ДокументРезультат.Присоединить(ОбластьСотрудник.ПолучитьОбласть(1, 1, ОбластьСотрудник.ВысотаТаблицы, ОбластьСотрудник.ШиринаТаблицы));
				Счетчик = Счетчик + 1;
			КонецЕсли; 
		КонецЕсли;		                                                                           
	КонецЦикла;       

	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ОбластьПодчиненныеПодразделения.Вывести (ДокументРезультат);                 
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиДанныеПоСотрудникам(ДокументРезультат, СписокСотрудников, ДополнительныеПараметры)
	
	Количество 				= ?(СписокСотрудников = Неопределено, 0, СписокСотрудников.КоличествоСотрудников);
	Количество 				= ?(Количество = Неопределено или Количество = NULL, 0, Количество);
	Индекс					= ДополнительныеПараметры.Индекс;
	ПараметрыМакета 		= ДополнительныеПараметры.ПараметрыМакета;
	ФотографииСотрудников   = ДополнительныеПараметры.ФотографииСотрудников;   
		
	ОбластьСотрудники			= Макет.ПолучитьОбласть(ОбластьСотрудникиАдрес);     
	ОбластьЧертаСнизу			= Макет.ПолучитьОбласть(ОбластьЧертаСнизуАдрес);     
	ОбластьСплошнаяЧертаСнизу	= Макет.ПолучитьОбласть(ОбластьСплошнаяЧертаСнизуАдрес);     
	ОбластьУгол					= Макет.ПолучитьОбласть(ОбластьУголАдрес);     
	ОбластьЧертаСлева  			= Макет.ПолучитьОбласть(ОбластьЧертаСлеваАдрес);
	ОбластьСплошнаяЧертаСлева 	= ПараметрыМакета.ОбластьСплошнаяЧертаСлева;
	ОбластьСплошнойУгол			= ПараметрыМакета.ОбластьСплошнойУгол;
	
	ВыводимаяОбласть = ОбластьСотрудники.Область(1, 1, ОбластьСотрудники.ВысотаТаблицы, ОбластьСотрудники.ШиринаТаблицы);
	ОбластьСотрудники.Параметры.Количество = ПолучитьСклоненияСтрокиПоЧислу("сотрудник", Количество, , "ЧС = Количественное", "ПД = Именительный")[0]+" в подразделении";
	ВыводимаяОбласть.Расшифровка = Новый Структура("ИмяОтчета, СтруктураОтбора", "УБ_ПроверкаСостоянияСотрудников", Новый Структура("Подразделение", ДополнительныеПараметры.Подразделение));
	СчСтрок = 0;
	СчКолонок = 0;   
	Если Количество > 0 и ФотографииСотрудников.Количество() Тогда  
	ОтступСверху = 7;
	Для каждого Сотрудник Из СписокСотрудников.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Сотрудник.Сотрудник) Тогда
			Продолжить;	
		КонецЕсли; 
		Фото = ФотографииСотрудников[Сотрудник.Сотрудник];
		Если Фото = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Рисунок = ОбластьСотрудники.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
		Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		Рисунок.Высота = 7;
		Рисунок.Ширина = 7;
		Рисунок.Верх =   ОтступСверху;
		Рисунок.Лево =   7*СчКолонок+2;  //Если будут наползать, править здесь
		Рисунок.Картинка = Фото;
		СчКолонок = СчКолонок+1;     
		Если СчКолонок = 8 Тогда  
			Прервать; //считаем, что больше не влезет и не нужно
			//СчСтрок = СчСтрок+1;
			//СчКолонок = 0;     
			//ОтступСверху = ОтступСверху+7*СчСтрок+1;
		КонецЕсли;
	КонецЦикла;
	
	КонецЕсли;
		
	ДокументРезультат.Вывести(ОбластьСотрудники);	      
	ДокументРезультат.Вывести(ОбластьСплошнойУгол);

	ШиринаТаблицы = ОбластьСотрудники.ШиринаТаблицы;
	Для Сч = 2 По ШиринаТаблицы Цикл 
		ДокументРезультат.Присоединить(ОбластьСплошнаяЧертаСнизу);
	КонецЦикла;
	ДокументРезультат.Присоединить(ОбластьСплошнаяЧертаСлева);

КонецПроцедуры

Процедура ЗаполнитьСписокЦелейНазначения(ДанныеВышестоящегоПодразделения, ИмяРеквизита = "Организация", Назначение, СписокЦелей)
	
	СтрокиНазначения = ДанныеВышестоящегоПодразделения.Строки.НайтиСтроки(Новый Структура(ИмяРеквизита, Назначение), Истина);
	Для каждого Строка Из СтрокиНазначения Цикл
		Если ЗначениеЗаполнено(Строка.Цель) Тогда 
			СписокЦелей.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДанныеЦелей(ДокументРезультат, СписокПозиций, ПоследнееПодразделение, ДополнительныеПараметры)
	
	Индекс					= ДополнительныеПараметры.Индекс;
	ПараметрыМакета 		= ДополнительныеПараметры.ПараметрыМакета;
	
	//эти области переопределяем заново, чтобы не изменить их действиями ниже 	
	ОбластьЗаголовокЦели 	= Макет.ПолучитьОбласть(ОбластьЗаголовокЦелиАдрес);  
	ОбластьЧертаСлева   	= Макет.ПолучитьОбласть(ОбластьЧертаСлеваАдрес);
	ОбластьУгол				= Макет.ПолучитьОбласть(ОбластьУголАдрес);
	ОбластьЧертаСнизу		= Макет.ПолучитьОбласть(ОбластьЧертаСнизуАдрес);
	ОбластьСплошнойУгол		= Макет.ПолучитьОбласть(ОбластьСплошнойУголАдрес);
	ОбластьЦелиПодразделенияЗаголовок = Макет.ПолучитьОбласть(ОбластьЦелиПодразделенияЗаголовокАдрес);//ПараметрыМакета.ОбластьЗаголовокЦели;
	ОбластьЦелиПодразделенияЗаголовок.Область(1, 1, ОбластьЦелиПодразделенияЗаголовок.ВысотаТаблицы, ОбластьЦелиПодразделенияЗаголовок.ШиринаТаблицы).ЦветФона = ЦветоваяГамма[Индекс];			
	ОбластьЦелиПодразделенияЗаголовок.Параметры.ЗаголовокЦелей	= "Цели "+ДополнительныеПараметры.ЗаголовокЦели;
	ДокументРезультат.Вывести(ОбластьЦелиПодразделенияЗаголовок);	
    ПрямойШрифт    = Новый Шрифт(ОбластьЗаголовокЦели.Область(1, 1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы).Шрифт,,,,);
	НаклонныйШрифт = Новый Шрифт(ОбластьЗаголовокЦели.Область(1, 1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы).Шрифт,,,,Истина);

	СтруктураЦелей = Новый Структура;
	МаксимальныйИндекс = СписокПозиций.Количество() - 1;
	Если СписокПозиций.Количество() = 0 Тогда
		ОбластьЗаголовокЦели.Параметры.ЗаголовокЦелей = "Цели отсутствуют";
		ОбластьЗаголовокЦели.Параметры.Значение = Неопределено;
		ОбластьЗаголовокЦели.Область("R1C1:"+"R1"+"C"+ОбластьЗаголовокЦели.ШиринаТаблицы).Объединить();
		ОбластьЗаголовокЦели.Область(1, 1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы).ЦветТекста = ЦветоваяГаммаШрифтов.Серый;
		ОбластьЗаголовокЦели.Область(1, 1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы).ГраницаСнизу = Линии.СплошнаяТолстая;
		ДокументРезультат.Вывести(ОбластьЗаголовокЦели);	
	КонецЕсли;                              
    
	Для ИндексЭлемента = 0 По МаксимальныйИндекс Цикл 
		
		ДанныеПозиции = СписокПозиций[ИндексЭлемента];         
		ОбластьЗаголовокЦели.Параметры.ЗаголовокЦелей = ?(НЕ ДанныеПозиции.ИсточникЦели = "Дополнение", ДанныеПозиции.ЦельНаименование, ДанныеПозиции.ЦельНаименование+"("+ДанныеПозиции.НазначениеПредставление+")"); 
		ОбластьЗаголовокЦели.Область(1, ОбластьЗаголовокЦели.ШиринаТаблицы, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы).ЦветТекста = ЦветоваяГаммаШрифтов.Зеленый; 
		Значение = НСтр("ru = '%1%2'");   
		Если ДанныеПозиции.ИсточникЦели = "Дополнение" Тогда
			Продолжить; //TODO ООО 15.03.2022  отключим пока наследование	
			ОбластьЗаголовокЦели.Область(1, 1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы-2).Шрифт = НаклонныйШрифт;
		Иначе
			ОбластьЗаголовокЦели.Область(1, 1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы-2).Шрифт = ПрямойШрифт;
		КонецЕсли;
		
		Если ДанныеПозиции.Значение = Null и ДанныеПозиции.План= Null Тогда
			ОбластьЗаголовокЦели.Параметры.Значение = "НПФ";   
			ОбластьЗаголовокЦели.Область(1, 1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы).ЦветТекста = ЦветоваяГаммаШрифтов.Серый; 	
		ИначеЕсли ДанныеПозиции.Значение = Null Тогда
			ОбластьЗаголовокЦели.Параметры.Значение = "НФ";   
			ОбластьЗаголовокЦели.Область(1, 1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы).ЦветТекста = ЦветоваяГаммаШрифтов.Серый; 
		ИначеЕсли ДанныеПозиции.Значение >= 0 Тогда
			ОбластьЗаголовокЦели.Параметры.Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Значение, ДанныеПозиции.НаправлениеТренда, Формат(ДанныеПозиции.Значение,"ЧЦ=10; ЧДЦ=2"))+"%";
			ОбластьЗаголовокЦели.Область(1, ОбластьЗаголовокЦели.ШиринаТаблицы-1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы).ЦветТекста = ЦветоваяГаммаШрифтов.Зеленый; 
		ИначеЕсли  ДанныеПозиции.Значение < 0 Тогда                                                                                                                              
			ОбластьЗаголовокЦели.Параметры.Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Значение, ДанныеПозиции.НаправлениеТренда, Формат(ДанныеПозиции.Значение,"ЧЦ=10; ЧДЦ=2" ))+"%";
			ОбластьЗаголовокЦели.Область(1, ОбластьЗаголовокЦели.ШиринаТаблицы-1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы).ЦветТекста = ЦветоваяГаммаШрифтов.Красный; 
		КонецЕсли;                                                                                                                                               
		
		Если ИндексЭлемента = МаксимальныйИндекс
			или ИндексЭлемента<МаксимальныйИндекс и СписокПозиций[ИндексЭлемента+1].ИсточникЦели = "Дополнение" Тогда
			ОбластьЗаголовокЦели.Область(1, 1, ОбластьЗаголовокЦели.ВысотаТаблицы, ОбластьЗаголовокЦели.ШиринаТаблицы).ГраницаСнизу = Линии.СплошнаяТолстая;			
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьЗаголовокЦели);	
		
	КонецЦикла;   
	
КонецПроцедуры
 
Функция ПараметрыОтчета(ДанныеОтчета, ДатаОтчета, ЮридическаяСтруктура)
	
		
	ОбластьПодразделение = Макет.ПолучитьОбласть(ОбластьПодразделениеАдрес);
	ОбластьРуководительПодразделения = Макет.ПолучитьОбласть(ОбластьРуководительПодразделенияАдрес);
	ОбластьЗаголовокЦели = Макет.ПолучитьОбласть(ОбластьЗаголовокЦелиАдрес); 
	ОбластьСотрудники = Макет.ПолучитьОбласть(ОбластьСотрудникиАдрес);
	//ОбластьКадровыйРезервНачало = Макет.ПолучитьОбласть("R9C14:R9C19");
	//ОбластьКадровыйРезервПродолжение = Макет.ПолучитьОбласть("R10C14:R10C19");
	//ОбластьКадровыйРезервОкончание = Макет.ПолучитьОбласть("R11C14:R11C19");
	ОбластьЧертаСлева = Макет.ПолучитьОбласть(ОбластьЧертаСлеваАдрес);
	ОбластьСплошнаяЧертаСлева = Макет.ПолучитьОбласть(ОбластьСплошнаяЧертаСлеваАдрес);
	ОбластьЧертаСнизу 		  = Макет.ПолучитьОбласть(ОбластьЧертаСнизуАдрес);
	
	ОбластьСплошнаяЧертаСнизу = Макет.ПолучитьОбласть(ОбластьСплошнаяЧертаСнизуАдрес);
	ОбластьУгол 				 = Макет.ПолучитьОбласть(ОбластьУголАдрес);
	ОбластьПустойБлок 			= Макет.ПолучитьОбласть(ОбластьПустойБлокАдрес);
	
	ПараметрыМакета = Новый Структура;
	ПараметрыМакета.Вставить("ОбластьПодразделение", ОбластьПодразделение);
	ПараметрыМакета.Вставить("ОбластьРуководительПодразделения", ОбластьРуководительПодразделения);
	ПараметрыМакета.Вставить("ОбластьЗаголовокЦели", ОбластьЗаголовокЦели);
	ПараметрыМакета.Вставить("ОбластьСотрудники", ОбластьСотрудники);
	//ПараметрыМакета.Вставить("ОбластьКадровыйРезервНачало", ОбластьКадровыйРезервНачало);
	//ПараметрыМакета.Вставить("ОбластьКадровыйРезервПродолжение", ОбластьКадровыйРезервПродолжение);
	//ПараметрыМакета.Вставить("ОбластьКадровыйРезервОкончание", ОбластьКадровыйРезервОкончание);
	ПараметрыМакета.Вставить("ОбластьЧертаСлева", ОбластьЧертаСлева);
	ПараметрыМакета.Вставить("ОбластьСплошнаяЧертаСлева", ОбластьСплошнаяЧертаСлева);
	
	ПараметрыМакета.Вставить("ОбластьСераяЧертаСнизу", ОбластьЧертаСнизу);
	ПараметрыМакета.Вставить("ОбластьСплошнаяЧертаСнизу", ОбластьСплошнаяЧертаСнизу);
	ПараметрыМакета.Вставить("ОбластьУгол", ОбластьУгол);
	ПараметрыМакета.Вставить("ОбластьПустойБлок", ОбластьПустойБлок);
	ПараметрыМакета.Вставить("ОбластьСплошнойУгол", Макет.ПолучитьОбласть(ОбластьСплошнойУголАдрес));
		
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
	//	ПараметрВыводитьКадровыйРезерв = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьКадровыйРезерв"));	
	//	ВыводитьКадровыйРезерв = ?(ПараметрВыводитьКадровыйРезерв = Неопределено, Ложь, ПараметрВыводитьКадровыйРезерв.Значение);
	//Иначе 
	//	ВыводитьКадровыйРезерв = Ложь;
	//КонецЕсли;
	//
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаОтчета", ДатаОтчета);
	
	Руководители = РуководителиПодразделений(ДанныеОтчета, ЮридическаяСтруктура);
	ФотографииСотрудников = ФотографииСотрудников(ДанныеОтчета);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыМакета", ПараметрыМакета);
	ДополнительныеПараметры.Вставить("НастройкиОтчета", СтруктураНастроек);
	ДополнительныеПараметры.Вставить("РуководителиПодразделений", Руководители);
	ДополнительныеПараметры.Вставить("ФотографииСотрудников", ФотографииСотрудников);
	
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция РуководителиПодразделений(ДанныеОтчета, ЮридическаяСтруктура)
	
	СоответствиеРуководителей = Новый Соответствие;
	Для каждого СтрокаДанных Из ДанныеОтчета.Строки Цикл
		ДополнитьРуководителей(СоответствиеРуководителей, СтрокаДанных);	
	КонецЦикла;
	
	Возврат СоответствиеРуководителей;
	
КонецФункции   

Процедура ДополнитьРуководителей(СоответствиеРуководителей, КоллекцияСтрок)

	Для Каждого СтрокаДанных Из КоллекцияСтрок.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.Руководитель) Тогда
			СоответствиеРуководителей.Вставить(СтрокаДанных.Подразделение, Новый Структура("Руководитель, РуководительПредставление, ДолжностьПредставление", 
			СтрокаДанных.Руководитель,
			СтрокаДанных.РуководительПредставление, 
			СтрокаДанных.ДолжностьПредставление));
		КонецЕсли;
		ДополнитьРуководителей(СоответствиеРуководителей, СтрокаДанных);
	КонецЦикла;

КонецПроцедуры  

Функция ФотографииСотрудников(ДанныеОтчета)

	ФотоВРегистре = УБ_ОбщегоНазначенияПовтИсп.ИспользоватьСправочникиКАУП();	
	
	УникальныеСотрудники = Новый Соответствие;
	ЗаполнитьВыбранныхСотрудников(ДанныеОтчета, УникальныеСотрудники);
	СотрудникиМассив = ОбщегоНазначения.ВыгрузитьКолонку(УникальныеСотрудники, "Ключ");
	Запрос = Новый Запрос;
	Если ФотоВРегистре Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ФотографииФизическихЛиц.Фотография КАК ХранимыйФайл
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФотографииФизическихЛиц КАК ФотографииФизическихЛиц
		|		ПО (Сотрудники.Ссылка В (&СписокСотрудников))
		|			И Сотрудники.ФизическоеЛицо = ФотографииФизическихЛиц.ФизическоеЛицо";
		
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.Фотография КАК ХранимыйФайл
		|ИЗ
		|	Справочник.УБ_Сотрудники КАК Сотрудники
		|		ГДЕ Сотрудники.Ссылка В (&СписокСотрудников)";

		
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокСотрудников", СотрудникиМассив);
	ФотографииСотрудников = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Фотография = Новый Картинка(Выборка.ХранимыйФайл.Получить());
		ФотографииСотрудников.Вставить(Выборка.Сотрудник, Фотография);
	КонецЦикла;
	
	Возврат ФотографииСотрудников;
	
КонецФункции

Процедура ЗаполнитьВыбранныхСотрудников(ДанныеОтчета, УникальныеСотрудники)
	
	Для Каждого СтрокаДанных Из ДанныеОтчета.Строки Цикл 
		Если ЗначениеЗаполнено(СтрокаДанных.Сотрудник) Тогда 
			УникальныеСотрудники.Вставить(СтрокаДанных.Сотрудник, Истина);
		Иначе
			ЗаполнитьВыбранныхСотрудников(СтрокаДанных, УникальныеСотрудники);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция МакетКомпоновкиДанных(Схема, Настройки, ДанныеРасшифровки = Неопределено, МакетОформления = Неопределено,
	ПроверятьДоступностьПолей = Истина, ПараметрыФункциональныхОпций = Неопределено, ТипГенератора = Неопределено) Экспорт
	
	Если ТипГенератора = Неопределено Тогда
		ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(Схема, Настройки, ДанныеРасшифровки, МакетОформления,
		ТипГенератора, ПроверятьДоступностьПолей, ПараметрыФункциональныхОпций);
	
	
	Возврат МакетКомпоновкиДанных;
	
КонецФункции

Функция МакетКомпоновкиДанныхДляКоллекцииЗначений(Схема, Настройки, ДанныеРасшифровки = Неопределено, МакетОформления = Неопределено,
	ПроверятьДоступностьПолей = Истина, ПараметрыФункциональныхОпций = Неопределено) Экспорт
	
	Возврат МакетКомпоновкиДанных(Схема, Настройки, ДанныеРасшифровки, МакетОформления,
		ПроверятьДоступностьПолей, ПараметрыФункциональныхОпций, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
КонецФункции

//формирует текст запроса для набора данных получения корневого родителя каждого подразделения
Процедура ПодготовитьНаборДанныхДляПолученияПредков()
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(СхемаКомпоновкиДанных.НаборыДанных.ОсновныеДанные.Запрос);
	ПакетПредкиПодразделений = СхемаЗапроса.ПакетЗапросов[0];
	ТекстПрародители = Прародители(15);//предполагаемая вложенность иерархии
	ИсходныйТекст = ПакетПредкиПодразделений.ПолучитьТекстЗапроса();
	ПолныйТекстЗапросаСхемы = СхемаКомпоновкиДанных.НаборыДанных.ОсновныеДанные.Запрос;
	ПолныйТекстЗапросаСхемы = СтрЗаменить(ПолныйТекстЗапросаСхемы, ИсходныйТекст, ТекстПрародители); 
	СхемаКомпоновкиДанных.НаборыДанных.ОсновныеДанные.Запрос = ПолныйТекстЗапросаСхемы;
	
КонецПроцедуры 

Функция Прародители(МаксимальнаяДлинаПути) Экспорт
	
	Пролог = "ВЫБРАТЬ
	         |	УБ_Подразделения.Родитель КАК НачалоДуги,
	         |	УБ_Подразделения.Ссылка КАК КонецДуги
	         |ПОМЕСТИТЬ ЗамыканияДлины1
	         |ИЗ
	         |	Справочник.УБ_Подразделения КАК УБ_Подразделения
	         |ГДЕ
	         |	УБ_Подразделения.Родитель <> ЗНАЧЕНИЕ(Справочник.УБ_Подразделения.ПустаяСсылка)
	         |	И ВЫБОР
	         |			КОГДА УБ_Подразделения.Расформировано = ИСТИНА
	         |				ТОГДА УБ_Подразделения.ДатаРасформирования >= &Период
	         |			ИНАЧЕ УБ_Подразделения.Расформировано = ЛОЖЬ
	         |		КОНЕЦ
	         |	И ВЫБОР
	         |			КОГДА УБ_Подразделения.Сформировано = ИСТИНА
	         |				ТОГДА УБ_Подразделения.ДатаСоздания <= &Период
	         |			ИНАЧЕ ИСТИНА
	         |		КОНЕЦ
	         |
	         |ОБЪЕДИНИТЬ
	         |
	         |ВЫБРАТЬ
	         |	УБ_Подразделения.Ссылка,
	         |	УБ_Подразделения.Ссылка
	         |ИЗ
	         |	Справочник.УБ_Подразделения КАК УБ_Подразделения
	         |ГДЕ
	         |	УБ_Подразделения.Родитель = ЗНАЧЕНИЕ(Справочник.УБ_Подразделения.ПустаяСсылка)
	         |	И ВЫБОР
	         |			КОГДА УБ_Подразделения.Расформировано = ИСТИНА
	         |				ТОГДА УБ_Подразделения.ДатаРасформирования >= &Период
	         |			ИНАЧЕ ИСТИНА
	         |		КОНЕЦ
	         |	И ВЫБОР
	         |			КОГДА УБ_Подразделения.Сформировано = ИСТИНА
	         |				ТОГДА УБ_Подразделения.ДатаСоздания <= &Период
	         |			ИНАЧЕ ИСТИНА
	         |		КОНЕЦ
			 |;";

    Рефрен = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПерваяДуга.НачалоДуги, ВтораяДуга.КонецДуги ПОМЕСТИТЬ ЗамыканияДлины#2 ИЗ ЗамыканияДлины#1 КАК ПерваяДуга
            | СОЕДИНЕНИЕ ЗамыканияДлины#1 КАК ВтораяДуга ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги;
            | УНИЧТОЖИТЬ ЗамыканияДлины#1;";

    Эпилог = "ВЫБРАТЬ НачалоДуги Предок, КонецДуги Потомок ПОМЕСТИТЬ ВТ_ПредкиПодразделений ИЗ ЗамыканияДлины#2
            | ГДЕ НачалоДуги <> КонецДуги И НачалоДуги.Родитель = Значение(Справочник.УБ_Подразделения.ПустаяСсылка)";

	
	ТекстЗапроса = Пролог;

    МаксимальнаяДлинаЗамыканий = 1;

    Пока МаксимальнаяДлинаЗамыканий < МаксимальнаяДлинаПути Цикл

        ТекстЗапроса = ТекстЗапроса+ СтрЗаменить(СтрЗаменить(Рефрен, "#1", Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0")), "#2", Формат(2 * МаксимальнаяДлинаЗамыканий, "ЧГ=0"));

        МаксимальнаяДлинаЗамыканий = 2 * МаксимальнаяДлинаЗамыканий

    КонецЦикла;
	
    ТекстЗапроса = ТекстЗапроса+ СтрЗаменить(Эпилог, "#2", Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0"));
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура УстановитьНачальноеЗначениеОтбора() 
	Если УБ_ОбщегоНазначенияПовтИсп.ИспользоватьСправочникиКАУП() Тогда
	Для каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Элемент.ПравоеЗначение = Справочники.УБ_Подразделения.ПустаяСсылка()  Тогда
			Элемент.ПравоеЗначение = УБ_ОбщегоНазначения.ЗначениеРеквизитаПоУмолчанию("Подразделение");	
		КонецЕсли;	
	КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
	
#Область Инициализация

ПодготовитьНаборДанныхДляПолученияПредков();
УБ_ОбщегоНазначения.СкорректироватьТекстЗапросаПодТекущуюКонфигурацию(СхемаКомпоновкиДанных.НаборыДанных.ОсновныеДанные.Запрос);
УБ_ОбщегоНазначения.СкорректироватьСхемуПодТекущуюКонфигурацию(СхемаКомпоновкиДанных);
ЦветоваяГамма = Новый Массив;
ЦветоваяГамма.Добавить(Новый Цвет (91,155,213));     
ЦветоваяГамма.Добавить(Новый Цвет (180,198,231));     
ЦветоваяГамма.Добавить(Новый Цвет (222,236,247));
ЦветоваяГамма.Добавить(Новый Цвет (242,242,242));
ЦветоваяГамма.Добавить(Новый Цвет (91,156,214));
ЦветоваяГамма.Добавить(Новый Цвет (181,199,232));
ЦветоваяГамма.Добавить(Новый Цвет (222,236,247));

ЦветоваяГаммаШрифтов = Новый Структура;
ЦветоваяГаммаШрифтов.Вставить("Красный", Новый Цвет (255,0,0));     
ЦветоваяГаммаШрифтов.Вставить("Желтый",  Новый Цвет(255,153,0));
ЦветоваяГаммаШрифтов.Вставить("Зеленый", Новый Цвет (0,148,0));
ЦветоваяГаммаШрифтов.Вставить("Серый",   WebЦвета.Серый);

Линии = Новый Структура;
Линии.Вставить("СплошнаяТолстая", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2));
Линии.Вставить("СплошнаяТонкая",  Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1));

ОбластьОрганизацияАдрес					= "R3C2:R3C7";
ОбластьПодразделениеАдрес 				= "R3C2:R4C7";
ОбластьСотрудникАдрес 					= "R30C2:R30C7";
ОбластьРуководительПодразделенияАдрес 	= "R17C2:R17C7";
ОбластьЗаголовокЦелиАдрес	 			= "R21C2:R21C7"; 
ОбластьСотрудникиАдрес					= "R23C2:R25C7";
ОбластьЧертаСлеваАдрес 					= "R3C10:R3C10";
ОбластьСплошнаяЧертаСлеваАдрес 			= "R3C15:R3C15";
ОбластьСплошнаяЧертаСнизуАдрес 			= "R3C16:R3C16";
ОбластьСплошнойУголАдрес 				= "R3C18:R3C18";
ОбластьЧертаСнизуАдрес					= "R3C13:R3C13";
ОбластьУголАдрес					    = "R3C11:R3C11";
ОбластьПустойБлокАдрес					= "R3C12:R3C12";  
ОбластьЦелиПодразделенияЗаголовокАдрес	= "R28C2:R28C7";

Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.УБ_КартаЦелейКомпании.ПФ_MXL_КартаЦелейКомпании");


#КонецОбласти

#КонецЕсли