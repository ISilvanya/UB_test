#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	#Область ПрограммныйИнтерфейс
#Область ДляВызоваИзДругихПодсистем
// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Подразделение)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом
#КонецОбласти
#КонецОбласти
  

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьДанныеДляПодбораСотрудников(Сотрудники, ОтключитьБизнесЛогику = Ложь, ДополнительныеСвойства = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59) КАК ДатаОкончания
		|ИЗ
		|	Справочник.УБ_Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В (&Сотрудники)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФильтр = РезультатЗапроса.Выгрузить();
	ОбновитьРегистрДанныеДляПодбораСотрудников(ТаблицаФильтр);
	
КонецПроцедуры

Процедура ОбновитьРегистрДанныеДляПодбораСотрудников(ТаблицаФильтр) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФильтр", ТаблицаФильтр);
	Запрос.УстановитьПараметр("МаксимальнаяДата", УБ_КадровыйУчет.МаксимальнаяДата());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаФильтр.Сотрудник,
		|	ТаблицаФильтр.ДатаНачала,
		|	ТаблицаФильтр.ДатаОкончания
		|ПОМЕСТИТЬ ВТТаблицаФильтр
		|ИЗ
		|	&ТаблицаФильтр КАК ТаблицаФильтр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК НачалоПериода,
		|	ТаблицаФильтр.ДатаОкончания КАК КонецПериода,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.Организация КАК Организация,
		|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудников.Должность КАК Должность,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия
		|ПОМЕСТИТЬ ВТКадроваяИсторияСотрудниковПериоды
		|ИЗ
		|	ВТТаблицаФильтр КАК ТаблицаФильтр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УБ_КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ТаблицаФильтр.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|		И КадроваяИсторияСотрудников.Период >= НАЧАЛОПЕРИОДА(ТаблицаФильтр.ДатаНачала, ДЕНЬ)
		|		И КадроваяИсторияСотрудников.Период <= ВЫБОР
		|			КОГДА ТаблицаФильтр.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|			ИНАЧЕ КОНЕЦПЕРИОДА(ТаблицаФильтр.ДатаОкончания, ДЕНЬ)
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудниковПериоды.НачалоПериода КАК Начало,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСотрудниковПериоды.Сотрудник ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДанныеКадровойИстории,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСотрудниковПериоды.КонецПериода ЕСТЬ NULL
		|			ТОГДА &МаксимальнаяДата
		|		ИНАЧЕ КадроваяИсторияСотрудниковПериоды.КонецПериода
		|	КОНЕЦ КАК Окончание,
		|	КадроваяИсторияСотрудниковПериоды.ВидСобытия КАК ВидСобытия,
		|	КадроваяИсторияСотрудниковПериоды.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудниковПериоды.Организация КАК Организация,
		|	КадроваяИсторияСотрудниковПериоды.Должность КАК Должность,
		|	КадроваяИсторияСотрудниковПериоды.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Код КАК Код,
		|	Сотрудники.Наименование КАК Наименование,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	ВТТаблицаФильтр КАК ТаблицаФильтр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УБ_Сотрудники КАК Сотрудники
		|		ПО ТаблицаФильтр.Сотрудник = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковПериоды КАК КадроваяИсторияСотрудниковПериоды
		|		ПО ТаблицаФильтр.Сотрудник = КадроваяИсторияСотрудниковПериоды.Сотрудник
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Начало";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Набор = РегистрыСведений.УБ_ДанныеДляПодбораСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		
		ПредыдущаяСтрокаНабора = Неопределено;
		Если Выборка.ЕстьДанныеКадровойИстории Тогда
			
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка, "Организация, ФизическоеЛицо, Код, Наименование, Сотрудник");
			СтрокаНабора.Начало = '00010101';
			СтрокаНабора.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
			ПредыдущаяСтрокаНабора = СтрокаНабора;
			
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			Если  ПредыдущаяСтрокаНабора <> Неопределено Тогда
				ПредыдущаяСтрокаНабора.Окончание = НачалоДня(НачалоДня(Выборка.Начало) - 1);
			КонецЕсли;
			
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			
			СтрокаНабора.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
			
			ПредыдущаяСтрокаНабора = СтрокаНабора;
			
		КонецЦикла;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеСотрудника(СотрудникОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.УБ_ДанныеДляПодбораСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(СотрудникОбъект.Ссылка);
	
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Организация = СотрудникОбъект.ГоловнаяОрганизация;
		Запись.Код = СотрудникОбъект.Код;
		Запись.Наименование = СотрудникОбъект.Наименование;
		Запись.ПометкаУдаления = СотрудникОбъект.ПометкаУдаления;
		Запись.ВАрхиве = СотрудникОбъект.ВАрхиве;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьДанныеНовогоСотрудника(СотрудникОбъект, ОтключитьБизнесЛогику = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.УБ_ДанныеДляПодбораСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(СотрудникОбъект.Ссылка);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Код = СотрудникОбъект.Код;
	Запись.Наименование = СотрудникОбъект.Наименование;
	Запись.Сотрудник = СотрудникОбъект.Ссылка;
	Запись.Организация = СотрудникОбъект.ГоловнаяОрганизация;
	Запись.ФизическоеЛицо = СотрудникОбъект.ФизическоеЛицо;
	Запись.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
	Запись.ПометкаУдаления = СотрудникОбъект.ПометкаУдаления;
	Запись.ВАрхиве = СотрудникОбъект.ВАрхиве;
	Запись.Окончание = Дата(3999, 12, 31, 23, 59, 59);
	
	Если ОтключитьБизнесЛогику Тогда
		НаборЗаписей.ОбменДанными.Загрузка = Истина; 
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли