#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(Запись) Экспорт
	
	Адреса = Новый Структура;
	Адреса.Вставить("СхемаКомпоновкиДанныхПлана");
	Адреса.Вставить("НастройкиКомпоновкиДанныхПлана");
	Адреса.Вставить("СхемаКомпоновкиДанныхФакта");
	Адреса.Вставить("НастройкиКомпоновкиДанныхФакта");
	
	Если ТипЗнч(Запись) = Тип("ДанныеФормыСтруктура") Тогда
		МенеджерЗаписи = РегистрыСведений.УБ_СхемыСбораДанныхПоказателейЭффективности.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись.ИсходныйКлючЗаписи);
		МенеджерЗаписи.Прочитать();
	Иначе
		МенеджерЗаписи = Запись;
	КонецЕсли;
	
	СхемаКомпоновкиДанныхПлана = МенеджерЗаписи.ХранилищеСхемыКомпоновкиДанныхПлана.Получить();
	Если СхемаКомпоновкиДанныхПлана = Неопределено И ПустаяСтрока(МенеджерЗаписи.СхемаКомпоновкиДанныхПлана) Тогда
		СхемаКомпоновкиДанныхПлана = Справочники.УБ_ПоказателиЭффективности.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанных");
	ИначеЕсли СхемаКомпоновкиДанныхПлана = Неопределено
		И Не ПустаяСтрока(МенеджерЗаписи.СхемаКомпоновкиДанныхПлана) Тогда
		СхемаКомпоновкиДанныхПлана = Справочники.УБ_ПоказателиЭффективности.ПолучитьМакет(МенеджерЗаписи.СхемаКомпоновкиДанныхПлана);
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанныхПлана = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанныхПлана, Новый УникальныйИдентификатор);
	
	СхемаКомпоновкиДанныхФакта = МенеджерЗаписи.ХранилищеСхемыКомпоновкиДанныхФакта.Получить();
	Если СхемаКомпоновкиДанныхФакта = Неопределено И ПустаяСтрока(МенеджерЗаписи.СхемаКомпоновкиДанныхФакта) Тогда
		СхемаКомпоновкиДанныхФакта = Справочники.УБ_ПоказателиЭффективности.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанных");
	ИначеЕсли СхемаКомпоновкиДанныхФакта = Неопределено
		И Не ПустаяСтрока(МенеджерЗаписи.СхемаКомпоновкиДанныхФакта) Тогда
		СхемаКомпоновкиДанныхФакта = Справочники.УБ_ПоказателиЭффективности.ПолучитьМакет(МенеджерЗаписи.СхемаКомпоновкиДанныхФакта);
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанныхФакта = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанныхФакта, Новый УникальныйИдентификатор);
	
	НастройкиКомпоновкиДанныхПлана = МенеджерЗаписи.ХранилищеНастроекКомпоновкиДанныхПлана.Получить();
	Если ЗначениеЗаполнено(НастройкиКомпоновкиДанныхПлана) Тогда
		Адреса.НастройкиКомпоновкиДанныхПлана = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанныхПлана, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	НастройкиКомпоновкиДанныхФакта = МенеджерЗаписи.ХранилищеНастроекКомпоновкиДанныхФакта.Получить();
	Если ЗначениеЗаполнено(НастройкиКомпоновкиДанныхФакта) Тогда
		Адреса.НастройкиКомпоновкиДанныхФакта = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанныхФакта, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.УБ_СхемыСбораДанныхПоказателейЭффективности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.0.1.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра ""Сбор данных показателей""'");
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиЭффективности.Ссылка КАК Ссылка,
		|	ПоказателиЭффективности.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
		|	ПоказателиЭффективности.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
		|	ПоказателиЭффективности.ОписаниеУстановкиПлана КАК ОписаниеУстановкиПлана,
		|	ПоказателиЭффективности.ОписаниеПодсчетаФакта КАК ОписаниеПодсчетаФакта
		|ИЗ
		|	Справочник.УБ_ПоказателиЭффективности КАК ПоказателиЭффективности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБ_СхемыСбораДанныхПоказателейЭффективности КАК СборДанных
		|		ПО ПоказателиЭффективности.Ссылка = СборДанных.ПоказательЭффективности
		|ГДЕ
		|	ПоказателиЭффективности.ВариантРасчетаЗначенияФакта = ЗНАЧЕНИЕ(Перечисление.УБ_ВариантыРасчетаЗначенийПоказателя.ИзСхемыПоказателя)
		|	И СборДанных.СхемаКомпоновкиДанныхФакта ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УБ_СхемыСбораДанныхПоказателейЭффективности");
			ЭлементБлокировки.УстановитьЗначение("ПоказательЭффективности", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.УБ_СхемыСбораДанныхПоказателейЭффективности.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПоказательЭффективности.Установить(Выборка.Ссылка);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Период = '20000101';
			Запись.ПоказательЭффективности = Выборка.Ссылка;
			Запись.СхемаКомпоновкиДанныхФакта = Выборка.СхемаКомпоновкиДанных;
			
			СхемаКомпоновкиДанныхФакта = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			Если СхемаКомпоновкиДанныхФакта <> Неопределено Тогда
				Запись.ХранилищеСхемыКомпоновкиДанныхФакта = Новый ХранилищеЗначения(СхемаКомпоновкиДанныхФакта);
			Иначе
				Запись.ХранилищеСхемыКомпоновкиДанныхФакта = Новый ХранилищеЗначения(Неопределено);
			КонецЕсли;
			
			Запись.ОписаниеУстановкиПлана = Выборка.ОписаниеУстановкиПлана;
			Запись.ОписаниеПодсчетаФакта = Выборка.ОписаниеПодсчетаФакта;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать справочник: %1 по причине: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.УБ_СхемыСбораДанныхПоказателейЭффективности,
				Выборка.Ссылка,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли